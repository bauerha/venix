_signal:	push	bp
_signal+1:	mov	bp,sp
_signal+3:	push	si
_signal+4:	push	di
_signal+5:	mov	di,#22
_signal+8:	cmp	di,0
_signal+c:	jnb	_signal+25
_signal+e:	mov	ax,*26(di)
_signal+11:	cmp	ax,*4(bp)
_signal+14:	jne	_signal+20
_signal+16:	push	*6(bp)
_signal+19:	push	di
_signal+1a:	call	_psignal
_signal+1d:	add	sp,*4
_signal+20:	add	di,*22
_signal+23:	j	_signal+8
_signal+25:	pop	di
_signal+26:	pop	si
_signal+27:	pop	bp
_signal+28:	ret

_psignal:
_psignal:	push	bp
_psignal+1:	mov	bp,sp
_psignal+3:	push	si
_psignal+4:	push	di
_psignal+5:	cmp	*6(bp),*21
_psignal+9:	jnl	_psignal+58
_psignal+b:	mov	di,*4(bp)
_psignal+e:	mov	ax,*6(bp)
_psignal+11:	dec	*6(bp)
_psignal+14:	cmp	ax,#9
_psignal+17:	jne	_psignal+28
_psignal+19:	andb	*2(di),*bf
_psignal+1d:	cmpb	*2(di),*3
_psignal+21:	jne	_psignal+28
_psignal+23:	push	di
_psignal+24:	call	0
_psignal+27:	pop	cx
_psignal+28:	mov	ax,*6(bp)
_psignal+2b:	cwd
_psignal+2c:	mov	bx,#1
_psignal+2f:	xor	si,si
_psignal+31:	mov	cx,ax
_psignal+33:	or	cx,cx
_psignal+35:	je	_psignal+3d
_psignal+37:	shl	bx
_psignal+39:	rcl	si
_psignal+3b:	loop	_psignal+37
_psignal+3d:	or	*28(di),bx
_psignal+40:	or	*30(di),si
_psignal+43:	cmpb	*3(di),*64
_psignal+47:	jle	_psignal+4d
_psignal+49:	movb	*3(di),*64
_psignal+4d:	cmpb	*2(di),*2
_psignal+51:	jne	_psignal+58
_psignal+53:	push	di
_psignal+54:	call	0
_psignal+57:	pop	cx
_psignal+58:	pop	di
_psignal+59:	pop	si
_psignal+5a:	pop	bp
_psignal+5b:	ret

_fsig:
_fsig:		push	bp
_fsig+1:	mov	bp,sp
_fsig+3:	push	si
_fsig+4:	push	di
_fsig+5:	sub	sp,*4
_fsig+8:	xor	di,di
_fsig+a:	mov	bx,*4(bp)
_fsig+d:	mov	ax,*28(bx)
_fsig+10:	mov	dx,*30(bx)
_fsig+13:	mov	*-8(bp),ax
_fsig+16:	mov	*-6(bp),dx
_fsig+19:	cmp	*-6(bp),*0
_fsig+1d:	jne	_fsig+23
_fsig+1f:	cmp	*-8(bp),*0
_fsig+23:	je	_fsig+2e
_fsig+25:	shr	*-6(bp)
_fsig+28:	rcr	*-8(bp)
_fsig+2b:	inc	di
_fsig+2c:	j	_fsig+19
_fsig+2e:	mov	ax,di
_fsig+30:	lea	sp,*-4(bp)
_fsig+33:	pop	di
_fsig+34:	pop	si
_fsig+35:	pop	bp
_fsig+36:	ret

_issig:
_issig:		push	bp
_issig+1:	mov	bp,sp
_issig+3:	push	si
_issig+4:	push	di
_issig+5:	sub	sp,*8
_issig+8:	mov	si,76
_issig+c:	cmp	*30(si),*0
_issig+10:	jne	_issig+16
_issig+12:	cmp	*28(si),*0
_issig+16:	je	_issig+6b
_issig+18:	push	si
_issig+19:	call	_fsig
_issig+1c:	pop	cx
_issig+1d:	mov	di,ax
_issig+1f:	mov	bx,di
_issig+21:	shl	bx
_issig+23:	cmp	#d6(bx),*1
_issig+28:	jne	_issig+30
_issig+2a:
data address not found
_issig+2c:	addb	(bx+si),cl
_issig+2e:	je	_issig+34
_issig+30:	mov	ax,di
_issig+32:	j	_issig+6d
_issig+34:	lea	ax,*-1(di)
_issig+37:	cwd
_issig+38:	mov	*-8(bp),ax
_issig+3b:	mov	ax,#1
_issig+3e:	xor	dx,dx
_issig+40:	mov	cx,*-8(bp)
_issig+43:	or	cx,cx
_issig+45:	je	_issig+4d
_issig+47:	shl	ax
_issig+49:	rcl	dx
_issig+4b:	loop	_issig+47
_issig+4d:
data address not found
_issig+4f:
data address not found
_issig+51:	mov	*-12(bp),ax
_issig+54:	mov	*-10(bp),dx
_issig+57:	mov	ax,*28(si)
_issig+5a:	mov	dx,*30(si)
_issig+5d:	and	ax,*-12(bp)
_issig+60:	and	dx,*-10(bp)
_issig+63:	mov	*28(si),ax
_issig+66:	mov	*30(si),dx
_issig+69:	j	_issig+c
_issig+6b:	xor	ax,ax
_issig+6d:	lea	sp,*-4(bp)
_issig+70:	pop	di
_issig+71:	pop	si
_issig+72:	pop	bp
_issig+73:	ret

_stop:
_stop:		push	bp
_stop+1:	mov	bp,sp
_stop+3:	push	si
_stop+4:	push	di
_stop+5:	mov	si,76
_stop+9:	cmp	*10(si),*1
_stop+d:	je	_stop+44
_stop+f:	mov	di,#22
_stop+12:	cmp	di,0
_stop+16:	jnb	_stop+44
_stop+18:	mov	ax,*8(di)
_stop+1b:	cmp	ax,*10(si)
_stop+1e:	jne	_stop+3f
_stop+20:	push	di
_stop+21:	call	0
_stop+24:	pop	cx
_stop+25:	movb	*2(si),*6
_stop+29:	movb	*3(si),*ff
_stop+2d:	call	0
_stop+30:
data address not found
_stop+32:	addb	(bx+si),cl
_stop+34:	je	_stop+51
_stop+36:	call	_procxmt
_stop+39:	or	ax,ax
_stop+3b:	je	_stop+5
_stop+3d:	j	_stop+51
_stop+3f:	add	di,*22
_stop+42:	j	_stop+12
_stop+44:	push	76
_stop+48:	call	_fsig
_stop+4b:	pop	cx
_stop+4c:	push	ax
_stop+4d:	call	0
_stop+50:	pop	cx
_stop+51:	pop	di
_stop+52:	pop	si
_stop+53:	pop	bp
_stop+54:	ret

_psig:
_psig:		push	bp
_psig+1:	mov	bp,sp
_psig+3:	push	si
_psig+4:	push	di
_psig+5:	sub	sp,*a
_psig+8:	mov	si,76
_psig+c:	call	0
_psig+f:
data address not found
_psig+11:	addb	(bx+si),cl
_psig+13:	je	_psig+18
_psig+15:	call	_stop
_psig+18:	push	si
_psig+19:	call	_fsig
_psig+1c:	pop	cx
_psig+1d:	mov	di,ax
_psig+1f:	or	ax,ax
_psig+21:	jne	_psig+26
_psig+23:	jmp	_psig+d2
_psig+26:	lea	ax,*-1(di)
_psig+29:	cwd
_psig+2a:	mov	*-10(bp),ax
_psig+2d:	mov	ax,#1
_psig+30:	xor	dx,dx
_psig+32:	mov	cx,*-10(bp)
_psig+35:	or	cx,cx
_psig+37:	je	_psig+3f
_psig+39:	shl	ax
_psig+3b:	rcl	dx
_psig+3d:	loop	_psig+39
_psig+3f:
data address not found
_psig+41:
data address not found
_psig+43:	mov	*-14(bp),ax
_psig+46:	mov	*-12(bp),dx
_psig+49:	mov	ax,*28(si)
_psig+4c:	mov	dx,*30(si)
_psig+4f:	and	ax,*-14(bp)
_psig+52:	and	dx,*-12(bp)
_psig+55:	mov	*28(si),ax
_psig+58:	mov	*30(si),dx
_psig+5b:	mov	bx,di
_psig+5d:	shl	bx
_psig+5f:	mov	ax,#d6(bx)
_psig+63:	mov	*-6(bp),ax
_psig+66:	or	ax,ax
_psig+68:	je	_psig+d4
_psig+6a:	movb	71,*0
_psig+6f:	cmp	di,*4
_psig+72:	je	_psig+88
_psig+74:	cmp	di,*5
_psig+77:	je	_psig+88
_psig+79:	cmp	di,*10
_psig+7c:	je	_psig+88
_psig+7e:	mov	bx,di
_psig+80:	shl	bx
_psig+82:	mov	#d6(bx),#0
_psig+88:	mov	bx,128
_psig+8c:	mov	ax,*-10(bx)
_psig+8f:	sub	ax,#4
_psig+92:	mov	di,ax
_psig+94:	push	di
_psig+95:	call	_grow
_psig+98:	pop	cx
_psig+99:	mov	bx,128
_psig+9d:	push	*6(bx)
_psig+a0:	push	di
_psig+a1:	call	0
_psig+a4:	add	sp,*4
_psig+a7:	mov	bx,128
_psig+ab:	push	*2(bx)
_psig+ae:	lea	ax,*2(di)
_psig+b1:	push	ax
_psig+b2:	call	0
_psig+b5:	add	sp,*4
_psig+b8:	mov	bx,128
_psig+bc:	mov	*-10(bx),di
_psig+bf:	mov	bx,128
_psig+c3:	and	*6(bx),#feff
_psig+c8:	mov	bx,128
_psig+cc:	mov	ax,*-6(bp)
_psig+cf:	mov	*2(bx),ax
_psig+d2:	j	_psig+f9
_psig+d4:	mov	ax,di
_psig+d6:	j	_psig+e5
_psig+d8:	call	_core
_psig+db:	or	ax,ax
_psig+dd:	je	_psig+f4
_psig+df:	add	di,#80
_psig+e3:	j	_psig+f4
_psig+e5:	sub	ax,#3
_psig+e8:	cmp	ax,#9
_psig+eb:	jnbe	_psig+f4
_psig+ed:	shl	ax
_psig+ef:	xchg	bx
_psig+f0:	jmp	#5ea(bx)
_psig+f4:	push	di
_psig+f5:	call	0
_psig+f8:	pop	cx
_psig+f9:	lea	sp,*-4(bp)
_psig+fc:	pop	di
_psig+fd:	pop	si
_psig+fe:	pop	bp
284:		ret

_core:
_core:		push	bp
_core+1:	mov	bp,sp
_core+3:	push	si
_core+4:	push	di
_core+5:	mov	ax,0
_core+8:	cmp	ax,0
_core+c:	jne	_core+12
_core+e:	xor	ax,ax
_core+10:	j	_core+4c
_core+12:	movb	71,*0
_core+17:	mov	92,#610
_core+1d:	mov	ax,#1
_core+20:	push	ax
_core+21:	mov	ax,#0
_core+24:	push	ax
_core+25:	call	0
_core+28:	add	sp,*4
_core+2b:	mov	di,ax
_core+2d:	or	di,di
_core+2f:	jne	_core+4f
_core+31:	cmpb	71,*0
_core+36:	je	_core+3c
_core+38:	xor	ax,ax
_core+3a:	j	_core+4c
_core+3c:	mov	ax,#1b6
_core+3f:	push	ax
_core+40:	call	0
_core+43:	pop	cx
_core+44:	mov	di,ax
_core+46:	or	di,di
_core+48:	jne	_core+4f
_core+4a:	xor	ax,ax
_core+4c:	jmp	_core+fa
_core+4f:	mov	ax,#80
_core+52:	push	ax
_core+53:	push	di
_core+54:	call	0
_core+57:	add	sp,*4
_core+5a:	or	ax,ax
_core+5c:	jne	_core+75
_core+5e:
data address not found
_core+60:	push	es
_core+61:	addb	*117(bx+si),ah
_core+64:	adcb	#72(bx+si),ah
_core+68:	and	ax,#ff
_core+6b:	movb	dl,74
_core+6f:	and	dx,#ff
_core+73:	cmp	ax,dx
_core+75:	jne	_core+eb
_core+77:	push	di
_core+78:	call	0
_core+7b:	pop	cx
_core+7c:	mov	7c,#0
_core+82:	mov	7e,#0
_core+88:	mov	78,#0
_core+8e:	mov	ax,#2
_core+91:	mov	cx,#9
_core+94:	shl	ax,cl
_core+96:	mov	7a,ax
_core+99:	movb	70,*1
_core+9e:	push	di
_core+9f:	call	0
_core+a2:	pop	cx
_core+a3:	mov	78,#0
_core+a9:	movb	70,*0
_core+ae:	mov	bx,76
_core+b2:	cmp	*18(bx),*0
_core+b6:	jne	_core+cb
_core+b8:	mov	bx,76
_core+bc:	mov	ax,*14(bx)
_core+bf:	dec	ax
_core+c0:	dec	ax
_core+c1:	mov	cx,#9
_core+c4:	shl	ax,cl
_core+c6:	mov	7a,ax
_core+c9:	j	_core+e6
_core+cb:	mov	ax,#40
_core+ce:	mov	cx,#9
_core+d1:	shl	ax,cl
_core+d3:	mov	7a,ax
_core+d6:	push	di
_core+d7:	call	0
_core+da:	pop	cx
_core+db:	mov	ax,#40
_core+de:	mov	cx,#9
_core+e1:	shl	ax,cl
_core+e3:	mov	7a,ax
_core+e6:	push	di
_core+e7:	call	0
_core+ea:	pop	cx
_core+eb:	push	di
_core+ec:	call	0
_core+ef:	pop	cx
_core+f0:	cmpb	71,*0
_core+f5:	jne	_core+fc
_core+f7:	mov	ax,#1
_core+fa:	j	_core+fe
_core+fc:	xor	ax,ax
_core+fe:	pop	di
384:		pop	si
385:		pop	bp
386:		ret

_grow:
_grow:		push	bp
_grow+1:	mov	bp,sp
_grow+3:	push	si
_grow+4:	push	di
_grow+5:	mov	ax,#1
_grow+8:	pop	di
_grow+9:	pop	si
_grow+a:	pop	bp
_grow+b:	ret

_ptrace:
_ptrace:	push	bp
_ptrace+1:	mov	bp,sp
_ptrace+3:	push	si
_ptrace+4:	push	di
_ptrace+5:	mov	bx,128
_ptrace+9:	cmp	*-20(bx),*0
_ptrace+d:	jnle	_ptrace+19
_ptrace+f:	mov	bx,76
_ptrace+13:	or	(bx),#800
_ptrace+17:	j	_ptrace+4a
_ptrace+19:	mov	di,#0
_ptrace+1c:	cmp	di,0
_ptrace+20:	jnb	_ptrace+45
_ptrace+22:	cmpb	*2(di),*6
_ptrace+26:	jne	_ptrace+40
_ptrace+28:	mov	bx,128
_ptrace+2c:	mov	ax,*8(di)
_ptrace+2f:	cmp	ax,*-12(bx)
_ptrace+32:	jne	_ptrace+40
_ptrace+34:	mov	bx,76
_ptrace+38:	mov	ax,*10(di)
_ptrace+3b:	cmp	ax,*8(bx)
_ptrace+3e:	je	_ptrace+4c
_ptrace+40:	add	di,*22
_ptrace+43:	j	_ptrace+1c
_ptrace+45:	movb	71,*3
_ptrace+4a:	j	_ptrace+c9
_ptrace+4c:	cmp	0,*0
_ptrace+51:	je	_ptrace+63
_ptrace+53:	mov	ax,#ffff
_ptrace+56:	push	ax
_ptrace+57:	mov	ax,#0
_ptrace+5a:	push	ax
_ptrace+5b:	call	0
_ptrace+5e:	add	sp,*4
_ptrace+61:	j	_ptrace+4c
_ptrace+63:	mov	ax,*8(di)
_ptrace+66:	mov	0,ax
_ptrace+69:	mov	bx,128
_ptrace+6d:	mov	ax,(bx)
_ptrace+6f:	mov	6,ax
_ptrace+72:	mov	bx,128
_ptrace+76:	mov	ax,*-4(bx)
_ptrace+79:	mov	4,ax
_ptrace+7c:	mov	bx,128
_ptrace+80:	mov	ax,*-20(bx)
_ptrace+83:	mov	2,ax
_ptrace+86:	and	(di),#fbff
_ptrace+8a:	push	di
_ptrace+8b:	call	0
_ptrace+8e:	pop	cx
_ptrace+8f:	cmp	2,*0
_ptrace+94:	jle	_ptrace+a6
_ptrace+96:	mov	ax,#ffff
_ptrace+99:	push	ax
_ptrace+9a:	mov	ax,#0
_ptrace+9d:	push	ax
_ptrace+9e:	call	0
_ptrace+a1:	add	sp,*4
_ptrace+a4:	j	_ptrace+8f
_ptrace+a6:	mov	bx,128
_ptrace+aa:	mov	ax,6
_ptrace+ad:	mov	(bx),ax
_ptrace+af:	cmp	2,*0
_ptrace+b4:	jnl	_ptrace+bb
_ptrace+b6:	movb	71,*5
_ptrace+bb:	mov	0,#0
_ptrace+c1:	mov	ax,#0
_ptrace+c4:	push	ax
_ptrace+c5:	call	0
_ptrace+c8:	pop	cx
_ptrace+c9:	pop	di
_ptrace+ca:	pop	si
_ptrace+cb:	pop	bp
_ptrace+cc:	ret

_procxmt:
_procxmt:	push	bp
_procxmt+1:	mov	bp,sp
_procxmt+3:	push	si
_procxmt+4:	push	di
_procxmt+5:	mov	bx,76
_procxmt+9:	mov	ax,0
_procxmt+c:	cmp	ax,*8(bx)
_procxmt+f:	je	_procxmt+16
_procxmt+11:	xor	ax,ax
_procxmt+13:	jmp	5c0
_procxmt+16:	mov	di,2
_procxmt+1a:	mov	2,#0
_procxmt+20:	mov	ax,#0
_procxmt+23:	push	ax
_procxmt+24:	call	0
_procxmt+27:	pop	cx
_procxmt+28:	mov	ax,di
_procxmt+2a:	jmp	5d7
_procxmt+2d:	push	4
_procxmt+31:	call	0
_procxmt+34:	pop	cx
_procxmt+35:	cmp	ax,#ffff
_procxmt+38:	je	_procxmt+52
_procxmt+3a:	push	4
_procxmt+3e:	call	0
_procxmt+41:	pop	cx
_procxmt+42:	mov	6,ax
_procxmt+45:	j	_procxmt+86
_procxmt+47:	push	4
_procxmt+4b:	call	0
_procxmt+4e:	pop	cx
_procxmt+4f:	cmp	ax,#ffff
_procxmt+52:	jne	_procxmt+57
_procxmt+54:	jmp	5cf
_procxmt+57:	push	4
_procxmt+5b:	call	0
_procxmt+5e:	pop	cx
_procxmt+5f:	mov	6,ax
_procxmt+62:	j	_procxmt+a7
_procxmt+64:	mov	di,4
_procxmt+68:	or	di,di
_procxmt+6a:	jl	_procxmt+b8
_procxmt+6c:	mov	ax,#2
_procxmt+6f:	mov	cx,#9
_procxmt+72:	shl	ax,cl
_procxmt+74:	cmp	di,ax
_procxmt+76:	jb	_procxmt+7b
_procxmt+78:	jmp	5cf
_procxmt+7b:	lea	ax,#0(di)
_procxmt+7f:	mov	si,ax
_procxmt+81:	mov	ax,(si)
_procxmt+83:	mov	6,ax
_procxmt+86:	j	_procxmt+cb
_procxmt+88:	xor	ax,ax
_procxmt+8a:	push	ax
_procxmt+8b:	push	4
_procxmt+8f:	call	0
_procxmt+92:	add	sp,*4
_procxmt+95:	or	ax,ax
_procxmt+97:	jl	_procxmt+b8
_procxmt+99:	push	6
_procxmt+9d:	push	4
_procxmt+a1:	call	0
_procxmt+a4:	add	sp,*4
_procxmt+a7:	j	_procxmt+cb
_procxmt+a9:	xor	ax,ax
_procxmt+ab:	push	ax
_procxmt+ac:	push	4
_procxmt+b0:	call	0
_procxmt+b3:	add	sp,*4
_procxmt+b6:	or	ax,ax
_procxmt+b8:	jnl	_procxmt+bd
_procxmt+ba:	jmp	5cf
_procxmt+bd:	push	6
_procxmt+c1:	push	4
_procxmt+c5:	call	0
_procxmt+c8:	add	sp,*4
_procxmt+cb:	j	572
_procxmt+cd:	mov	ax,4
_procxmt+d0:	add	ax,#0
_procxmt+d3:	mov	si,ax
_procxmt+d5:	cmp	si,#12
_procxmt+d9:	jb	_procxmt+e1
_procxmt+db:	cmp	si,#70
_procxmt+df:	jb	_procxmt+fd
_procxmt+e1:	xor	di,di
_procxmt+e3:	cmp	di,*a
_procxmt+e6:	jl	_procxmt+eb
_procxmt+e8:	jmp	5cf
_procxmt+eb:	movb	al,#0(di)
_procxmt+ef:	cbw
_procxmt+f0:	shl	ax
_procxmt+f2:	add	ax,128
_procxmt+f6:	cmp	si,ax
_procxmt+f8:	je	_procxmt+fd
_procxmt+fa:	inc	di
_procxmt+fb:	j	_procxmt+e3
_procxmt+fd:	mov	ax,128
560:		add	ax,#6
563:		cmp	si,ax
565:		jne	56d
567:		or	6,#200
56d:		mov	ax,6
570:		mov	(si),ax
572:		j	5d5
574:		call	0
577:		mov	bx,128
57b:		cmp	*4(bx),ax
57e:		jle	5cf
580:		mov	bx,128
584:		or	*6(bx),#100
589:		cmp	4,*1
58e:		je	59a
590:		mov	bx,128
594:		mov	ax,4
597:		mov	*2(bx),ax
59a:		mov	bx,76
59e:		mov	*28(bx),#0
5a3:		mov	*30(bx),#0
5a8:		cmp	6,*0
5ad:		je	5bd
5af:		push	6
5b3:		push	76
5b7:		call	_psignal
5ba:		add	sp,*4
5bd:		mov	ax,#1
5c0:		j	5e6
5c2:		push	76
5c6:		call	_fsig
5c9:		pop	cx
5ca:		push	ax
5cb:		call	0
5ce:		pop	cx
5cf:		mov	2,#ffff
5d5:		j	5e4
5d7:		dec	ax
5d8:		cmp	ax,#8
5db:		jnbe	5cf
5dd:		shl	ax
5df:		xchg	bx
5e0:		jmp	#5fe(bx)
5e4:		xor	ax,ax
5e6:		pop	di
5e7:		pop	si
5e8:		pop	bp
5e9:		ret

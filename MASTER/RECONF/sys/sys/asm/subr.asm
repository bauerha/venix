_bmap:		push	bp
_bmap+1:	mov	bp,sp
_bmap+3:	push	si
_bmap+4:	push	di
_bmap+5:	sub	sp,*8
_bmap+8:	mov	di,#4(bp)
_bmap+c:
data address not found
_bmap+e:	push	es
_bmap+f:	addb	#974(bx+si),al
_bmap+13:	movb	71,*1b
_bmap+18:	xor	ax,ax
_bmap+1a:	j	_bmap+39
_bmap+1c:
data address not found
_bmap+1e:	push	es
_bmap+1f:	addb	(bx+si),dl
_bmap+21:	jne	_bmap+89
_bmap+23:
data address not found
_bmap+25:	push	es
_bmap+26:	clc
_bmap+27:	push	*97(si)
_bmap+2a:	push	*2(di)
_bmap+2d:	call	0
_bmap+30:	pop	cx
_bmap+31:	mov	si,ax
_bmap+33:	or	ax,ax
_bmap+35:	jne	_bmap+3c
_bmap+37:	xor	ax,ax
_bmap+39:	jmp	_bmap+ed
_bmap+3c:	mov	ax,*14(si)
_bmap+3f:	mov	*-6(bp),ax
_bmap+42:	mov	*-12(bp),#0
_bmap+47:	cmp	*-12(bp),*8
_bmap+4b:	jnl	_bmap+79
_bmap+4d:	lea	ax,*14(di)
_bmap+50:	mov	dx,*-12(bp)
_bmap+53:	shl	dx
_bmap+55:	add	ax,dx
_bmap+57:	mov	bx,ax
_bmap+59:	mov	ax,(bx)
_bmap+5b:	mov	bx,*-6(bp)
_bmap+5e:	mov	(bx),ax
_bmap+60:	add	*-6(bp),*2
_bmap+64:	lea	ax,*14(di)
_bmap+67:	mov	dx,*-12(bp)
_bmap+6a:	shl	dx
_bmap+6c:	add	ax,dx
_bmap+6e:	mov	bx,ax
_bmap+70:	mov	(bx),#0
_bmap+74:	inc	*-12(bp)
_bmap+77:	j	_bmap+47
_bmap+79:	mov	ax,*18(si)
_bmap+7c:	mov	*14(di),ax
_bmap+7f:	push	si
_bmap+80:	call	0
_bmap+83:	pop	cx
_bmap+84:	or	*6(di),#1000
_bmap+89:	j	_bmap+ef
_bmap+8b:	lea	ax,*14(di)
_bmap+8e:	mov	dx,*6(bp)
_bmap+91:	shl	dx
_bmap+93:	add	ax,dx
_bmap+95:	mov	bx,ax
_bmap+97:	mov	ax,(bx)
_bmap+99:	mov	*-8(bp),ax
_bmap+9c:	or	ax,ax
_bmap+9e:	jne	_bmap+cc
_bmap+a0:	push	*2(di)
_bmap+a3:	call	0
_bmap+a6:	pop	cx
_bmap+a7:	mov	si,ax
_bmap+a9:	or	ax,ax
_bmap+ab:	je	_bmap+cc
_bmap+ad:	push	si
_bmap+ae:	call	0
_bmap+b1:	pop	cx
_bmap+b2:	mov	ax,*18(si)
_bmap+b5:	mov	*-8(bp),ax
_bmap+b8:	lea	ax,*14(di)
_bmap+bb:	mov	dx,*6(bp)
_bmap+be:	shl	dx
_bmap+c0:	add	ax,dx
_bmap+c2:	mov	bx,ax
_bmap+c4:	mov	ax,*-8(bp)
_bmap+c7:	mov	(bx),ax
_bmap+c9:	orb	(di),*2
_bmap+cc:	mov	0,#0
_bmap+d2:	cmp	*6(bp),*7
_bmap+d6:	jnb	_bmap+ea
_bmap+d8:	lea	ax,*14(di)
_bmap+db:	mov	dx,*6(bp)
_bmap+de:	inc	dx
_bmap+df:	shl	dx
_bmap+e1:	add	ax,dx
_bmap+e3:	mov	bx,ax
_bmap+e5:	mov	ax,(bx)
_bmap+e7:	mov	0,ax
_bmap+ea:	mov	ax,*-8(bp)
_bmap+ed:	j	132
_bmap+ef:	mov	ax,*6(bp)
_bmap+f2:	mov	cx,#8
_bmap+f5:	shr	ax,cl
_bmap+f7:	mov	*-12(bp),ax
_bmap+fa:	mov	ax,#7ff
_bmap+fd:
data address not found
ff:		mov	dx,*6(bp)
102:		test	ax,dx
104:		je	10b
106:		mov	*-12(bp),#7
10b:		lea	ax,*14(di)
10e:		mov	dx,*-12(bp)
111:		shl	dx
113:		add	ax,dx
115:		mov	bx,ax
117:		mov	ax,(bx)
119:		mov	*-8(bp),ax
11c:		or	ax,ax
11e:		jne	147
120:		orb	(di),*2
123:		push	*2(di)
126:		call	0
129:		pop	cx
12a:		mov	si,ax
12c:		or	ax,ax
12e:		jne	134
130:		xor	ax,ax
132:		j	197
134:		lea	ax,*14(di)
137:		mov	dx,*-12(bp)
13a:		shl	dx
13c:		add	ax,dx
13e:		mov	bx,ax
140:		mov	ax,*18(si)
143:		mov	(bx),ax
145:		j	155
147:		push	*-8(bp)
14a:		push	*2(di)
14d:		call	0
150:		add	sp,*4
153:		mov	si,ax
155:		mov	ax,*14(si)
158:		mov	*-6(bp),ax
15b:		cmp	*-12(bp),*7
15f:		jne	1d0
161:		mov	ax,*6(bp)
164:		mov	cx,#8
167:		shr	ax,cl
169:		and	ax,#ff
16c:		sub	ax,#7
16f:		mov	*-12(bp),ax
172:		shl	ax
174:		add	ax,*-6(bp)
177:		mov	bx,ax
179:		mov	ax,(bx)
17b:		mov	*-8(bp),ax
17e:		or	ax,ax
180:		jne	1b3
182:		push	*2(di)
185:		call	0
188:		pop	cx
189:		mov	*-10(bp),ax
18c:		or	ax,ax
18e:		jne	19a
190:		push	si
191:		call	0
194:		pop	cx
195:		xor	ax,ax
197:		jmp	242
19a:		mov	bx,*-10(bp)
19d:		mov	ax,*18(bx)
1a0:		mov	dx,*-12(bp)
1a3:		shl	dx
1a5:		add	dx,*-6(bp)
1a8:		mov	bx,dx
1aa:		mov	(bx),ax
1ac:		push	si
1ad:		call	0
1b0:		pop	cx
1b1:		j	1c7
1b3:		push	si
1b4:		call	0
1b7:		pop	cx
1b8:		push	*-8(bp)
1bb:		push	*2(di)
1be:		call	0
1c1:		add	sp,*4
1c4:		mov	*-10(bp),ax
1c7:		mov	si,*-10(bp)
1ca:		mov	ax,*14(si)
1cd:		mov	*-6(bp),ax
1d0:		mov	ax,*6(bp)
1d3:		and	ax,#ff
1d6:		mov	*-12(bp),ax
1d9:		shl	ax
1db:		add	ax,*-6(bp)
1de:		mov	bx,ax
1e0:		mov	ax,(bx)
1e2:		mov	*-8(bp),ax
1e5:		or	ax,ax
1e7:		jne	21d
1e9:		push	*2(di)
1ec:		call	0
1ef:		pop	cx
1f0:		mov	*-10(bp),ax
1f3:		or	ax,ax
1f5:		je	21d
1f7:		mov	bx,*-10(bp)
1fa:		mov	ax,*18(bx)
1fd:		mov	*-8(bp),ax
200:		mov	ax,*-12(bp)
203:		shl	ax
205:		add	ax,*-6(bp)
208:		mov	bx,ax
20a:		mov	ax,*-8(bp)
20d:		mov	(bx),ax
20f:		push	*-10(bp)
212:		call	0
215:		pop	cx
216:		push	si
217:		call	0
21a:		pop	cx
21b:		j	222
21d:		push	si
21e:		call	0
221:		pop	cx
222:		mov	0,#0
228:		cmp	*-12(bp),#ff
22d:		jnl	23f
22f:		mov	ax,*-12(bp)
232:		inc	ax
233:		shl	ax
235:		add	ax,*-6(bp)
238:		mov	bx,ax
23a:		mov	ax,(bx)
23c:		mov	0,ax
23f:		mov	ax,*-8(bp)
242:		lea	sp,*-4(bp)
245:		pop	di
246:		pop	si
247:		pop	bp
248:		ret

_passc:
_passc:		push	bp
_passc+1:	mov	bp,sp
_passc+3:	push	si
_passc+4:	push	di
_passc+5:	mov	di,#4(bp)
_passc+9:	cmpb	70,*0
_passc+e:	je	_passc+1a
_passc+10:	mov	bx,78
_passc+14:	mov	cx,di
_passc+16:	movb	(bx),cl
_passc+18:	j	_passc+33
_passc+1a:	push	di
_passc+1b:	push	78
_passc+1f:	call	0
_passc+22:	add	sp,*4
_passc+25:	or	ax,ax
_passc+27:	jnl	_passc+33
_passc+29:	movb	71,*e
_passc+2e:	mov	ax,#ffff
_passc+31:	j	_passc+53
_passc+33:	dec	7a
_passc+37:	inc	7e
_passc+3b:	jne	_passc+41
_passc+3d:	inc	7c
_passc+41:	inc	78
_passc+45:	cmp	7a,*0
_passc+4a:	jne	_passc+51
_passc+4c:	mov	ax,#ffff
_passc+4f:	j	_passc+53
_passc+51:	xor	ax,ax
_passc+53:	pop	di
_passc+54:	pop	si
_passc+55:	pop	bp
_passc+56:	ret

_cpass:
_cpass:		push	bp
_cpass+1:	mov	bp,sp
_cpass+3:	push	si
_cpass+4:	push	di
_cpass+5:	cmp	7a,*0
_cpass+a:	jne	_cpass+11
_cpass+c:	mov	ax,#ffff
_cpass+f:	j	_cpass+51
_cpass+11:	cmpb	70,*0
_cpass+16:	je	_cpass+25
_cpass+18:	mov	bx,78
_cpass+1c:	movb	al,(bx)
_cpass+1e:	and	ax,#ff
_cpass+21:	mov	di,ax
_cpass+23:	j	_cpass+3d
_cpass+25:	push	78
_cpass+29:	call	0
_cpass+2c:	pop	cx
_cpass+2d:	mov	di,ax
_cpass+2f:	or	ax,ax
_cpass+31:	jnl	_cpass+3d
_cpass+33:	movb	71,*e
_cpass+38:	mov	ax,#ffff
_cpass+3b:	j	_cpass+51
_cpass+3d:	dec	7a
_cpass+41:	inc	7e
_cpass+45:	jne	_cpass+4b
_cpass+47:	inc	7c
_cpass+4b:	inc	78
_cpass+4f:	mov	ax,di
_cpass+51:	pop	di
_cpass+52:	pop	si
_cpass+53:	pop	bp
_cpass+54:	ret

_nodev:
_nodev:		push	bp
_nodev+1:	mov	bp,sp
_nodev+3:	push	si
_nodev+4:	push	di
_nodev+5:	movb	71,*13
_nodev+a:	pop	di
_nodev+b:	pop	si
_nodev+c:	pop	bp
_nodev+d:	ret

_nulldev:
_nulldev:	push	bp
_nulldev+1:	mov	bp,sp
_nulldev+3:	push	si
_nulldev+4:	push	di
_nulldev+5:	pop	di
_nulldev+6:	pop	si
_nulldev+7:	pop	bp
_nulldev+8:	ret

_ftime:		push	bp
_ftime+1:	mov	bp,sp
_ftime+3:	push	si
_ftime+4:	push	di
_ftime+5:	sub	sp,*a
_ftime+8:	call	0
_ftime+b:	mov	ax,0
_ftime+e:	mov	dx,2
_ftime+12:	mov	*-14(bp),ax
_ftime+15:	mov	*-12(bp),dx
_ftime+18:	mov	di,0
_ftime+1c:	call	0
_ftime+1f:	cmp	di,0
_ftime+23:	jbe	_ftime+31
_ftime+25:	sub	di,0
_ftime+29:	add	*-14(bp),*1
_ftime+2d:	adc	*-12(bp),*0
_ftime+31:	mov	ax,di
_ftime+33:	mov	dx,#3e8
_ftime+36:
data address not found
_ftime+38:	xor	dx,dx
_ftime+3a:
data address not found
_ftime+3c:	addb	(bx+si),al
_ftime+3e:	mov	*-10(bp),ax
_ftime+41:	mov	ax,0
_ftime+44:	mov	*-8(bp),ax
_ftime+47:	mov	ax,0
_ftime+4a:	mov	*-6(bp),ax
_ftime+4d:	mov	ax,#a
_ftime+50:	push	ax
_ftime+51:	mov	bx,128
_ftime+55:	push	(bx)
_ftime+57:	lea	ax,*-14(bp)
_ftime+5a:	push	ax
_ftime+5b:	call	0
_ftime+5e:	add	sp,*6
_ftime+61:	or	ax,ax
_ftime+63:	jnl	_ftime+6a
_ftime+65:	movb	71,*e
_ftime+6a:	mov	bx,128
_ftime+6e:	mov	(bx),#0
_ftime+72:	lea	sp,*-4(bp)
_ftime+75:	pop	di
_ftime+76:	pop	si
_ftime+77:	pop	bp
_ftime+78:	ret

_fstat:
_fstat:		push	bp
_fstat+1:	mov	bp,sp
_fstat+3:	push	si
_fstat+4:	push	di
_fstat+5:	mov	bx,128
_fstat+9:	push	(bx)
_fstat+b:	call	0
_fstat+e:	pop	cx
_fstat+f:	mov	di,ax
_fstat+11:	or	di,di
_fstat+13:	je	_fstat+3d
_fstat+15:	movb	al,(di)
_fstat+17:	cbw
_fstat+18:	test	ax,#4
_fstat+1b:	je	_fstat+22
_fstat+1d:	mov	ax,*6(di)
_fstat+20:	j	_fstat+24
_fstat+22:	xor	ax,ax
_fstat+24:	push	ax
_fstat+25:	mov	bx,128
_fstat+29:	push	*-12(bx)
_fstat+2c:	push	*2(di)
_fstat+2f:	call	_stat1
_fstat+32:	add	sp,*6
_fstat+35:	mov	bx,128
_fstat+39:	mov	(bx),#0
_fstat+3d:	pop	di
_fstat+3e:	pop	si
_fstat+3f:	pop	bp
_fstat+40:	ret

_stat:
_stat:		push	bp
_stat+1:	mov	bp,sp
_stat+3:	push	si
_stat+4:	push	di
_stat+5:	xor	ax,ax
_stat+7:	push	ax
_stat+8:	mov	ax,#0
_stat+b:	push	ax
_stat+c:	call	0
_stat+f:	add	sp,*4
_stat+12:	mov	di,ax
_stat+14:	or	di,di
_stat+16:	je	_stat+36
_stat+18:	xor	ax,ax
_stat+1a:	push	ax
_stat+1b:	mov	bx,128
_stat+1f:	push	*-12(bx)
_stat+22:	push	di
_stat+23:	call	_stat1
_stat+26:	add	sp,*6
_stat+29:	push	di
_stat+2a:	call	0
_stat+2d:	pop	cx
_stat+2e:	mov	bx,128
_stat+32:	mov	(bx),#0
_stat+36:	pop	di
_stat+37:	pop	si
_stat+38:	pop	bp
_stat+39:	ret

_stat1:
_stat1:		push	bp
_stat1+1:	mov	bp,sp
_stat1+3:	push	si
_stat1+4:	push	di
_stat1+5:	sub	sp,*20
_stat1+8:	mov	ax,#0
_stat1+b:	push	ax
_stat1+c:	mov	di,*4(bp)
_stat1+f:	push	di
_stat1+10:	call	0
_stat1+13:	add	sp,*4
_stat1+16:	mov	ax,*2(di)
_stat1+19:	mov	*-36(bp),ax
_stat1+1c:	mov	ax,*4(di)
_stat1+1f:	mov	*-34(bp),ax
_stat1+22:	mov	ax,*6(di)
_stat1+25:	mov	*-32(bp),ax
_stat1+28:	movb	al,*8(di)
_stat1+2b:	and	ax,#ff
_stat1+2e:	mov	*-30(bp),ax
_stat1+31:	movb	al,*9(di)
_stat1+34:	and	ax,#ff
_stat1+37:	mov	*-28(bp),ax
_stat1+3a:	movb	al,*10(di)
_stat1+3d:	and	ax,#ff
_stat1+40:	mov	*-26(bp),ax
_stat1+43:	mov	ax,*14(di)
_stat1+46:	mov	*-24(bp),ax
_stat1+49:	movb	al,*11(di)
_stat1+4c:	and	ax,#ff
_stat1+4f:	mov	*-20(bp),ax
_stat1+52:	mov	ax,*12(di)
_stat1+55:	sub	ax,*8(bp)
_stat1+58:	mov	*-22(bp),ax
_stat1+5b:	mov	ax,*4(di)
_stat1+5e:	add	ax,#1f
_stat1+61:	mov	cx,#4
_stat1+64:	shr	ax,cl
_stat1+66:	push	ax
_stat1+67:	push	*2(di)
_stat1+6a:	call	0
_stat1+6d:	add	sp,*4
_stat1+70:	mov	*-6(bp),ax
_stat1+73:	mov	bx,ax
_stat1+75:	mov	ax,*14(bx)
_stat1+78:	mov	dx,*4(di)
_stat1+7b:	add	dx,*f
_stat1+7e:	and	dx,#f
_stat1+82:	mov	cx,#5
_stat1+85:	shl	dx,cl
_stat1+87:	add	ax,dx
_stat1+89:	add	ax,#18
_stat1+8c:	mov	si,ax
_stat1+8e:	mov	bx,si
_stat1+90:	inc	si
_stat1+91:	inc	si
_stat1+92:	mov	ax,(bx)
_stat1+94:	mov	*-18(bp),ax
_stat1+97:	mov	bx,si
_stat1+99:	inc	si
_stat1+9a:	inc	si
_stat1+9b:	mov	ax,(bx)
_stat1+9d:	mov	*-16(bp),ax
_stat1+a0:	mov	bx,si
_stat1+a2:	inc	si
_stat1+a3:	inc	si
_stat1+a4:	mov	ax,(bx)
_stat1+a6:	mov	*-14(bp),ax
_stat1+a9:	mov	ax,(si)
_stat1+ab:	mov	*-12(bp),ax
_stat1+ae:	mov	ax,(si)
_stat1+b0:	mov	*-8(bp),ax
_stat1+b3:	dec	si
_stat1+b4:	dec	si
_stat1+b5:	mov	ax,(si)
_stat1+b7:	mov	*-10(bp),ax
_stat1+ba:	push	*-6(bp)
_stat1+bd:	call	0
_stat1+c0:	pop	cx
_stat1+c1:	mov	ax,#1e
_stat1+c4:	push	ax
_stat1+c5:	push	*6(bp)
_stat1+c8:	lea	ax,*-36(bp)
_stat1+cb:	push	ax
_stat1+cc:	call	0
_stat1+cf:	add	sp,*6
_stat1+d2:	or	ax,ax
_stat1+d4:	jnl	_stat1+db
_stat1+d6:	movb	71,*e
_stat1+db:	lea	sp,*-4(bp)
_stat1+de:	pop	di
_stat1+df:	pop	si
_stat1+e0:	pop	bp
_stat1+e1:	ret

_dup:
_dup:		push	bp
_dup+1:		mov	bp,sp
_dup+3:		push	si
_dup+4:		push	di
_dup+5:		mov	bx,128
_dup+9:		mov	ax,(bx)
_dup+b:		and	ax,#3f
_dup+e:		push	ax
_dup+f:		call	0
_dup+12:	pop	cx
_dup+13:	mov	di,ax
_dup+15:	or	ax,ax
_dup+17:	je	_dup+44
_dup+19:	mov	bx,128
_dup+1d:	mov	ax,(bx)
_dup+1f:	test	ax,#40
_dup+22:	jne	_dup+2f
_dup+24:	call	0
_dup+27:	mov	si,ax
_dup+29:	or	ax,ax
_dup+2b:	jnl	_dup+63
_dup+2d:	j	_dup+6e
_dup+2f:	mov	bx,128
_dup+33:	mov	si,*-12(bx)
_dup+36:	or	si,si
_dup+38:	jl	_dup+3f
_dup+3a:	cmp	si,*14
_dup+3d:	jl	_dup+46
_dup+3f:	movb	71,*9
_dup+44:	j	_dup+6e
_dup+46:	mov	bx,128
_dup+4a:	mov	(bx),si
_dup+4c:	mov	bx,si
_dup+4e:	shl	bx
_dup+50:	cmp	#a6(bx),*0
_dup+55:	je	_dup+63
_dup+57:	mov	bx,si
_dup+59:	shl	bx
_dup+5b:	push	#a6(bx)
_dup+5f:	call	0
_dup+62:	pop	cx
_dup+63:	mov	bx,si
_dup+65:	shl	bx
_dup+67:	mov	#a6(bx),di
_dup+6b:	incb	*1(di)
_dup+6e:	pop	di
_dup+6f:	pop	si
_dup+70:	pop	bp
_dup+71:	ret

_smount:
_smount:	push	bp
_smount+1:	mov	bp,sp
_smount+3:	push	si
_smount+4:	push	di
_smount+5:	sub	sp,*6
_smount+8:	call	_getmdev
_smount+b:	mov	*-10(bp),ax
_smount+e:	cmpb	71,*0
_smount+13:	je	_smount+18
_smount+15:	jmp	393
_smount+18:	mov	bx,128
_smount+1c:	mov	ax,*-12(bx)
_smount+1f:	mov	92,ax
_smount+22:	xor	ax,ax
_smount+24:	push	ax
_smount+25:	mov	ax,#0
_smount+28:	push	ax
_smount+29:	call	0
_smount+2c:	add	sp,*4
_smount+2f:	mov	di,ax
_smount+31:	or	di,di
_smount+33:	jne	_smount+38
_smount+35:	jmp	393
_smount+38:	cmpb	*1(di),*1
_smount+3c:	jne	_smount+60
_smount+3e:
data address not found
_smount+40:	push	es
_smount+41:	addb	(bx+si),ah
_smount+43:	jne	_smount+60
_smount+45:	mov	*-6(bp),#0
_smount+4a:	mov	si,#0
_smount+4d:	cmp	si,0
_smount+51:	jnb	_smount+71
_smount+53:	cmp	*2(si),*0
_smount+57:	je	_smount+63
_smount+59:	mov	ax,*-10(bp)
_smount+5c:	cmp	ax,(si)
_smount+5e:	jne	_smount+6c
_smount+60:	jmp	395
_smount+63:	cmp	*-6(bp),*0
_smount+67:	jne	_smount+6c
_smount+69:	mov	*-6(bp),si
_smount+6c:	add	si,*6
_smount+6f:	j	_smount+4d
_smount+71:	cmp	*-6(bp),*0
_smount+75:	jne	_smount+7a
_smount+77:	jmp	395
_smount+7a:	mov	bx,128
_smount+7e:	cmp	*-4(bx),*0
_smount+82:	jne	_smount+89
_smount+84:	mov	ax,#1
_smount+87:	j	_smount+8b
_smount+89:	xor	ax,ax
_smount+8b:	push	ax
_smount+8c:	push	*-10(bp)
_smount+8f:	movb	al,*-9(bp)
_smount+92:	cbw
_smount+93:	mov	bx,ax
_smount+95:	mov	cx,#3
_smount+98:	shl	bx,cl
_smount+9a:	call	#0(bx)
_smount+9e:	add	sp,*4
_smount+a1:	cmpb	71,*0
_smount+a6:	je	_smount+ab
_smount+a8:	jmp	395
_smount+ab:	mov	ax,#1
_smount+ae:	push	ax
_smount+af:	push	*-10(bp)
_smount+b2:	call	0
_smount+b5:	add	sp,*4
_smount+b8:	mov	si,ax
_smount+ba:
data address not found
_smount+bc:	addb	al,*0
_smount+be:	je	_smount+c7
_smount+c0:	movb	71,*5
_smount+c5:	j	_smount+dd
_smount+c7:	mov	bx,*14(si)
_smount+ca:	cmp	(bx),*0
_smount+cd:	je	_smount+d8
_smount+cf:	mov	bx,*14(si)
_smount+d2:	cmp	*4(bx),*64
_smount+d6:	jbe	_smount+dd
_smount+d8:	movb	71,*d
_smount+dd:	cmpb	71,*0
_smount+e2:	je	_smount+eb
_smount+e4:	push	si
_smount+e5:	call	0
_smount+e8:	pop	cx
_smount+e9:	j	39a
_smount+eb:	mov	*-8(bp),si
_smount+ee:	mov	si,*-6(bp)
_smount+f1:	mov	*4(si),di
_smount+f4:	mov	ax,*-10(bp)
_smount+f7:	mov	(si),ax
_smount+f9:	mov	ax,#ffff
_smount+fc:	push	ax
_smount+fd:	call	0
348:		pop	cx
349:		mov	*2(si),ax
34c:		mov	bx,ax
34e:		mov	si,*14(bx)
351:		mov	ax,#200
354:		push	ax
355:		push	si
356:		mov	bx,*-8(bp)
359:		push	*14(bx)
35c:		call	0
35f:		add	sp,*6
362:		movb	#199(si),*0
367:		movb	#198(si),*0
36c:		mov	bx,128
370:		mov	ax,*-4(bx)
373:		and	ax,#1
376:		mov	cx,ax
378:		movb	#19b(si),cl
37c:		push	*-8(bp)
37f:		call	0
382:		pop	cx
383:		orb	(di),*8
386:		push	di
387:		call	0
38a:		pop	cx
38b:		mov	bx,128
38f:		mov	(bx),#0
393:		j	39f
395:		movb	71,*10
39a:		push	di
39b:		call	0
39e:		pop	cx
39f:		lea	sp,*-4(bp)
3a2:		pop	di
3a3:		pop	si
3a4:		pop	bp
3a5:		ret

_sumount:
_sumount:	push	bp
_sumount+1:	mov	bp,sp
_sumount+3:	push	si
_sumount+4:	push	di
_sumount+5:	push	cx
_sumount+6:	call	0
_sumount+9:	call	_getmdev
_sumount+c:	mov	*-6(bp),ax
_sumount+f:	cmpb	71,*0
_sumount+14:	jne	_sumount+54
_sumount+16:	mov	si,#0
_sumount+19:	cmp	si,0
_sumount+1d:	jnb	_sumount+31
_sumount+1f:	cmp	*2(si),*0
_sumount+23:	je	_sumount+2c
_sumount+25:	mov	ax,*-6(bp)
_sumount+28:	cmp	ax,(si)
_sumount+2a:	je	_sumount+38
_sumount+2c:	add	si,*6
_sumount+2f:	j	_sumount+19
_sumount+31:	movb	71,*16
_sumount+36:	j	_sumount+54
_sumount+38:	mov	di,#0
_sumount+3b:	cmp	di,0
_sumount+3f:	jnb	_sumount+5b
_sumount+41:	cmp	*4(di),*0
_sumount+45:	je	_sumount+56
_sumount+47:	mov	ax,*-6(bp)
_sumount+4a:	cmp	ax,*2(di)
_sumount+4d:	jne	_sumount+56
_sumount+4f:	movb	71,*10
_sumount+54:	j	_sumount+93
_sumount+56:	add	di,*22
_sumount+59:	j	_sumount+3b
_sumount+5b:	xor	ax,ax
_sumount+5d:	push	ax
_sumount+5e:	push	*-6(bp)
_sumount+61:	movb	al,*-5(bp)
_sumount+64:	cbw
_sumount+65:	mov	bx,ax
_sumount+67:	mov	cx,#3
_sumount+6a:	shl	bx,cl
_sumount+6c:	call	#2(bx)
_sumount+70:	add	sp,*4
_sumount+73:	mov	di,*4(si)
_sumount+76:	andb	(di),*f7
_sumount+79:	push	di
_sumount+7a:	call	0
_sumount+7d:	pop	cx
_sumount+7e:	mov	di,*2(si)
_sumount+81:	mov	*2(si),#0
_sumount+86:	push	di
_sumount+87:	call	0
_sumount+8a:	pop	cx
_sumount+8b:	mov	bx,128
_sumount+8f:	mov	(bx),#0
_sumount+93:	pop	cx
_sumount+94:	pop	di
_sumount+95:	pop	si
_sumount+96:	pop	bp
_sumount+97:	ret

_getmdev:
_getmdev:	push	bp
_getmdev+1:	mov	bp,sp
_getmdev+3:	push	si
_getmdev+4:	push	di
_getmdev+5:	xor	ax,ax
_getmdev+7:	push	ax
_getmdev+8:	mov	ax,#0
_getmdev+b:	push	ax
_getmdev+c:	call	0
_getmdev+f:	add	sp,*4
_getmdev+12:	mov	di,ax
_getmdev+14:	or	di,di
_getmdev+16:	je	_getmdev+41
_getmdev+18:	mov	ax,*6(di)
_getmdev+1b:	and	ax,#6000
_getmdev+1e:	cmp	ax,#6000
_getmdev+21:	je	_getmdev+28
_getmdev+23:	movb	71,*f
_getmdev+28:	mov	si,*14(di)
_getmdev+2b:	movb	al,*15(di)
_getmdev+2e:	cbw
_getmdev+2f:	cmp	ax,0
_getmdev+33:	jl	_getmdev+3a
_getmdev+35:	movb	71,*6
_getmdev+3a:	push	di
_getmdev+3b:	call	0
_getmdev+3e:	pop	cx
_getmdev+3f:	mov	ax,si
_getmdev+41:	pop	di
_getmdev+42:	pop	si
_getmdev+43:	pop	bp
_getmdev+44:	ret

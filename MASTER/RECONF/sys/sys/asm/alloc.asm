_iinit:		push	bp
_iinit+1:	mov	bp,sp
_iinit+3:	push	si
_iinit+4:	push	di
_iinit+5:	push	cx
_iinit+6:	mov	ax,#1
_iinit+9:	push	ax
_iinit+a:	push	0
_iinit+e:	call	0
_iinit+11:	add	sp,*4
_iinit+14:	mov	*-6(bp),ax
_iinit+17:	mov	ax,#ffff
_iinit+1a:	push	ax
_iinit+1b:	call	0
_iinit+1e:	pop	cx
_iinit+1f:	mov	di,ax
_iinit+21:	cmpb	71,*0
_iinit+26:	je	_iinit+30
_iinit+28:	mov	ax,#0
_iinit+2b:	push	ax
_iinit+2c:	call	0
_iinit+2f:	pop	cx
_iinit+30:	mov	ax,#200
_iinit+33:	push	ax
_iinit+34:	push	*14(di)
_iinit+37:	mov	bx,*-6(bp)
_iinit+3a:	push	*14(bx)
_iinit+3d:	call	0
_iinit+40:	add	sp,*6
_iinit+43:	push	*-6(bp)
_iinit+46:	call	0
_iinit+49:	pop	cx
_iinit+4a:	mov	2,di
_iinit+4e:	mov	ax,0
_iinit+51:	mov	0,ax
_iinit+54:	mov	si,*14(di)
_iinit+57:	movb	#19b(si),*0
_iinit+5c:	movb	#198(si),*0
_iinit+61:	movb	#199(si),*0
_iinit+66:	mov	ax,#19c(si)
_iinit+6a:	mov	dx,#19e(si)
_iinit+6e:	mov	0,ax
_iinit+71:	mov	2,dx
_iinit+75:	pop	cx
_iinit+76:	pop	di
_iinit+77:	pop	si
_iinit+78:	pop	bp
_iinit+79:	ret
_alloc:
_alloc:		push	bp
_alloc+1:	mov	bp,sp
_alloc+3:	push	si
_alloc+4:	push	di
_alloc+5:	sub	sp,*4
_alloc+8:	push	*4(bp)
_alloc+b:	call	_getfs
_alloc+e:	pop	cx
_alloc+f:	mov	si,ax
_alloc+11:	cmpb	#198(si),*0
_alloc+16:	je	_alloc+29
_alloc+18:	mov	ax,#ffa6
_alloc+1b:	push	ax
_alloc+1c:	lea	ax,#198(si)
_alloc+20:	push	ax
_alloc+21:	call	0
_alloc+24:	add	sp,*4
_alloc+27:	j	_alloc+11
_alloc+29:	cmp	*4(si),*0
_alloc+2d:	jnle	_alloc+32
_alloc+2f:	jmp	_alloc+be
_alloc+32:	cmp	*4(si),*64
_alloc+36:	jle	_alloc+3b
_alloc+38:	jmp	_alloc+dc
_alloc+3b:	lea	ax,*6(si)
_alloc+3e:	dec	*4(si)
_alloc+41:	mov	dx,*4(si)
_alloc+44:	shl	dx
_alloc+46:	add	ax,dx
_alloc+48:	mov	bx,ax
_alloc+4a:	mov	ax,(bx)
_alloc+4c:	mov	*-8(bp),ax
_alloc+4f:	or	ax,ax
_alloc+51:	jne	_alloc+56
_alloc+53:	jmp	_alloc+dc
_alloc+56:	push	*4(bp)
_alloc+59:	push	*-8(bp)
_alloc+5c:	push	si
_alloc+5d:	call	_badbloc
_alloc+60:	add	sp,*6
_alloc+63:	or	ax,ax
_alloc+65:	jne	_alloc+29
_alloc+67:	cmp	*4(si),*0
_alloc+6b:	jnle	_alloc+c0
_alloc+6d:	incb	#198(si)
_alloc+71:	push	*-8(bp)
_alloc+74:	push	*4(bp)
_alloc+77:	call	0
_alloc+7a:	add	sp,*4
_alloc+7d:	mov	di,ax
_alloc+7f:	test	(di)
_alloc+81:	addb	al,*0
_alloc+83:	jne	_alloc+a7
_alloc+85:	mov	ax,*14(di)
_alloc+88:	mov	*-6(bp),ax
_alloc+8b:	mov	bx,ax
_alloc+8d:	mov	ax,(bx)
_alloc+8f:	mov	*4(si),ax
_alloc+92:	add	*-6(bp),*2
_alloc+96:	mov	ax,#c8
_alloc+99:	push	ax
_alloc+9a:	lea	ax,*6(si)
_alloc+9d:	push	ax
_alloc+9e:	push	*-6(bp)
_alloc+a1:	call	0
_alloc+a4:	add	sp,*6
_alloc+a7:	push	di
_alloc+a8:	call	0
_alloc+ab:	pop	cx
_alloc+ac:	movb	#198(si),*0
_alloc+b1:	lea	ax,#198(si)
_alloc+b5:	push	ax
_alloc+b6:	call	0
_alloc+b9:	pop	cx
_alloc+ba:	cmp	*4(si),*0
_alloc+be:	jle	_alloc+dc
_alloc+c0:	push	*-8(bp)
_alloc+c3:	push	*4(bp)
_alloc+c6:	call	0
_alloc+c9:	add	sp,*4
_alloc+cc:	mov	di,ax
_alloc+ce:	push	di
_alloc+cf:	call	0
_alloc+d2:	pop	cx
_alloc+d3:	movb	#19a(si),*1
_alloc+d8:	mov	ax,di
_alloc+da:	j	_alloc+f5
_alloc+dc:	mov	*4(si),#0
_alloc+e1:	push	*4(bp)
_alloc+e4:	mov	ax,#0
_alloc+e7:	push	ax
_alloc+e8:	call	0
_alloc+eb:	add	sp,*4
_alloc+ee:	movb	71,*1c
_alloc+f3:	xor	ax,ax
_alloc+f5:	lea	sp,*-4(bp)
_alloc+f8:	pop	di
_alloc+f9:	pop	si
_alloc+fa:	pop	bp
_alloc+fb:	ret
_free:
_free:		push	bp
_free+1:	mov	bp,sp
_free+3:	push	si
_free+4:	push	di
_free+5:	push	cx
_free+6:	push	*4(bp)
_free+9:	call	_getfs
_free+c:	pop	cx
_free+d:	mov	di,ax
_free+f:	movb	#19a(di),*1
_free+14:	cmpb	#198(di),*0
_free+19:	je	_free+2c
_free+1b:	mov	ax,#ffa6
_free+1e:	push	ax
_free+1f:	lea	ax,#198(di)
_free+23:	push	ax
_free+24:	call	0
_free+27:	add	sp,*4
_free+2a:	j	_free+14
_free+2c:	push	*4(bp)
_free+2f:	push	*6(bp)
_free+32:	push	di
_free+33:	call	_badbloc
_free+36:	add	sp,*6
_free+39:	or	ax,ax
_free+3b:	jne	_free+b6
_free+3d:	cmp	*4(di),*0
_free+41:	jnle	_free+4d
_free+43:	mov	*4(di),#1
_free+48:	mov	*6(di),#0
_free+4d:	cmp	*4(di),*64
_free+51:	jl	_free+9d
_free+53:	incb	#198(di)
_free+57:	push	*6(bp)
_free+5a:	push	*4(bp)
_free+5d:	call	0
_free+60:	add	sp,*4
_free+63:	mov	*-6(bp),ax
_free+66:	mov	bx,ax
_free+68:	mov	si,*14(bx)
_free+6b:	mov	bx,si
_free+6d:	inc	si
_free+6e:	inc	si
_free+6f:	mov	ax,*4(di)
_free+72:	mov	(bx),ax
_free+74:	mov	ax,#c8
_free+77:	push	ax
_free+78:	push	si
_free+79:	lea	ax,*6(di)
_free+7c:	push	ax
_free+7d:	call	0
_free+80:	add	sp,*6
_free+83:	mov	*4(di),#0
_free+88:	push	*-6(bp)
_free+8b:	call	0
_free+8e:	pop	cx
_free+8f:	movb	#198(di),*0
_free+94:	lea	ax,#198(di)
_free+98:	push	ax
_free+99:	call	0
_free+9c:	pop	cx
_free+9d:	lea	ax,*6(di)
_free+a0:	mov	dx,*4(di)
_free+a3:	shl	dx
_free+a5:	add	ax,dx
_free+a7:	mov	bx,ax
_free+a9:	mov	ax,*6(bp)
_free+ac:	mov	(bx),ax
_free+ae:	inc	*4(di)
_free+b1:	movb	#19a(di),*1
_free+b6:	pop	cx
_free+b7:	pop	di
_free+b8:	pop	si
_free+b9:	pop	bp
_free+ba:	ret
_badbloc:
_badbloc:	push	bp
_badbloc+1:	mov	bp,sp
_badbloc+3:	push	si
_badbloc+4:	push	di
_badbloc+5:	mov	di,*4(bp)
_badbloc+8:	mov	si,*6(bp)
_badbloc+b:	mov	ax,(di)
_badbloc+d:	inc	ax
_badbloc+e:	inc	ax
_badbloc+f:	cmp	si,ax
_badbloc+11:	jb	_badbloc+18
_badbloc+13:	cmp	si,*2(di)
_badbloc+16:	jb	_badbloc+2a
_badbloc+18:	push	*8(bp)
_badbloc+1b:	lea	ax,*-4(bp)
_badbloc+1e:	push	ax
_badbloc+1f:	call	0
_badbloc+22:	add	sp,*4
_badbloc+25:	mov	ax,#1
_badbloc+28:	j	_badbloc+2c
_badbloc+2a:	xor	ax,ax
_badbloc+2c:	pop	di
_badbloc+2d:	pop	si
_badbloc+2e:	pop	bp
_badbloc+2f:	ret
_ialloc:
_ialloc:	push	bp
_ialloc+1:	mov	bp,sp
_ialloc+3:	push	si
_ialloc+4:	push	di
_ialloc+5:	sub	sp,*a
_ialloc+8:	push	*4(bp)
_ialloc+b:	call	_getfs
_ialloc+e:	pop	cx
_ialloc+f:	mov	di,ax
_ialloc+11:	cmpb	#199(di),*0
_ialloc+16:	je	_ialloc+29
_ialloc+18:	mov	ax,#ffa6
_ialloc+1b:	push	ax
_ialloc+1c:	lea	ax,#199(di)
_ialloc+20:	push	ax
_ialloc+21:	call	0
_ialloc+24:	add	sp,*4
_ialloc+27:	j	_ialloc+11
_ialloc+29:	cmp	#ce(di),*0
_ialloc+2e:	jle	_ialloc+93
_ialloc+30:	lea	ax,#d0(di)
_ialloc+34:	dec	#ce(di)
_ialloc+38:	mov	dx,#ce(di)
_ialloc+3c:	shl	dx
_ialloc+3e:	add	ax,dx
_ialloc+40:	mov	bx,ax
_ialloc+42:	mov	ax,(bx)
_ialloc+44:	mov	*-12(bp),ax
_ialloc+47:	or	ax,ax
_ialloc+49:	je	_ialloc+29
_ialloc+4b:	push	*-12(bp)
_ialloc+4e:	push	*4(bp)
_ialloc+51:	call	0
_ialloc+54:	add	sp,*4
_ialloc+57:	mov	si,ax
_ialloc+59:	or	ax,ax
_ialloc+5b:	jne	_ialloc+61
_ialloc+5d:	xor	ax,ax
_ialloc+5f:	j	_ialloc+89
_ialloc+61:	cmp	*6(si),*0
_ialloc+65:	jne	_ialloc+8c
_ialloc+67:	lea	ax,*6(si)
_ialloc+6a:	mov	*-14(bp),ax
_ialloc+6d:	lea	ax,*30(si)
_ialloc+70:	cmp	*-14(bp),ax
_ialloc+73:	jnb	_ialloc+82
_ialloc+75:	mov	bx,*-14(bp)
_ialloc+78:	mov	(bx),#0
_ialloc+7c:	add	*-14(bp),*2
_ialloc+80:	j	_ialloc+6d
_ialloc+82:	movb	#19a(di),*1
_ialloc+87:	mov	ax,si
_ialloc+89:	jmp	3d5
_ialloc+8c:	push	si
_ialloc+8d:	call	0
_ialloc+90:	pop	cx
_ialloc+91:	j	_ialloc+29
_ialloc+93:	incb	#199(di)
_ialloc+97:	mov	*-12(bp),#0
_ialloc+9c:	mov	*-10(bp),#0
_ialloc+a1:	mov	ax,*-10(bp)
_ialloc+a4:	cmp	ax,(di)
_ialloc+a6:	jb	_ialloc+ab
_ialloc+a8:	jmp	3a9
_ialloc+ab:	mov	ax,*-10(bp)
_ialloc+ae:	inc	ax
_ialloc+af:	inc	ax
_ialloc+b0:	push	ax
_ialloc+b1:	push	*4(bp)
_ialloc+b4:	call	0
_ialloc+b7:	add	sp,*4
_ialloc+ba:	mov	*-6(bp),ax
_ialloc+bd:	mov	bx,ax
_ialloc+bf:	mov	ax,(bx)
_ialloc+c1:	test	ax,#4
_ialloc+c4:	je	_ialloc+cc
_ialloc+c6:	add	*-12(bp),*f
_ialloc+ca:	j	395
_ialloc+cc:	mov	bx,*-6(bp)
_ialloc+cf:	mov	si,*14(bx)
_ialloc+d2:	mov	bx,*-6(bp)
_ialloc+d5:	mov	ax,*14(bx)
_ialloc+d8:	add	ax,#200
_ialloc+db:	cmp	si,ax
_ialloc+dd:	jnb	395
_ialloc+df:	inc	*-12(bp)
_ialloc+e2:	cmp	(si),*0
_ialloc+e5:	jne	390
_ialloc+e7:	mov	*-8(bp),#0
_ialloc+ec:	mov	ax,*-8(bp)
_ialloc+ef:	cmp	ax,0
_ialloc+f3:	jnb	372
_ialloc+f5:	mov	bx,*-8(bp)
_ialloc+f8:	mov	ax,*4(bp)
_ialloc+fb:	cmp	ax,*2(bx)
_ialloc+fe:	jne	36c
361:		mov	bx,*-8(bp)
364:		mov	ax,*-12(bp)
367:		cmp	ax,*4(bx)
36a:		je	390
36c:		add	*-8(bp),*22
370:		j	_ialloc+ec
372:		lea	ax,#d0(di)
376:		mov	dx,#ce(di)
37a:		shl	dx
37c:		add	ax,dx
37e:		mov	bx,ax
380:		mov	ax,*-12(bp)
383:		mov	(bx),ax
385:		inc	#ce(di)
389:		cmp	#ce(di),*64
38e:		jnl	395
390:		add	si,*20
393:		j	_ialloc+d2
395:		push	*-6(bp)
398:		call	0
39b:		pop	cx
39c:		cmp	#ce(di),*64
3a1:		jnl	3a9
3a3:		inc	*-10(bp)
3a6:		jmp	_ialloc+a1
3a9:		movb	#199(di),*0
3ae:		lea	ax,#199(di)
3b2:		push	ax
3b3:		call	0
3b6:		pop	cx
3b7:		cmp	#ce(di),*0
3bc:		jle	3c1
3be:		jmp	_ialloc+29
3c1:		push	*4(bp)
3c4:		lea	ax,*-14(bp)
3c7:		push	ax
3c8:		call	0
3cb:		add	sp,*4
3ce:		movb	71,*1c
3d3:		xor	ax,ax
3d5:		lea	sp,*-4(bp)
3d8:		pop	di
3d9:		pop	si
3da:		pop	bp
3db:		ret
_ifree:
_ifree:		push	bp
_ifree+1:	mov	bp,sp
_ifree+3:	push	si
_ifree+4:	push	di
_ifree+5:	push	*4(bp)
_ifree+8:	call	_getfs
_ifree+b:	pop	cx
_ifree+c:	mov	di,ax
_ifree+e:	cmpb	#199(di),*0
_ifree+13:	jne	_ifree+38
_ifree+15:	cmp	#ce(di),*64
_ifree+1a:	jnl	_ifree+38
_ifree+1c:	lea	ax,#d0(di)
_ifree+20:	mov	dx,#ce(di)
_ifree+24:	shl	dx
_ifree+26:	add	ax,dx
_ifree+28:	mov	bx,ax
_ifree+2a:	mov	ax,*6(bp)
_ifree+2d:	mov	(bx),ax
_ifree+2f:	inc	#ce(di)
_ifree+33:	movb	#19a(di),*1
_ifree+38:	pop	di
_ifree+39:	pop	si
_ifree+3a:	pop	bp
_ifree+3b:	ret
_getfs:
_getfs:		push	bp
_getfs+1:	mov	bp,sp
_getfs+3:	push	si
_getfs+4:	push	di
_getfs+5:	mov	di,#0
_getfs+8:	cmp	di,0
_getfs+c:	jnb	_getfs+4f
_getfs+e:	cmp	*2(di),*0
_getfs+12:	je	_getfs+4a
_getfs+14:	mov	ax,(di)
_getfs+16:	cmp	ax,*4(bp)
_getfs+19:	jne	_getfs+4a
_getfs+1b:	mov	bx,*2(di)
_getfs+1e:	mov	si,*14(bx)
_getfs+21:	cmp	*4(si),*64
_getfs+25:	jnle	_getfs+2e
_getfs+27:	cmp	#ce(si),*64
_getfs+2c:	jle	_getfs+46
_getfs+2e:	push	*4(bp)
_getfs+31:	lea	ax,*-4(bp)
_getfs+34:	push	ax
_getfs+35:	call	0
_getfs+38:	add	sp,*4
_getfs+3b:	mov	*4(si),#0
_getfs+40:	mov	#ce(si),#0
_getfs+46:	mov	ax,si
_getfs+48:	j	_getfs+57
_getfs+4a:	add	di,*6
_getfs+4d:	j	_getfs+8
_getfs+4f:	lea	ax,*-4(bp)
_getfs+52:	push	ax
_getfs+53:	call	0
_getfs+56:	pop	cx
_getfs+57:	pop	di
_getfs+58:	pop	si
_getfs+59:	pop	bp
_getfs+5a:	ret
_update:
_update:	push	bp
_update+1:	mov	bp,sp
_update+3:	push	si
_update+4:	push	di
_update+5:	push	cx
_update+6:	cmp	0,*0
_update+b:	je	_update+10
_update+d:	jmp	_update+da
_update+10:	inc	0
_update+14:	mov	si,#0
_update+17:	cmp	si,0
_update+1b:	jnb	_update+8e
_update+1d:	cmp	*2(si),*0
_update+21:	je	_update+2e
_update+23:	mov	bx,*2(si)
_update+26:	mov	di,*14(bx)
_update+29:	cmpb	#19a(di),*0
_update+2e:	je	_update+89
_update+30:	cmpb	#199(di),*0
_update+35:	jne	_update+89
_update+37:	cmpb	#198(di),*0
_update+3c:	jne	_update+89
_update+3e:	cmpb	#19b(di),*0
_update+43:	jne	_update+89
_update+45:	mov	ax,#1
_update+48:	push	ax
_update+49:	push	(si)
_update+4b:	call	0
_update+4e:	add	sp,*4
_update+51:	mov	*-6(bp),ax
_update+54:	mov	bx,ax
_update+56:	mov	ax,(bx)
_update+58:	test	ax,#4
_update+5b:	jne	_update+89
_update+5d:	movb	#19a(di),*0
_update+62:	mov	ax,0
_update+65:	mov	dx,2
_update+69:	mov	#19c(di),ax
_update+6d:	mov	#19e(di),dx
_update+71:	mov	ax,#200
_update+74:	push	ax
_update+75:	mov	bx,*-6(bp)
_update+78:	push	*14(bx)
_update+7b:	push	di
_update+7c:	call	0
_update+7f:	add	sp,*6
_update+82:	push	*-6(bp)
_update+85:	call	0
_update+88:	pop	cx
_update+89:	add	si,*6
_update+8c:	j	_update+17
_update+8e:	mov	di,#0
_update+91:	cmp	di,0
_update+95:	jnb	_update+cc
_update+97:	movb	al,(di)
_update+99:	and	ax,#ff
_update+9c:	test	ax,#1
_update+9f:	jne	_update+c7
_update+a1:	cmpb	*1(di),*0
_update+a5:	je	_update+c7
_update+a7:	movb	al,(di)
_update+a9:	and	ax,#ff
_update+ac:	test	ax,#6
_update+af:	je	_update+c7
_update+b1:	orb	(di),*1
_update+b4:	incb	*1(di)
_update+b7:	mov	ax,#0
_update+ba:	push	ax
_update+bb:	push	di
_update+bc:	call	0
_update+bf:	add	sp,*4
_update+c2:	push	di
_update+c3:	call	0
_update+c6:	pop	cx
_update+c7:	add	di,*22
_update+ca:	j	_update+91
_update+cc:	mov	ax,#ffff
_update+cf:	push	ax
_update+d0:	call	0
_update+d3:	pop	cx
_update+d4:	mov	0,#0
_update+da:	pop	cx
_update+db:	pop	di
_update+dc:	pop	si
_update+dd:	pop	bp
_update+de:	ret

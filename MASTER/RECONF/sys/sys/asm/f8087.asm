_fpsim:		push	bp
_fpsim+1:	mov	bp,sp
_fpsim+3:	push	si
_fpsim+4:	push	di
_fpsim+5:	sub	sp,*36
_fpsim+8:	call	0
_fpsim+b:	lea	ax,*18(bp)
_fpsim+e:	mov	128,ax
_fpsim+11:	mov	ax,*20(bp)
_fpsim+14:	inc	*20(bp)
_fpsim+17:	push	ax
_fpsim+18:	call	0
_fpsim+1b:	pop	cx
_fpsim+1c:	mov	si,ax
_fpsim+1e:	cmp	ax,#ffff
_fpsim+21:	jne	_fpsim+2c
_fpsim+23:	xor	ax,ax
_fpsim+25:	push	ax
_fpsim+26:	call	_ferror
_fpsim+29:	pop	cx
_fpsim+2a:	j	_fpsim+5b
_fpsim+2c:	cmp	si,#9b
_fpsim+30:	je	_fpsim+11
_fpsim+32:	cmp	si,#cd
_fpsim+36:	jne	_fpsim+4e
_fpsim+38:	mov	ax,*20(bp)
_fpsim+3b:	inc	*20(bp)
_fpsim+3e:	push	ax
_fpsim+3f:	call	0
_fpsim+42:	pop	cx
_fpsim+43:	cmp	ax,#f4
_fpsim+46:	je	_fpsim+11
_fpsim+48:	sub	*20(bp),*2
_fpsim+4c:	j	_fpsim+76
_fpsim+4e:	mov	ax,si
_fpsim+50:	and	ax,#f8
_fpsim+53:	cmp	ax,#d8
_fpsim+56:	je	_fpsim+5d
_fpsim+58:	dec	*20(bp)
_fpsim+5b:	j	_fpsim+76
_fpsim+5d:	mov	ax,*20(bp)
_fpsim+60:	inc	*20(bp)
_fpsim+63:	push	ax
_fpsim+64:	call	0
_fpsim+67:	pop	cx
_fpsim+68:	mov	di,ax
_fpsim+6a:	cmp	ax,#ffff
_fpsim+6d:	jne	_fpsim+79
_fpsim+6f:	xor	ax,ax
_fpsim+71:	push	ax
_fpsim+72:	call	_ferror
_fpsim+75:	pop	cx
_fpsim+76:	jmp	6db
_fpsim+79:	push	di
_fpsim+7a:	push	si
_fpsim+7b:	call	_idecode
_fpsim+7e:	add	sp,*4
_fpsim+81:	mov	si,ax
_fpsim+83:	test	si
_fpsim+85:	Illegal	instruction
_fpsim+86:	addb	*13(di),dh
_fpsim+89:	lea	ax,*20(bp)
_fpsim+8c:	push	ax
_fpsim+8d:	push	di
_fpsim+8e:	call	_decode
_fpsim+91:	add	sp,*4
_fpsim+94:	mov	di,ax
_fpsim+96:	mov	ax,si
_fpsim+98:	jmp	872
_fpsim+9b:	mov	ax,#2
_fpsim+9e:	push	ax
_fpsim+9f:	push	di
_fpsim+a0:	mov	ax,#14
_fpsim+a3:	push	ax
_fpsim+a4:	call	0
_fpsim+a7:	add	sp,*6
_fpsim+aa:	jmp	_fpsim+11
_fpsim+ad:	mov	ax,#2
_fpsim+b0:	push	ax
_fpsim+b1:	mov	ax,#12
_fpsim+b4:	push	ax
_fpsim+b5:	push	di
_fpsim+b6:	call	0
_fpsim+b9:	add	sp,*6
_fpsim+bc:	j	_fpsim+aa
_fpsim+be:	mov	ax,#2
_fpsim+c1:	push	ax
_fpsim+c2:	push	di
_fpsim+c3:	mov	ax,#12
_fpsim+c6:	push	ax
_fpsim+c7:	call	0
_fpsim+ca:	add	sp,*6
_fpsim+cd:	j	_fpsim+aa
_fpsim+cf:	and	14,#ffc0
_fpsim+d5:	j	_fpsim+aa
_fpsim+d7:	lea	ax,*-18(bp)
_fpsim+da:	push	ax
_fpsim+db:	mov	ax,14
_fpsim+de:	and	ax,#3800
_fpsim+e1:	mov	cx,#b
_fpsim+e4:	sar	ax,cl
_fpsim+e6:	mov	dx,#a
_fpsim+e9:	imul	dx
_fpsim+eb:	add	ax,#20
_fpsim+ee:	push	ax
_fpsim+ef:	call	0
_fpsim+f2:	add	sp,*4
_fpsim+f5:	jmp	768
_fpsim+f8:	lea	ax,*-18(bp)
_fpsim+fb:	push	ax
_fpsim+fc:	call	0
ff:		pop	cx
100:		mov	ax,14
103:		and	ax,#3800
106:		mov	cx,#b
109:		sar	ax,cl
10b:		dec	ax
10c:		and	ax,#7
10f:		mov	*-50(bp),ax
112:		and	14,#c7ff
118:		mov	ax,*-50(bp)
11b:		mov	cx,#b
11e:		shl	ax,cl
120:		or	14,ax
124:		mov	ax,14
127:		and	ax,#3800
12a:		mov	cx,#b
12d:		sar	ax,cl
12f:		mov	dx,#a
132:		imul	dx
134:		add	ax,#20
137:		push	ax
138:		lea	ax,*-18(bp)
13b:		push	ax
13c:		call	0
13f:		add	sp,*4
142:		j	_fpsim+d5
144:		lea	ax,*-18(bp)
147:		push	ax
148:		call	0
14b:		pop	cx
14c:		j	100
14e:		push	di
14f:		lea	ax,*-18(bp)
152:		push	ax
153:		call	_load
156:		add	sp,*4
159:		j	14c
15b:		lea	ax,*-18(bp)
15e:		push	ax
15f:		mov	ax,14
162:		and	ax,#3800
165:		mov	cx,#b
168:		sar	ax,cl
16a:		mov	dx,#a
16d:		imul	dx
16f:		add	ax,#20
172:		push	ax
173:		call	0
176:		add	sp,*4
179:		push	di
17a:		lea	ax,*-18(bp)
17d:		push	ax
17e:		call	_store
181:		add	sp,*4
184:		cmp	si,*19
187:		jne	142
189:		j	1e6
18b:		mov	ax,#2
18e:		push	ax
18f:		lea	ax,*-50(bp)
192:		push	ax
193:		push	di
194:		call	0
197:		add	sp,*6
19a:		push	*-50(bp)
19d:		lea	ax,*-18(bp)
1a0:		push	ax
1a1:		call	0
1a4:		add	sp,*4
1a7:		j	159
1a9:		lea	ax,*-18(bp)
1ac:		push	ax
1ad:		mov	ax,14
1b0:		and	ax,#3800
1b3:		mov	cx,#b
1b6:		sar	ax,cl
1b8:		mov	dx,#a
1bb:		imul	dx
1bd:		add	ax,#20
1c0:		push	ax
1c1:		call	0
1c4:		add	sp,*4
1c7:		lea	ax,*-18(bp)
1ca:		push	ax
1cb:		call	0
1ce:		pop	cx
1cf:		mov	*-50(bp),ax
1d2:		mov	ax,#2
1d5:		push	ax
1d6:		push	di
1d7:		lea	ax,*-50(bp)
1da:		push	ax
1db:		call	0
1de:		add	sp,*6
1e1:		cmp	si,*1f
1e4:		jne	187
1e6:		j	249
1e8:		mov	ax,#4
1eb:		push	ax
1ec:		lea	ax,*-58(bp)
1ef:		push	ax
1f0:		push	di
1f1:		call	0
1f4:		add	sp,*6
1f7:		push	*-56(bp)
1fa:		push	*-58(bp)
1fd:		lea	ax,*-18(bp)
200:		push	ax
201:		call	0
204:		add	sp,*6
207:		j	1a7
209:		lea	ax,*-18(bp)
20c:		push	ax
20d:		mov	ax,14
210:		and	ax,#3800
213:		mov	cx,#b
216:		sar	ax,cl
218:		mov	dx,#a
21b:		imul	dx
21d:		add	ax,#20
220:		push	ax
221:		call	0
224:		add	sp,*4
227:		lea	ax,*-18(bp)
22a:		push	ax
22b:		call	0
22e:		pop	cx
22f:		mov	*-58(bp),ax
232:		mov	*-56(bp),dx
235:		mov	ax,#4
238:		push	ax
239:		push	di
23a:		lea	ax,*-58(bp)
23d:		push	ax
23e:		call	0
241:		add	sp,*6
244:		cmp	si,*1b
247:		jne	1e4
249:		j	286
24b:		push	di
24c:		lea	ax,*-18(bp)
24f:		push	ax
250:		call	_loadd
253:		add	sp,*4
256:		j	207
258:		lea	ax,*-18(bp)
25b:		push	ax
25c:		mov	ax,14
25f:		and	ax,#3800
262:		mov	cx,#b
265:		sar	ax,cl
267:		mov	dx,#a
26a:		imul	dx
26c:		add	ax,#20
26f:		push	ax
270:		call	0
273:		add	sp,*4
276:		push	di
277:		lea	ax,*-18(bp)
27a:		push	ax
27b:		call	_stored
27e:		add	sp,*4
281:		cmp	si,*1d
284:		jne	247
286:		jmp	5a2
289:		lea	ax,*-18(bp)
28c:		push	ax
28d:		mov	ax,14
290:		and	ax,#3800
293:		mov	cx,#b
296:		sar	ax,cl
298:		mov	dx,#a
29b:		imul	dx
29d:		add	ax,#20
2a0:		push	ax
2a1:		call	0
2a4:		add	sp,*4
2a7:		mov	ax,#40
2aa:		push	ax
2ab:		lea	ax,*-18(bp)
2ae:		push	ax
2af:		call	0
2b2:		add	sp,*4
2b5:		lea	ax,*-18(bp)
2b8:		push	ax
2b9:		call	_round
2bc:		pop	cx
2bd:		mov	ax,#203f
2c0:		sub	ax,*-16(bp)
2c3:		mov	*-50(bp),ax
2c6:		cmp	ax,#3f
2c9:		jl	2d5
2cb:		lea	ax,*-18(bp)
2ce:		push	ax
2cf:		call	0
2d2:		pop	cx
2d3:		j	30f
2d5:		cmp	*-50(bp),*0
2d9:		jle	30f
2db:		mov	*-54(bp),#0
2e0:		mov	ax,*-54(bp)
2e3:		cmp	ax,*-50(bp)
2e6:		jnl	2f5
2e8:		lea	ax,*-18(bp)
2eb:		push	ax
2ec:		call	0
2ef:		pop	cx
2f0:		inc	*-54(bp)
2f3:		j	2e0
2f5:		mov	*-54(bp),#0
2fa:		mov	ax,*-54(bp)
2fd:		cmp	ax,*-50(bp)
300:		jnl	30f
302:		lea	ax,*-18(bp)
305:		push	ax
306:		call	0
309:		pop	cx
30a:		inc	*-54(bp)
30d:		j	2fa
30f:		mov	ax,14
312:		and	ax,#3800
315:		mov	cx,#b
318:		sar	ax,cl
31a:		mov	dx,#a
31d:		imul	dx
31f:		add	ax,#20
322:		push	ax
323:		lea	ax,*-18(bp)
326:		push	ax
327:		call	0
32a:		add	sp,*4
32d:		jmp	142
330:		lea	ax,*-18(bp)
333:		push	ax
334:		mov	ax,14
337:		and	ax,#3800
33a:		mov	cx,#b
33d:		sar	ax,cl
33f:		mov	dx,#a
342:		imul	dx
344:		add	ax,#20
347:		push	ax
348:		call	0
34b:		add	sp,*4
34e:		mov	ax,*-18(bp)
351:		not	ax
353:		mov	*-18(bp),ax
356:		jmp	124
359:		lea	ax,*-18(bp)
35c:		push	ax
35d:		mov	ax,14
360:		and	ax,#3800
363:		mov	cx,#b
366:		sar	ax,cl
368:		mov	dx,#a
36b:		imul	dx
36d:		add	ax,#20
370:		push	ax
371:		call	0
374:		add	sp,*4
377:		mov	*-18(bp),#0
37c:		j	356
37e:		lea	ax,*-18(bp)
381:		push	ax
382:		mov	ax,14
385:		and	ax,#3800
388:		mov	cx,#b
38b:		sar	ax,cl
38d:		mov	dx,#a
390:		imul	dx
392:		add	ax,#20
395:		push	ax
396:		call	0
399:		add	sp,*4
39c:		mov	ax,*-16(bp)
39f:		sub	ax,#1fff
3a2:		mov	*-50(bp),ax
3a5:		push	*-50(bp)
3a8:		lea	ax,*-32(bp)
3ab:		push	ax
3ac:		call	0
3af:		add	sp,*4
3b2:		mov	ax,14
3b5:		and	ax,#3800
3b8:		mov	cx,#b
3bb:		sar	ax,cl
3bd:		inc	ax
3be:		and	ax,#7
3c1:		mov	dx,#a
3c4:		imul	dx
3c6:		add	ax,#20
3c9:		push	ax
3ca:		lea	ax,*-18(bp)
3cd:		push	ax
3ce:		call	0
3d1:		add	sp,*4
3d4:		mov	*-16(bp),#1fff
3d9:		jmp	256
3dc:		lea	ax,*-32(bp)
3df:		push	ax
3e0:		mov	ax,14
3e3:		and	ax,#3800
3e6:		mov	cx,#b
3e9:		sar	ax,cl
3eb:		inc	ax
3ec:		and	ax,#7
3ef:		mov	dx,#a
3f2:		imul	dx
3f4:		add	ax,#20
3f7:		push	ax
3f8:		call	0
3fb:		add	sp,*4
3fe:		lea	ax,*-32(bp)
401:		push	ax
402:		call	0
405:		pop	cx
406:		mov	*-50(bp),ax
409:		lea	ax,*-18(bp)
40c:		push	ax
40d:		mov	ax,14
410:		and	ax,#3800
413:		mov	cx,#b
416:		sar	ax,cl
418:		mov	dx,#a
41b:		imul	dx
41d:		add	ax,#20
420:		push	ax
421:		call	0
424:		add	sp,*4
427:		cmp	*-16(bp),*0
42b:		jne	430
42d:		jmp	32d
430:		mov	ax,*-50(bp)
433:		add	*-16(bp),ax
436:		jmp	37c
439:		mov	ax,14
43c:		and	ax,#3800
43f:		mov	cx,#b
442:		sar	ax,cl
444:		dec	ax
445:		and	ax,#7
448:		mov	*-50(bp),ax
44b:		and	14,#c7ff
451:		mov	ax,*-50(bp)
454:		mov	cx,#b
457:		shl	ax,cl
459:		or	14,ax
45d:		jmp	32d
460:		lea	ax,*-18(bp)
463:		push	ax
464:		mov	ax,14
467:		and	ax,#3800
46a:		mov	cx,#b
46d:		sar	ax,cl
46f:		mov	dx,#a
472:		imul	dx
474:		add	ax,#20
477:		push	ax
478:		call	0
47b:		add	sp,*4
47e:		mov	ax,14
481:		and	ax,#3800
484:		mov	cx,#b
487:		sar	ax,cl
489:		inc	ax
48a:		and	ax,#7
48d:		mov	*-50(bp),ax
490:		and	14,#c7ff
496:		mov	ax,*-50(bp)
499:		mov	cx,#b
49c:		shl	ax,cl
49e:		or	14,ax
4a2:		lea	ax,*-32(bp)
4a5:		push	ax
4a6:		mov	ax,14
4a9:		and	ax,#3800
4ac:		mov	cx,#b
4af:		sar	ax,cl
4b1:		mov	dx,#a
4b4:		imul	dx
4b6:		add	ax,#20
4b9:		push	ax
4ba:		call	0
4bd:		add	sp,*4
4c0:		jmp	712
4c3:		lea	ax,*-18(bp)
4c6:		push	ax
4c7:		mov	ax,14
4ca:		and	ax,#3800
4cd:		mov	cx,#b
4d0:		sar	ax,cl
4d2:		mov	dx,#a
4d5:		imul	dx
4d7:		add	ax,#20
4da:		push	ax
4db:		call	0
4de:		add	sp,*4
4e1:		test	si
4e3:		Illegal	instruction
4e4:		addb	*3(di),dh
4e7:		jmp	60c
4ea:		mov	ax,si
4ec:		and	ax,#7
4ef:		mov	*-52(bp),ax
4f2:		mov	ax,14
4f5:		and	ax,#3800
4f8:		mov	cx,#b
4fb:		sar	ax,cl
4fd:		add	ax,*-52(bp)
500:		and	ax,#7
503:		mov	*-52(bp),ax
506:		mov	ax,si
508:		and	ax,#fff8
50b:		jmp	5ed
50e:		lea	ax,*-18(bp)
511:		push	ax
512:		mov	ax,*-52(bp)
515:		mov	dx,#a
518:		imul	dx
51a:		add	ax,#20
51d:		push	ax
51e:		call	0
521:		add	sp,*4
524:		jmp	3d9
527:		lea	ax,*-32(bp)
52a:		push	ax
52b:		mov	ax,*-52(bp)
52e:		mov	dx,#a
531:		imul	dx
533:		add	ax,#20
536:		push	ax
537:		call	0
53a:		add	sp,*4
53d:		mov	ax,*-52(bp)
540:		mov	dx,#a
543:		imul	dx
545:		add	ax,#20
548:		push	ax
549:		lea	ax,*-18(bp)
54c:		push	ax
54d:		call	0
550:		add	sp,*4
553:		mov	ax,14
556:		and	ax,#3800
559:		mov	cx,#b
55c:		sar	ax,cl
55e:		mov	dx,#a
561:		imul	dx
563:		add	ax,#20
566:		push	ax
567:		lea	ax,*-32(bp)
56a:		push	ax
56b:		call	0
56e:		add	sp,*4
571:		jmp	45d
574:		mov	ax,*-52(bp)
577:		mov	dx,#a
57a:		imul	dx
57c:		add	ax,#20
57f:		push	ax
580:		lea	ax,*-18(bp)
583:		push	ax
584:		call	0
587:		add	sp,*4
58a:		j	571
58c:		mov	ax,*-52(bp)
58f:		mov	dx,#a
592:		imul	dx
594:		add	ax,#20
597:		push	ax
598:		lea	ax,*-18(bp)
59b:		push	ax
59c:		call	0
59f:		add	sp,*4
5a2:		mov	ax,14
5a5:		and	ax,#3800
5a8:		mov	cx,#b
5ab:		sar	ax,cl
5ad:		inc	ax
5ae:		and	ax,#7
5b1:		mov	*-50(bp),ax
5b4:		and	14,#c7ff
5ba:		mov	ax,*-50(bp)
5bd:		mov	cx,#b
5c0:		shl	ax,cl
5c2:		or	14,ax
5c6:		j	58a
5c8:		test	si
5ca:		addb	(bx),al
5cc:		je	5d5
5ce:		push	*20(bp)
5d1:		call	_oops
5d4:		pop	cx
5d5:		lea	ax,*-32(bp)
5d8:		push	ax
5d9:		mov	ax,*-52(bp)
5dc:		mov	dx,#a
5df:		imul	dx
5e1:		add	ax,#20
5e4:		push	ax
5e5:		call	0
5e8:		add	sp,*4
5eb:		j	61f
5ed:		cmp	ax,#1c0
5f0:		jne	5f5
5f2:		jmp	50e
5f5:		cmp	ax,#1c8
5f8:		jne	5fd
5fa:		jmp	527
5fd:		cmp	ax,#5d0
600:		jne	605
602:		jmp	574
605:		cmp	ax,#5d8
608:		je	58c
60a:		j	5c8
60c:		mov	ax,si
60e:		and	ax,#7
611:		jmp	6de
614:		push	di
615:		lea	ax,*-32(bp)
618:		push	ax
619:		call	_load
61c:		add	sp,*4
61f:		j	66f
621:		mov	ax,#2
624:		push	ax
625:		lea	ax,*-50(bp)
628:		push	ax
629:		push	di
62a:		call	0
62d:		add	sp,*6
630:		push	*-50(bp)
633:		lea	ax,*-18(bp)
636:		push	ax
637:		call	0
63a:		add	sp,*4
63d:		lea	ax,*-18(bp)
640:		push	si
641:		lea	bx,*-32(bp)
644:		mov	si,ax
646:		mov	cx,#6
649:		lodsw
64a:		mov	(bx),ax
64c:		inc	bx
64d:		inc	bx
64e:		loop	649
650:		pop	si
651:		lea	ax,*-18(bp)
654:		push	ax
655:		mov	ax,14
658:		and	ax,#3800
65b:		mov	cx,#b
65e:		sar	ax,cl
660:		mov	dx,#a
663:		imul	dx
665:		add	ax,#20
668:		push	ax
669:		call	0
66c:		add	sp,*4
66f:		j	67c
671:		push	di
672:		lea	ax,*-32(bp)
675:		push	ax
676:		call	_loadd
679:		add	sp,*4
67c:		j	6cf
67e:		mov	ax,#4
681:		push	ax
682:		lea	ax,*-58(bp)
685:		push	ax
686:		push	di
687:		call	0
68a:		add	sp,*6
68d:		push	*-56(bp)
690:		push	*-58(bp)
693:		lea	ax,*-18(bp)
696:		push	ax
697:		call	0
69a:		add	sp,*6
69d:		lea	ax,*-18(bp)
6a0:		push	si
6a1:		lea	bx,*-32(bp)
6a4:		mov	si,ax
6a6:		mov	cx,#6
6a9:		lodsw
6aa:		mov	(bx),ax
6ac:		inc	bx
6ad:		inc	bx
6ae:		loop	6a9
6b0:		pop	si
6b1:		lea	ax,*-18(bp)
6b4:		push	ax
6b5:		mov	ax,14
6b8:		and	ax,#3800
6bb:		mov	cx,#b
6be:		sar	ax,cl
6c0:		mov	dx,#a
6c3:		imul	dx
6c5:		add	ax,#20
6c8:		push	ax
6c9:		call	0
6cc:		add	sp,*4
6cf:		j	6ea
6d1:		mov	ax,*20(bp)
6d4:		dec	ax
6d5:		dec	ax
6d6:		push	ax
6d7:		call	_oops
6da:		pop	cx
6db:		jmp	95d
6de:		cmp	ax,#6
6e1:		jnbe	6d1
6e3:		shl	ax
6e5:		xchg	bx
6e6:		jmp	#d4a(bx)
6ea:		mov	ax,si
6ec:		and	ax,#38
6ef:		jmp	7fb
6f2:		lea	ax,*-32(bp)
6f5:		push	ax
6f6:		lea	ax,*-18(bp)
6f9:		push	ax
6fa:		call	0
6fd:		add	sp,*4
700:		j	710
702:		lea	ax,*-32(bp)
705:		push	ax
706:		lea	ax,*-18(bp)
709:		push	ax
70a:		call	0
70d:		add	sp,*4
710:		j	779
712:		mov	ax,14
715:		and	ax,#3800
718:		mov	cx,#b
71b:		sar	ax,cl
71d:		inc	ax
71e:		and	ax,#7
721:		mov	*-50(bp),ax
724:		and	14,#c7ff
72a:		mov	ax,*-50(bp)
72d:		mov	cx,#b
730:		shl	ax,cl
732:		or	14,ax
736:		mov	ax,#40
739:		push	ax
73a:		lea	ax,*-18(bp)
73d:		push	ax
73e:		call	0
741:		add	sp,*4
744:		mov	ax,#40
747:		push	ax
748:		lea	ax,*-32(bp)
74b:		push	ax
74c:		call	0
74f:		add	sp,*4
752:		andb	*-14(bp),*80
756:		andb	*-28(bp),*80
75a:		lea	ax,*-32(bp)
75d:		push	ax
75e:		lea	ax,*-18(bp)
761:		push	ax
762:		call	0
765:		add	sp,*4
768:		jmp	857
76b:		lea	ax,*-32(bp)
76e:		push	ax
76f:		lea	ax,*-18(bp)
772:		push	ax
773:		call	0
776:		add	sp,*4
779:		j	789
77b:		lea	ax,*-32(bp)
77e:		push	ax
77f:		lea	ax,*-18(bp)
782:		push	ax
783:		call	0
786:		add	sp,*4
789:		j	7c1
78b:		lea	ax,*-18(bp)
78e:		push	si
78f:		lea	bx,*-46(bp)
792:		mov	si,ax
794:		mov	cx,#6
797:		lodsw
798:		mov	(bx),ax
79a:		inc	bx
79b:		inc	bx
79c:		loop	797
79e:		pop	si
79f:		lea	ax,*-32(bp)
7a2:		push	si
7a3:		lea	bx,*-18(bp)
7a6:		mov	si,ax
7a8:		mov	cx,#6
7ab:		lodsw
7ac:		mov	(bx),ax
7ae:		inc	bx
7af:		inc	bx
7b0:		loop	7ab
7b2:		pop	si
7b3:		lea	ax,*-46(bp)
7b6:		push	ax
7b7:		lea	ax,*-18(bp)
7ba:		push	ax
7bb:		call	0
7be:		add	sp,*4
7c1:		j	7f9
7c3:		lea	ax,*-18(bp)
7c6:		push	si
7c7:		lea	bx,*-46(bp)
7ca:		mov	si,ax
7cc:		mov	cx,#6
7cf:		lodsw
7d0:		mov	(bx),ax
7d2:		inc	bx
7d3:		inc	bx
7d4:		loop	7cf
7d6:		pop	si
7d7:		lea	ax,*-32(bp)
7da:		push	si
7db:		lea	bx,*-18(bp)
7de:		mov	si,ax
7e0:		mov	cx,#6
7e3:		lodsw
7e4:		mov	(bx),ax
7e6:		inc	bx
7e7:		inc	bx
7e8:		loop	7e3
7ea:		pop	si
7eb:		lea	ax,*-46(bp)
7ee:		push	ax
7ef:		lea	ax,*-18(bp)
7f2:		push	ax
7f3:		call	0
7f6:		add	sp,*4
7f9:		j	839
7fb:		cmp	ax,#18
7fe:		jne	803
800:		jmp	712
803:		jnle	81c
805:		or	ax,ax
807:		jne	80c
809:		jmp	6f2
80c:		cmp	ax,#8
80f:		jne	814
811:		jmp	702
814:		cmp	ax,#10
817:		jne	81c
819:		jmp	736
81c:		cmp	ax,#20
81f:		jne	824
821:		jmp	76b
824:		cmp	ax,#28
827:		je	7c3
829:		cmp	ax,#30
82c:		jne	831
82e:		jmp	77b
831:		cmp	ax,#38
834:		jne	839
836:		jmp	78b
839:		mov	ax,14
83c:		and	ax,#3800
83f:		mov	cx,#b
842:		sar	ax,cl
844:		mov	dx,#a
847:		imul	dx
849:		add	ax,#20
84c:		push	ax
84d:		lea	ax,*-18(bp)
850:		push	ax
851:		call	0
854:		add	sp,*4
857:		lea	ax,*-18(bp)
85a:		push	ax
85b:		call	0
85e:		pop	cx
85f:		mov	*-50(bp),ax
862:		and	14,#beff
868:		mov	ax,*-50(bp)
86b:		or	14,ax
86f:		jmp	5c6
872:		cmp	ax,#39
875:		jne	87a
877:		jmp	_fpsim+be
87a:		jnle	8e7
87c:		cmp	ax,#15
87f:		jne	884
881:		jmp	258
884:		jnle	8bd
886:		cmp	ax,#5
889:		jne	88e
88b:		jmp	24b
88e:		jnle	8a3
890:		cmp	ax,#1
893:		jne	898
895:		jmp	14e
898:		cmp	ax,#3
89b:		jne	8a0
89d:		jmp	1e8
8a0:		jmp	4c3
8a3:		cmp	ax,#7
8a6:		jne	8ab
8a8:		jmp	18b
8ab:		cmp	ax,#11
8ae:		jne	8b3
8b0:		jmp	15b
8b3:		cmp	ax,#13
8b6:		jne	8bb
8b8:		jmp	209
8bb:		j	8a0
8bd:		cmp	ax,#1b
8c0:		je	8b6
8c2:		jnle	8d3
8c4:		cmp	ax,#17
8c7:		jne	8cc
8c9:		jmp	1a9
8cc:		cmp	ax,#19
8cf:		je	8ae
8d1:		j	8a0
8d3:		cmp	ax,#1d
8d6:		je	87f
8d8:		cmp	ax,#1f
8db:		je	8c7
8dd:		cmp	ax,#29
8e0:		jne	8e5
8e2:		jmp	_fpsim+ad
8e5:		j	8a0
8e7:		cmp	ax,#1ee
8ea:		jne	8ef
8ec:		jmp	_fpsim+f8
8ef:		jnle	927
8f1:		cmp	ax,#1e0
8f4:		jne	8f9
8f6:		jmp	330
8f9:		jnle	90d
8fb:		cmp	ax,#3d
8fe:		jne	903
900:		jmp	_fpsim+9b
903:		cmp	ax,#de
906:		jne	90b
908:		jmp	460
90b:		j	8bb
90d:		cmp	ax,#1e1
910:		jne	915
912:		jmp	359
915:		cmp	ax,#1e4
918:		jne	91d
91a:		jmp	_fpsim+d7
91d:		cmp	ax,#1e8
920:		jne	925
922:		jmp	144
925:		j	8d1
927:		cmp	ax,#1f7
92a:		jne	92f
92c:		jmp	5a2
92f:		jnle	943
931:		cmp	ax,#1f4
934:		jne	939
936:		jmp	37e
939:		cmp	ax,#1f6
93c:		jne	941
93e:		jmp	439
941:		j	8e5
943:		cmp	ax,#1fc
946:		jne	94b
948:		jmp	289
94b:		cmp	ax,#1fd
94e:		jne	953
950:		jmp	3dc
953:		cmp	ax,#3e2
956:		jne	95b
958:		jmp	_fpsim+cf
95b:		j	90b
95d:		lea	sp,*-4(bp)
960:		pop	di
961:		pop	si
962:		pop	bp
963:		ret
_decode:
_decode:	push	bp
_decode+1:	mov	bp,sp
_decode+3:	push	si
_decode+4:	push	di
_decode+5:	push	cx
_decode+6:	mov	di,#4(bp)
_decode+a:	mov	bx,*6(bp)
_decode+d:	push	(bx)
_decode+f:	call	0
_decode+12:	pop	cx
_decode+13:	cmp	ax,#ffff
_decode+16:	jne	_decode+21
_decode+18:	xor	ax,ax
_decode+1a:	push	ax
_decode+1b:	call	_ferror
_decode+1e:	pop	cx
_decode+1f:	j	_decode+40
_decode+21:	mov	bx,*6(bp)
_decode+24:	push	(bx)
_decode+26:	call	0
_decode+29:	pop	cx
_decode+2a:	mov	*-6(bp),ax
_decode+2d:	mov	ax,di
_decode+2f:	and	ax,#c7
_decode+32:	cmp	ax,#6
_decode+35:	jne	_decode+43
_decode+37:	mov	bx,*6(bp)
_decode+3a:	add	(bx),*2
_decode+3d:	mov	ax,*-6(bp)
_decode+40:	jmp	_decode+f2
_decode+43:	mov	ax,di
_decode+45:	and	ax,#7
_decode+48:	j	_decode+b6
_decode+4a:	mov	bx,128
_decode+4e:	mov	ax,*-2(bx)
_decode+51:	mov	bx,128
_decode+55:	add	ax,*-20(bx)
_decode+58:	mov	si,ax
_decode+5a:	j	_decode+b4
_decode+5c:	mov	bx,128
_decode+60:	mov	ax,*-2(bx)
_decode+63:	mov	bx,128
_decode+67:	add	ax,*-22(bx)
_decode+6a:	mov	si,ax
_decode+6c:	j	_decode+b4
_decode+6e:	mov	bx,128
_decode+72:	mov	ax,*-18(bx)
_decode+75:	mov	bx,128
_decode+79:	add	ax,*-20(bx)
_decode+7c:	mov	si,ax
_decode+7e:	j	_decode+b4
_decode+80:	mov	bx,128
_decode+84:	mov	ax,*-18(bx)
_decode+87:	mov	bx,128
_decode+8b:	add	ax,*-22(bx)
_decode+8e:	mov	si,ax
_decode+90:	j	_decode+c2
_decode+92:	mov	bx,128
_decode+96:	mov	si,*-20(bx)
_decode+99:	j	_decode+c2
_decode+9b:	mov	bx,128
_decode+9f:	mov	si,*-22(bx)
_decode+a2:	j	_decode+c2
_decode+a4:	mov	bx,128
_decode+a8:	mov	si,*-18(bx)
_decode+ab:	j	_decode+c2
_decode+ad:	mov	bx,128
_decode+b1:	mov	si,*-2(bx)
_decode+b4:	j	_decode+c2
_decode+b6:	cmp	ax,#7
_decode+b9:	jnbe	_decode+c2
_decode+bb:	shl	ax
_decode+bd:	xchg	bx
_decode+be:	jmp	#d58(bx)
_decode+c2:	mov	ax,di
_decode+c4:	and	ax,#c0
_decode+c7:	j	_decode+e1
_decode+c9:	mov	ax,*-6(bp)
_decode+cc:	cbw
_decode+cd:	add	si,ax
_decode+cf:	mov	bx,*6(bp)
_decode+d2:	inc	(bx)
_decode+d4:	j	_decode+f0
_decode+d6:	add	si,*-6(bp)
_decode+d9:	mov	bx,*6(bp)
_decode+dc:	add	(bx),*2
_decode+df:	j	_decode+f0
_decode+e1:	cmp	ax,#40
_decode+e4:	je	_decode+c9
_decode+e6:	cmp	ax,#80
_decode+e9:	je	_decode+d6
_decode+eb:	cmp	ax,#c0
_decode+ee:	je	_decode+d6
_decode+f0:	mov	ax,si
_decode+f2:	pop	cx
_decode+f3:	pop	di
_decode+f4:	pop	si
_decode+f5:	pop	bp
_decode+f6:	ret
_load:
_load:		push	bp
_load+1:	mov	bp,sp
_load+3:	push	si
_load+4:	push	di
_load+5:	sub	sp,*4
_load+8:	mov	di,#4(bp)
_load+c:	push	di
_load+d:	call	0
_load+10:	pop	cx
_load+11:	mov	ax,#4
_load+14:	push	ax
_load+15:	lea	ax,*-8(bp)
_load+18:	push	ax
_load+19:	push	*6(bp)
_load+1c:	call	0
_load+1f:	add	sp,*6
_load+22:	cmpb	*-5(bp),*0
_load+26:	jnl	_load+2c
_load+28:	mov	(di),#ffff
_load+2c:	movb	al,*-5(bp)
_load+2f:	cbw
_load+30:	shl	ax
_load+32:	mov	*2(di),ax
_load+35:	cmpb	*-6(bp),*0
_load+39:	jnl	_load+40
_load+3b:	or	*2(di),#1
_load+40:	and	*2(di),#ff
_load+45:	cmp	*2(di),*0
_load+49:	je	_load+50
_load+4b:	add	*2(di),#1f82
_load+50:	movb	al,*-6(bp)
_load+53:	cbw
_load+54:	and	ax,#7f
_load+57:	mov	cx,ax
_load+59:	movb	*11(di),cl
_load+5c:	movb	al,*-7(bp)
_load+5f:	movb	*10(di),al
_load+62:	movb	al,*-8(bp)
_load+65:	movb	*9(di),al
_load+68:	cmp	*2(di),*0
_load+6c:	je	_load+77
_load+6e:	orb	*11(di),*80
_load+72:	push	di
_load+73:	call	0
_load+76:	pop	cx
_load+77:	lea	sp,*-4(bp)
_load+7a:	pop	di
_load+7b:	pop	si
_load+7c:	pop	bp
_load+7d:	ret
_store:
_store:		push	bp
_store+1:	mov	bp,sp
_store+3:	push	si
_store+4:	push	di
_store+5:	sub	sp,*4
_store+8:	mov	di,#4(bp)
_store+c:	mov	ax,#40
_store+f:	push	ax
_store+10:	push	di
_store+11:	call	0
_store+14:	add	sp,*4
_store+17:	movb	al,*11(di)
_store+1a:	cbw
_store+1b:	test	ax,#ff80
_store+1e:	je	_store+37
_store+20:	push	di
_store+21:	call	0
_store+24:	pop	cx
_store+25:	inc	*2(di)
_store+28:	cmp	*2(di),#3fff
_store+2d:	jle	_store+37
_store+2f:	mov	ax,#8
_store+32:	push	ax
_store+33:	call	_ferror
_store+36:	pop	cx
_store+37:	push	di
_store+38:	call	0
_store+3b:	pop	cx
_store+3c:	cmp	*2(di),*0
_store+40:	je	_store+47
_store+42:	sub	*2(di),#1f82
_store+47:	cmp	*2(di),#ff
_store+4c:	jle	_store+56
_store+4e:	mov	ax,#8
_store+51:	push	ax
_store+52:	call	_ferror
_store+55:	pop	cx
_store+56:	movb	al,*11(di)
_store+59:	cbw
_store+5a:	and	ax,#7f
_store+5d:	mov	cx,ax
_store+5f:	movb	*-6(bp),cl
_store+62:	test	*2(di)
_store+65:	add	(bx+si),ax
_store+67:	je	_store+6d
_store+69:	orb	*-6(bp),*80
_store+6d:	mov	ax,*2(di)
_store+70:	sar	ax
_store+72:	and	ax,#7f
_store+75:	mov	cx,ax
_store+77:	movb	*-5(bp),cl
_store+7a:	cmp	(di),*0
_store+7d:	je	_store+83
_store+7f:	orb	*-5(bp),*80
_store+83:	movb	al,*10(di)
_store+86:	movb	*-7(bp),al
_store+89:	movb	al,*9(di)
_store+8c:	movb	*-8(bp),al
_store+8f:	mov	ax,#4
_store+92:	push	ax
_store+93:	push	*6(bp)
_store+96:	lea	ax,*-8(bp)
_store+99:	push	ax
_store+9a:	call	0
_store+9d:	add	sp,*6
_store+a0:	lea	sp,*-4(bp)
_store+a3:	pop	di
_store+a4:	pop	si
_store+a5:	pop	bp
_store+a6:	ret
_loadd:
_loadd:		push	bp
_loadd+1:	mov	bp,sp
_loadd+3:	push	si
_loadd+4:	push	di
_loadd+5:	mov	di,#4(bp)
_loadd+9:	movb	*4(di),*0
_loadd+d:	mov	ax,#8
_loadd+10:	push	ax
_loadd+11:	lea	ax,*5(di)
_loadd+14:	mov	si,ax
_loadd+16:	push	ax
_loadd+17:	push	*6(bp)
_loadd+1a:	call	0
_loadd+1d:	add	sp,*6
_loadd+20:	movb	al,*7(si)
_loadd+23:	cbw
_loadd+24:	test	ax,#80
_loadd+27:	je	_loadd+2f
_loadd+29:	mov	(di),#ffff
_loadd+2d:	j	_loadd+33
_loadd+2f:	mov	(di),#0
_loadd+33:	mov	ax,*6(si)
_loadd+36:	and	ax,#7ff0
_loadd+39:	mov	cx,#4
_loadd+3c:	sar	ax,cl
_loadd+3e:	mov	*2(di),ax
_loadd+41:	cmp	ax,#0
_loadd+44:	je	_loadd+4b
_loadd+46:	add	*2(di),#1c02
_loadd+4b:	andb	*11(di),*f
_loadd+4f:	cmp	*2(di),*0
_loadd+53:	je	_loadd+59
_loadd+55:	orb	*11(di),*10
_loadd+59:	push	di
_loadd+5a:	call	0
_loadd+5d:	pop	cx
_loadd+5e:	push	di
_loadd+5f:	call	0
_loadd+62:	pop	cx
_loadd+63:	pop	di
_loadd+64:	pop	si
_loadd+65:	pop	bp
_loadd+66:	ret
_stored:
_stored:	push	bp
_stored+1:	mov	bp,sp
_stored+3:	push	si
_stored+4:	push	di
_stored+5:	mov	di,#4(bp)
_stored+9:	mov	ax,#40
_stored+c:	push	ax
_stored+d:	push	di
_stored+e:	call	0
_stored+11:	add	sp,*4
_stored+14:	movb	al,*11(di)
_stored+17:	cbw
_stored+18:	test	ax,#80
_stored+1b:	je	_stored+34
_stored+1d:	push	di
_stored+1e:	call	0
_stored+21:	pop	cx
_stored+22:	inc	*2(di)
_stored+25:	cmp	*2(di),#3fff
_stored+2a:	jle	_stored+34
_stored+2c:	mov	ax,#8
_stored+2f:	push	ax
_stored+30:	call	_ferror
_stored+33:	pop	cx
_stored+34:	push	di
_stored+35:	call	0
_stored+38:	pop	cx
_stored+39:	push	di
_stored+3a:	call	0
_stored+3d:	pop	cx
_stored+3e:	cmp	*2(di),*0
_stored+42:	je	_stored+49
_stored+44:	sub	*2(di),#1c02
_stored+49:	cmp	*2(di),#7ff
_stored+4e:	jle	_stored+58
_stored+50:	mov	ax,#8
_stored+53:	push	ax
_stored+54:	call	_ferror
_stored+57:	pop	cx
_stored+58:	mov	ax,*2(di)
_stored+5b:	mov	cx,#4
_stored+5e:	shl	ax,cl
_stored+60:	and	ax,#7fff
_stored+63:	mov	*2(di),ax
_stored+66:	cmp	(di),*0
_stored+69:	je	_stored+70
_stored+6b:	or	*2(di),#8000
_stored+70:	lea	ax,*5(di)
_stored+73:	mov	si,ax
_stored+75:	movb	al,*11(di)
_stored+78:	cbw
_stored+79:	and	ax,#f
_stored+7c:	or	ax,*2(di)
_stored+7f:	mov	*6(si),ax
_stored+82:	mov	ax,#8
_stored+85:	push	ax
_stored+86:	push	*6(bp)
_stored+89:	push	si
_stored+8a:	call	0
_stored+8d:	add	sp,*6
_stored+90:	pop	di
_stored+91:	pop	si
_stored+92:	pop	bp
_stored+93:	ret
_idecode:
_idecode:	push	bp
_idecode+1:	mov	bp,sp
_idecode+3:	push	si
_idecode+4:	push	di
_idecode+5:	mov	di,#4(bp)
_idecode+9:	mov	si,#6(bp)
_idecode+d:	mov	ax,si
_idecode+f:	and	ax,#c0
_idecode+12:	cmp	ax,#c0
_idecode+15:	jne	_idecode+2b
_idecode+17:	mov	ax,si
_idecode+19:	and	ax,#ff
_idecode+1c:	mov	dx,di
_idecode+1e:	and	dx,#7
_idecode+22:	mov	cx,#8
_idecode+25:	shl	dx,cl
_idecode+27:	or	ax,dx
_idecode+29:	j	_idecode+38
_idecode+2b:	mov	ax,di
_idecode+2d:	and	ax,#7
_idecode+30:	mov	dx,si
_idecode+32:	and	dx,#38
_idecode+36:	or	ax,dx
_idecode+38:	pop	di
_idecode+39:	pop	si
_idecode+3a:	pop	bp
_idecode+3b:	ret
_oops:
_oops:		push	bp
_oops+1:	mov	bp,sp
_oops+3:	push	si
_oops+4:	push	di
_oops+5:	push	*4(bp)
_oops+8:	mov	ax,#d68
_oops+b:	push	ax
_oops+c:	call	0
_oops+f:	add	sp,*4
_oops+12:	mov	ax,#1
_oops+15:	push	ax
_oops+16:	call	_ferror
_oops+19:	pop	cx
_oops+1a:	pop	di
_oops+1b:	pop	si
_oops+1c:	pop	bp
_oops+1d:	ret
_ferror:
_ferror:	push	bp
_ferror+1:	mov	bp,sp
_ferror+3:	push	si
_ferror+4:	push	di
_ferror+5:	mov	ax,*4(bp)
_ferror+8:	or	14,ax
_ferror+c:	mov	bx,128
_ferror+10:	push	*-8(bx)
_ferror+13:	mov	ax,#8
_ferror+16:	push	ax
_ferror+17:	call	0
_ferror+1a:	add	sp,*4
_ferror+1d:	pop	di
_ferror+1e:	pop	si
_ferror+1f:	pop	bp
_ferror+20:	ret
_round:
_round:		push	bp
_round+1:	mov	bp,sp
_round+3:	push	si
_round+4:	push	di
_round+5:	sub	sp,*c
_round+8:	lea	ax,*-16(bp)
_round+b:	push	ax
_round+c:	call	0
_round+f:	pop	cx
_round+10:	mov	*-14(bp),#2000
_round+15:	movb	*-5(bp),*40
_round+19:	mov	ax,12
_round+1c:	and	ax,#c00
_round+1f:	j	_round+32
_round+21:	mov	bx,*4(bp)
_round+24:	mov	ax,(bx)
_round+26:	mov	*-16(bp),ax
_round+29:	j	_round+40
_round+2b:	mov	*-16(bp),#ffff
_round+30:	j	_round+40
_round+32:	or	ax,ax
_round+34:	je	_round+21
_round+36:	cmp	ax,#400
_round+39:	je	_round+2b
_round+3b:	cmp	ax,#c00
_round+3e:	je	_round+4d
_round+40:	lea	ax,*-16(bp)
_round+43:	push	ax
_round+44:	push	*4(bp)
_round+47:	call	0
_round+4a:	add	sp,*4
_round+4d:	lea	sp,*-4(bp)
_round+50:	pop	di
_round+51:	pop	si
_round+52:	pop	bp
_round+53:	ret

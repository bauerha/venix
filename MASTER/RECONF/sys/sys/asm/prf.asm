_printf:	push	bp
_printf+1:	mov	bp,sp
_printf+3:	push	si
_printf+4:	push	di
_printf+5:	push	cx
_printf+6:	lea	ax,*6(bp)
_printf+9:	mov	si,ax
_printf+b:	mov	bx,*4(bp)
_printf+e:	inc	*4(bp)
_printf+11:	movb	al,(bx)
_printf+13:	cbw
_printf+14:	mov	cx,ax
_printf+16:	movb	*-5(bp),cl
_printf+19:	cmpb	cl,*25
_printf+1c:	je	_printf+3d
_printf+1e:	cmpb	*-5(bp),*0
_printf+22:	je	_printf+9e
_printf+24:	cmpb	*-5(bp),*a
_printf+28:	jne	_printf+32
_printf+2a:	mov	ax,#d
_printf+2d:	push	ax
_printf+2e:	call	0
_printf+31:	pop	cx
_printf+32:	movb	al,*-5(bp)
_printf+35:	cbw
_printf+36:	push	ax
_printf+37:	call	0
_printf+3a:	pop	cx
_printf+3b:	j	_printf+b
_printf+3d:	mov	bx,*4(bp)
_printf+40:	movb	al,(bx)
_printf+42:	movb	*-5(bp),al
_printf+45:	inc	*4(bp)
_printf+48:	cmpb	*-5(bp),*73
_printf+4c:	jne	_printf+78
_printf+4e:	mov	di,(si)
_printf+50:	mov	bx,di
_printf+52:	inc	di
_printf+53:	movb	al,(bx)
_printf+55:	cbw
_printf+56:	mov	cx,ax
_printf+58:	movb	*-5(bp),cl
_printf+5b:	orb	cl,cl
_printf+5d:	je	_printf+9a
_printf+5f:	cmpb	*-5(bp),*a
_printf+63:	jne	_printf+6d
_printf+65:	mov	ax,#d
_printf+68:	push	ax
_printf+69:	call	0
_printf+6c:	pop	cx
_printf+6d:	movb	al,*-5(bp)
_printf+70:	cbw
_printf+71:	push	ax
_printf+72:	call	0
_printf+75:	pop	cx
_printf+76:	j	_printf+50
_printf+78:	cmpb	*-5(bp),*6f
_printf+7c:	jne	_printf+83
_printf+7e:	mov	ax,#8
_printf+81:	j	_printf+91
_printf+83:	cmpb	*-5(bp),*78
_printf+87:	jne	_printf+8e
_printf+89:	mov	ax,#10
_printf+8c:	j	_printf+91
_printf+8e:	mov	ax,#a
_printf+91:	push	ax
_printf+92:	push	(si)
_printf+94:	call	_printn
_printf+97:	add	sp,*4
_printf+9a:	inc	si
_printf+9b:	inc	si
_printf+9c:	j	_printf+3b
_printf+9e:	pop	cx
_printf+9f:	pop	di
_printf+a0:	pop	si
_printf+a1:	pop	bp
_printf+a2:	ret
_printn:
_printn:	push	bp
_printn+1:	mov	bp,sp
_printn+3:	push	si
_printn+4:	push	di
_printn+5:	mov	ax,*4(bp)
_printn+8:	xor	dx,dx
_printn+a:
data address not found
_printn+c:	push	es
_printn+d:	mov	di,ax
_printn+f:	or	ax,ax
_printn+11:	je	_printn+1d
_printn+13:	push	*6(bp)
_printn+16:	push	di
_printn+17:	call	_printn
_printn+1a:	add	sp,*4
_printn+1d:	mov	ax,*4(bp)
_printn+20:	xor	dx,dx
_printn+22:
data address not found
_printn+24:	push	es
_printn+25:	mov	si,dx
_printn+27:	cmp	dx,*a
_printn+2a:	jnl	_printn+36
_printn+2c:	lea	ax,*48(si)
_printn+2f:	push	ax
_printn+30:	call	0
_printn+33:	pop	cx
_printn+34:	j	_printn+3e
_printn+36:	lea	ax,*55(si)
_printn+39:	push	ax
_printn+3a:	call	0
_printn+3d:	pop	cx
_printn+3e:	pop	di
_printn+3f:	pop	si
_printn+40:	pop	bp
_printn+41:	ret
_panic:
_panic:		push	bp
_panic+1:	mov	bp,sp
_panic+3:	push	si
_panic+4:	push	di
_panic+5:	call	0
_panic+8:	push	*4(bp)
_panic+b:	mov	ax,#0
_panic+e:	push	ax
_panic+f:	call	0
_panic+12:	add	sp,*4
_panic+15:	call	0
_panic+18:	j	_panic+15
_prdev:
_prdev:		push	bp
_prdev+1:	mov	bp,sp
_prdev+3:	push	si
_prdev+4:	push	di
_prdev+5:	xor	di,di
_prdev+7:	mov	bx,di
_prdev+9:	mov	cx,#2
_prdev+c:	shl	bx,cl
_prdev+e:	cmp	#0(bx),*ff
_prdev+13:	je	_prdev+31
_prdev+15:	mov	bx,di
_prdev+17:	mov	cx,#2
_prdev+1a:	shl	bx,cl
_prdev+1c:	mov	ax,#0(bx)
_prdev+20:	movb	dl,*7(bp)
_prdev+23:	mov	cx,#8
_prdev+26:	shl	dx,cl
_prdev+28:	sar	dx,cl
_prdev+2a:	cmp	ax,dx
_prdev+2c:	je	_prdev+31
_prdev+2e:	inc	di
_prdev+2f:	j	_prdev+7
_prdev+31:	movb	al,*6(bp)
_prdev+34:	cbw
_prdev+35:	push	ax
_prdev+36:	mov	bx,di
_prdev+38:	mov	cx,#2
_prdev+3b:	shl	bx,cl
_prdev+3d:	push	#2(bx)
_prdev+41:	push	*4(bp)
_prdev+44:	mov	ax,#0
_prdev+47:	push	ax
_prdev+48:	call	0
_prdev+4b:	add	sp,*8
_prdev+4e:	pop	di
_prdev+4f:	pop	si
_prdev+50:	pop	bp
_prdev+51:	ret
_deverro:
_deverro:	push	bp
_deverro+1:	mov	bp,sp
_deverro+3:	push	si
_deverro+4:	push	di
_deverro+5:	mov	di,*4(bp)
_deverro+8:	push	*10(di)
_deverro+b:	mov	ax,#0
_deverro+e:	push	ax
_deverro+f:	call	_prdev
_deverro+12:	add	sp,*4
_deverro+15:	mov	bx,*4(bp)
_deverro+18:	mov	ax,(bx)
_deverro+1a:	test	ax,#1
_deverro+1d:	je	_deverro+24
_deverro+1f:	mov	si,#0
_deverro+22:	j	_deverro+27
_deverro+24:	mov	si,#0
_deverro+27:	push	*8(bp)
_deverro+2a:	push	*18(di)
_deverro+2d:	push	si
_deverro+2e:	push	*6(bp)
_deverro+31:	mov	ax,#0
_deverro+34:	push	ax
_deverro+35:	call	0
_deverro+38:	add	sp,*a
_deverro+3b:	pop	di
_deverro+3c:	pop	si
_deverro+3d:	pop	bp
_deverro+3e:	ret

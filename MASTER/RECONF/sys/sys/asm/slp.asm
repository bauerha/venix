_sleep:		push	bp
_sleep+1:	mov	bp,sp
_sleep+3:	push	si
_sleep+4:	push	di
_sleep+5:	mov	di,76
_sleep+9:	cmp	*6(bp),*0
_sleep+d:	jl	_sleep+55
_sleep+f:	call	0
_sleep+12:	mov	si,ax
_sleep+14:	call	0
_sleep+17:	or	ax,ax
_sleep+19:	je	_sleep+20
_sleep+1b:	call	0
_sleep+1e:	j	_sleep+53
_sleep+20:	mov	ax,*4(bp)
_sleep+23:	mov	*24(di),ax
_sleep+26:	movb	*2(di),*2
_sleep+2a:	mov	ax,*6(bp)
_sleep+2d:	mov	cx,ax
_sleep+2f:	movb	*3(di),cl
_sleep+32:	call	0
_sleep+35:	cmpb	0,*0
_sleep+3a:	je	_sleep+49
_sleep+3c:	movb	0,*0
_sleep+41:	mov	ax,#0
_sleep+44:	push	ax
_sleep+45:	call	_wakeup
_sleep+48:	pop	cx
_sleep+49:	call	_swtch
_sleep+4c:	call	0
_sleep+4f:	or	ax,ax
_sleep+51:	je	_sleep+72
_sleep+53:	j	_sleep+79
_sleep+55:	call	0
_sleep+58:	mov	si,ax
_sleep+5a:	mov	ax,*4(bp)
_sleep+5d:	mov	*24(di),ax
_sleep+60:	movb	*2(di),*1
_sleep+64:	mov	ax,*6(bp)
_sleep+67:	mov	cx,ax
_sleep+69:	movb	*3(di),cl
_sleep+6c:	call	0
_sleep+6f:	call	_swtch
_sleep+72:	push	si
_sleep+73:	call	0
_sleep+76:	pop	cx
_sleep+77:	j	_sleep+81
_sleep+79:	mov	ax,#ce
_sleep+7c:	push	ax
_sleep+7d:	call	0
_sleep+80:	pop	cx
_sleep+81:	pop	di
_sleep+82:	pop	si
_sleep+83:	pop	bp
_sleep+84:	ret
_wakeup:
_wakeup:	push	bp
_wakeup+1:	mov	bp,sp
_wakeup+3:	push	si
_wakeup+4:	push	di
_wakeup+5:	mov	di,#0
_wakeup+8:	mov	si,0
_wakeup+c:	mov	ax,*24(di)
_wakeup+f:	cmp	ax,*4(bp)
_wakeup+12:	jne	_wakeup+19
_wakeup+14:	push	di
_wakeup+15:	call	_setrun
_wakeup+18:	pop	cx
_wakeup+19:	add	di,*22
_wakeup+1c:	dec	si
_wakeup+1d:	jne	_wakeup+c
_wakeup+1f:	pop	di
_wakeup+20:	pop	si
_wakeup+21:	pop	bp
_wakeup+22:	ret
_setrun:
_setrun:	push	bp
_setrun+1:	mov	bp,sp
_setrun+3:	push	si
_setrun+4:	push	di
_setrun+5:	mov	di,*4(bp)
_setrun+8:	mov	*24(di),#0
_setrun+d:	andb	*2(di),*40
_setrun+11:	orb	*2(di),*3
_setrun+15:
data address not found
_setrun+17:	addb	(bx+di),al
_setrun+19:	je	_setrun+25
_setrun+1b:	cmpb	*3(di),*92
_setrun+1f:	jle	_setrun+25
_setrun+21:	movb	*3(di),*92
_setrun+25:	movb	al,*3(di)
_setrun+28:	cbw
_setrun+29:	movb	dl,0
_setrun+2d:	mov	cx,#8
_setrun+30:	shl	dx,cl
_setrun+32:	sar	dx,cl
_setrun+34:	cmp	ax,dx
_setrun+36:	jnl	_setrun+3c
_setrun+38:	incb	0
_setrun+3c:	cmpb	0,*0
_setrun+41:	je	_setrun+56
_setrun+43:
data address not found
_setrun+45:	addb	*117(bx+si),al
_setrun+48:	or	ax,#6c6
_setrun+4b:	addb	(bx+si),al
_setrun+4d:	addb	#0(bx+si),bh
_setrun+51:	push	ax
_setrun+52:	call	_wakeup
_setrun+55:	pop	cx
_setrun+56:	pop	di
_setrun+57:	pop	si
_setrun+58:	pop	bp
_setrun+59:	ret
_setpri:
_setpri:	push	bp
_setpri+1:	mov	bp,sp
_setpri+3:	push	si
_setpri+4:	push	di
_setpri+5:	mov	di,#4(bp)
_setpri+9:	movb	al,*6(di)
_setpri+c:	and	ax,#ff
_setpri+f:	shr	ax
_setpri+11:	mov	si,ax
_setpri+13:
data address not found
_setpri+15:	addb	(bx+di),al
_setpri+17:	je	_setpri+1e
_setpri+19:	add	si,*92
_setpri+1c:	j	_setpri+21
_setpri+1e:	add	si,*64
_setpri+21:	movb	al,*7(di)
_setpri+24:	cbw
_setpri+25:	add	si,ax
_setpri+27:	cmp	si,*7f
_setpri+2a:	jle	_setpri+2f
_setpri+2c:	mov	si,#7f
_setpri+2f:	movb	al,0
_setpri+32:	cbw
_setpri+33:	cmp	si,ax
_setpri+35:	jnl	_setpri+3b
_setpri+37:	incb	0
_setpri+3b:	mov	cx,si
_setpri+3d:	movb	*3(di),cl
_setpri+40:	pop	di
_setpri+41:	pop	si
_setpri+42:	pop	bp
_setpri+43:	ret
_sched:
_sched:		push	bp
_sched+1:	mov	bp,sp
_sched+3:	push	si
_sched+4:	push	di
_sched+5:	sub	sp,*8
_sched+8:	mov	si,#b1e0
_sched+b:	call	0
_sched+e:	mov	di,#22
_sched+11:	cmp	di,0
_sched+15:	jnb	_sched+49
_sched+17:
data address not found
_sched+19:	addb	*117(bx+si),al
_sched+1c:	daa
_sched+1d:	cmpb	*2(di),*3
_sched+21:	je	_sched+2f
_sched+23:	cmpb	*2(di),*43
_sched+27:	jne	_sched+44
_sched+29:	cmpb	*3(di),*0
_sched+2d:	jnle	_sched+44
_sched+2f:	movb	al,*5(di)
_sched+32:	and	ax,#ff
_sched+35:	cmp	ax,si
_sched+37:	jle	_sched+44
_sched+39:	mov	*-6(bp),di
_sched+3c:	movb	al,*5(di)
_sched+3f:	and	ax,#ff
_sched+42:	mov	si,ax
_sched+44:	add	di,*22
_sched+47:	j	_sched+11
_sched+49:	cmp	si,#b1e0
_sched+4d:	jne	_sched+63
_sched+4f:	incb	0
_sched+53:	mov	ax,#ff9c
_sched+56:	push	ax
_sched+57:	mov	ax,#0
_sched+5a:	push	ax
_sched+5b:	call	0
_sched+5e:	add	sp,*4
_sched+61:	j	_sched+8
_sched+63:	call	0
_sched+66:	push	*-6(bp)
_sched+69:	call	_swapin
_sched+6c:	pop	cx
_sched+6d:	or	ax,ax
_sched+6f:	jne	_sched+61
_sched+71:	mov	*-10(bp),#0
_sched+76:	mov	*-8(bp),#0
_sched+7b:	call	0
_sched+7e:	mov	di,#22
_sched+81:	cmp	di,0
_sched+85:	jb	_sched+8a
_sched+87:	jmp	261
_sched+8a:	mov	ax,(di)
_sched+8c:	and	ax,#607f
_sched+8f:	cmp	ax,#4000
_sched+92:	jne	_sched+b8
_sched+94:	cmp	*20(di),*0
_sched+98:	je	_sched+a7
_sched+9a:	mov	bx,*20(di)
_sched+9d:	movb	al,(bx)
_sched+9f:	and	ax,#ff
_sched+a2:	test	ax,#40
_sched+a5:	jne	_sched+f5
_sched+a7:	cmp	*22(di),*0
_sched+ab:	je	_sched+ba
_sched+ad:	mov	bx,*22(di)
_sched+b0:	movb	al,(bx)
_sched+b2:	and	ax,#ff
_sched+b5:	test	ax,#40
_sched+b8:	jne	_sched+f5
_sched+ba:	cmpb	*2(di),*6
_sched+be:	jnb	_sched+c6
_sched+c0:	cmpb	*2(di),*2
_sched+c4:	jnbe	_sched+eb
_sched+c6:	movb	al,*3(di)
_sched+c9:	cbw
_sched+ca:	mov	cx,#2
_sched+cd:	sar	ax,cl
_sched+cf:	movb	dl,*5(di)
_sched+d2:	and	dx,#ff
_sched+d6:	add	ax,dx
_sched+d8:	mov	*-12(bp),ax
_sched+db:	cmp	*-8(bp),ax
_sched+de:	jnl	25b
_sched+e0:	mov	*-6(bp),di
_sched+e3:	mov	ax,*-12(bp)
_sched+e6:	mov	*-8(bp),ax
_sched+e9:	j	25b
_sched+eb:	cmp	*-8(bp),*0
_sched+ef:	jnle	25b
_sched+f1:	cmpb	*2(di),*3
_sched+f5:	jne	25b
_sched+f7:	movb	al,*7(di)
_sched+fa:	cbw
_sched+fb:	movb	dl,*5(di)
_sched+fe:	and	dx,#ff
248:		add	dx,ax
24a:		mov	*-12(bp),dx
24d:		cmp	dx,*-10(bp)
250:		jle	25b
252:		mov	*-6(bp),di
255:		mov	ax,*-12(bp)
258:		mov	*-10(bp),ax
25b:		add	di,*22
25e:		jmp	_sched+81
261:		call	0
264:		cmp	*-8(bp),*0
268:		jnle	275
26a:		cmp	si,*2
26d:		jl	298
26f:		cmp	*-10(bp),*2
273:		jl	298
275:		mov	di,*-6(bp)
278:		and	(di),#bfff
27c:		xor	ax,ax
27e:		push	ax
27f:		mov	ax,#1
282:		push	ax
283:		push	di
284:		call	0
287:		add	sp,*6
28a:		or	ax,ax
28c:		jne	291
28e:		jmp	_sched+61
291:		or	(di),#4000
295:		jmp	_sched+4f
298:		call	0
29b:		incb	0
29f:		mov	ax,#ff9c
2a2:		push	ax
2a3:		mov	ax,#0
2a6:		push	ax
2a7:		call	0
2aa:		add	sp,*4
2ad:		jmp	_sched+61
_swapin:
_swapin:	push	bp
_swapin+1:	mov	bp,sp
_swapin+3:	push	si
_swapin+4:	push	di
_swapin+5:	push	cx
_swapin+6:	mov	di,#4(bp)
_swapin+a:	mov	si,*20(di)
_swapin+d:	or	si,si
_swapin+f:	je	_swapin+1e
_swapin+11:	push	si
_swapin+12:	call	_xswapin
_swapin+15:	pop	cx
_swapin+16:	or	ax,ax
_swapin+18:	jne	_swapin+1e
_swapin+1a:	xor	ax,ax
_swapin+1c:	j	_swapin+62
_swapin+1e:	mov	si,*22(di)
_swapin+21:	or	si,si
_swapin+23:	je	_swapin+2e
_swapin+25:	push	si
_swapin+26:	call	_xswapin
_swapin+29:	pop	cx
_swapin+2a:	or	ax,ax
_swapin+2c:	je	_swapin+54
_swapin+2e:	push	*14(di)
_swapin+31:	mov	ax,#0
_swapin+34:	push	ax
_swapin+35:	call	0
_swapin+38:	add	sp,*4
_swapin+3b:	mov	cx,#5
_swapin+3e:	shl	ax,cl
_swapin+40:	mov	*-6(bp),ax
_swapin+43:	or	ax,ax
_swapin+45:	jne	_swapin+64
_swapin+47:	mov	ax,#1
_swapin+4a:	push	ax
_swapin+4b:	push	*22(di)
_swapin+4e:	call	0
_swapin+51:	add	sp,*4
_swapin+54:	xor	ax,ax
_swapin+56:	push	ax
_swapin+57:	push	*20(di)
_swapin+5a:	call	0
_swapin+5d:	add	sp,*4
_swapin+60:	xor	ax,ax
_swapin+62:	j	_swapin+c5
_swapin+64:	mov	ax,#1
_swapin+67:	push	ax
_swapin+68:	push	*16(di)
_swapin+6b:	push	*-6(bp)
_swapin+6e:	push	*12(di)
_swapin+71:	call	0
_swapin+74:	add	sp,*8
_swapin+77:	cmp	*18(di),*0
_swapin+7b:	je	_swapin+a0
_swapin+7d:	mov	ax,#1
_swapin+80:	push	ax
_swapin+81:	push	*18(di)
_swapin+84:	mov	ax,#82
_swapin+87:	sub	ax,*18(di)
_swapin+8a:	mov	cx,#5
_swapin+8d:	shl	ax,cl
_swapin+8f:	add	ax,*-6(bp)
_swapin+92:	push	ax
_swapin+93:	mov	ax,*12(di)
_swapin+96:	add	ax,*16(di)
_swapin+99:	push	ax
_swapin+9a:	call	0
_swapin+9d:	add	sp,*8
_swapin+a0:	push	*12(di)
_swapin+a3:	mov	ax,*16(di)
_swapin+a6:	add	ax,*18(di)
_swapin+a9:	push	ax
_swapin+aa:	mov	ax,#0
_swapin+ad:	push	ax
_swapin+ae:	call	0
_swapin+b1:	add	sp,*6
_swapin+b4:	mov	ax,*-6(bp)
_swapin+b7:	mov	*12(di),ax
_swapin+ba:	or	(di),#4000
_swapin+be:	movb	*5(di),*0
_swapin+c2:	mov	ax,#1
_swapin+c5:	pop	cx
_swapin+c6:	pop	di
_swapin+c7:	pop	si
_swapin+c8:	pop	bp
_swapin+c9:	ret
_xswapin:
_xswapin:	push	bp
_xswapin+1:	mov	bp,sp
_xswapin+3:	push	si
_xswapin+4:	push	di
_xswapin+5:	mov	di,#4(bp)
_xswapin+9:	push	di
_xswapin+a:	call	0
_xswapin+d:	pop	cx
_xswapin+e:	cmp	*6(di),*0
_xswapin+12:	jne	_xswapin+49
_xswapin+14:	push	*8(di)
_xswapin+17:	mov	ax,#0
_xswapin+1a:	push	ax
_xswapin+1b:	call	0
_xswapin+1e:	add	sp,*4
_xswapin+21:	mov	cx,#5
_xswapin+24:	shl	ax,cl
_xswapin+26:	mov	si,ax
_xswapin+28:	or	ax,ax
_xswapin+2a:	jne	_xswapin+35
_xswapin+2c:	push	di
_xswapin+2d:	call	0
_xswapin+30:	pop	cx
_xswapin+31:	xor	ax,ax
_xswapin+33:	j	_xswapin+54
_xswapin+35:	mov	ax,#1
_xswapin+38:	push	ax
_xswapin+39:	push	*8(di)
_xswapin+3c:	push	si
_xswapin+3d:	push	*4(di)
_xswapin+40:	call	0
_xswapin+43:	add	sp,*8
_xswapin+46:	mov	*6(di),si
_xswapin+49:	incb	*1(di)
_xswapin+4c:	push	di
_xswapin+4d:	call	0
_xswapin+50:	pop	cx
_xswapin+51:	mov	ax,#1
_xswapin+54:	pop	di
_xswapin+55:	pop	si
_xswapin+56:	pop	bp
_xswapin+57:	ret
_swtch:
_swtch:		push	bp
_swtch+1:	mov	bp,sp
_swtch+3:	push	si
_swtch+4:	push	di
_swtch+5:	cmp	788,*0
_swtch+a:	jne	_swtch+12
_swtch+c:	mov	788,#0
_swtch+12:	mov	ax,#0
_swtch+15:	push	ax
_swtch+16:	call	0
_swtch+19:	pop	cx
_swtch+1a:	call	0
_swtch+1d:	movb	0,*0
_swtch+22:	mov	di,788
_swtch+26:	mov	788,#0
_swtch+2c:	mov	0,#80
_swtch+32:	mov	si,0
_swtch+36:	add	di,*22
_swtch+39:	cmp	di,0
_swtch+3d:	jb	_swtch+42
_swtch+3f:	mov	di,#0
_swtch+42:
data address not found
_swtch+44:	addb	*116(bx+si),al
_swtch+47:	daa
_swtch+48:	cmpb	*2(di),*3
_swtch+4c:	je	_swtch+5a
_swtch+4e:	cmpb	*2(di),*43
_swtch+52:	jne	_swtch+6f
_swtch+54:	cmpb	*3(di),*0
_swtch+58:	jnle	_swtch+6f
_swtch+5a:	movb	al,*3(di)
_swtch+5d:	cbw
_swtch+5e:	cmp	ax,0
_swtch+62:	jnl	_swtch+6f
_swtch+64:	mov	788,di
_swtch+68:	movb	al,*3(di)
_swtch+6b:	cbw
_swtch+6c:	mov	0,ax
_swtch+6f:	dec	si
_swtch+70:	jne	_swtch+36
_swtch+72:	cmp	788,*0
_swtch+77:	jne	_swtch+82
_swtch+79:	mov	788,di
_swtch+7d:	call	0
_swtch+80:	j	_swtch+1d
_swtch+82:	mov	di,788
_swtch+86:	mov	ax,0
_swtch+89:	mov	cx,ax
_swtch+8b:	movb	0,cl
_swtch+8f:	cmp	76,di
_swtch+93:	je	_swtch+b7
_swtch+95:	mov	bx,76
_swtch+99:	mov	ax,(bx)
_swtch+9b:	test	ax,#1000
_swtch+9e:	jne	_swtch+ae
_swtch+a0:	call	0
_swtch+a3:	mov	bx,76
_swtch+a7:	push	*12(bx)
_swtch+aa:	call	0
_swtch+ad:	pop	cx
_swtch+ae:	push	*12(di)
_swtch+b1:	call	0
_swtch+b4:	pop	cx
_swtch+b5:	j	_swtch+bf
_swtch+b7:	mov	ax,#0
_swtch+ba:	push	ax
_swtch+bb:	call	0
_swtch+be:	pop	cx
_swtch+bf:	call	0
_swtch+c2:
data address not found
_swtch+c4:	addb	(bx+si),dl
_swtch+c6:	je	_swtch+d4
_swtch+c8:	and	(di),#efff
_swtch+cc:	mov	ax,#d2
_swtch+cf:	push	ax
_swtch+d0:	call	0
_swtch+d3:	pop	cx
_swtch+d4:	mov	ax,#1
_swtch+d7:	pop	di
_swtch+d8:	pop	si
_swtch+d9:	pop	bp
_swtch+da:	ret
_newproc:
_newproc:	push	bp
_newproc+1:	mov	bp,sp
_newproc+3:	push	si
_newproc+4:	push	di
_newproc+5:	sub	sp,*a
_newproc+8:	mov	*-6(bp),#0
_newproc+d:	inc	0
_newproc+11:	cmp	0,#7530
_newproc+17:	jle	_newproc+21
_newproc+19:	mov	0,#0
_newproc+1f:	j	_newproc+d
_newproc+21:	mov	di,#0
_newproc+24:	cmp	di,0
_newproc+28:	jnb	_newproc+47
_newproc+2a:	cmpb	*2(di),*0
_newproc+2e:	jne	_newproc+39
_newproc+30:	cmp	*-6(bp),*0
_newproc+34:	jne	_newproc+39
_newproc+36:	mov	*-6(bp),di
_newproc+39:	mov	ax,*8(di)
_newproc+3c:	cmp	ax,0
_newproc+40:	je	_newproc+d
_newproc+42:	add	di,*22
_newproc+45:	j	_newproc+24
_newproc+47:	mov	di,*-6(bp)
_newproc+4a:	or	di,di
_newproc+4c:	jne	_newproc+56
_newproc+4e:	mov	ax,#0
_newproc+51:	push	ax
_newproc+52:	call	0
_newproc+55:	pop	cx
_newproc+56:	mov	si,76
_newproc+5a:	mov	*-8(bp),si
_newproc+5d:	movb	*2(di),*3
_newproc+61:	mov	(di),#4000
_newproc+65:	movb	al,*4(si)
_newproc+68:	movb	*4(di),al
_newproc+6b:	mov	ax,*26(si)
_newproc+6e:	mov	*26(di),ax
_newproc+71:	movb	al,*7(si)
_newproc+74:	movb	*7(di),al
_newproc+77:	mov	ax,*20(si)
_newproc+7a:	mov	*20(di),ax
_newproc+7d:	mov	ax,*22(si)
_newproc+80:	mov	*22(di),ax
_newproc+83:	mov	ax,0
_newproc+86:	mov	*8(di),ax
_newproc+89:	mov	ax,*8(si)
_newproc+8c:	mov	*10(di),ax
_newproc+8f:	movb	*5(di),*0
_newproc+93:	movb	*6(di),*0
_newproc+97:	mov	ax,*16(si)
_newproc+9a:	mov	*16(di),ax
_newproc+9d:	mov	ax,*18(si)
_newproc+a0:	mov	*18(di),ax
_newproc+a3:	mov	si,#a6
_newproc+a6:	cmp	si,#ce
_newproc+aa:	jnb	_newproc+bb
_newproc+ac:	mov	bx,si
_newproc+ae:	inc	si
_newproc+af:	inc	si
_newproc+b0:	mov	di,(bx)
_newproc+b2:	or	di,di
_newproc+b4:	je	_newproc+a6
_newproc+b6:	incb	*1(di)
_newproc+b9:	j	_newproc+a6
_newproc+bb:	mov	bx,*-8(bp)
_newproc+be:	mov	di,*20(bx)
_newproc+c1:	or	di,di
_newproc+c3:	je	_newproc+cb
_newproc+c5:	inc	*2(di)
_newproc+c8:	incb	*1(di)
_newproc+cb:	mov	bx,*-8(bp)
_newproc+ce:	mov	di,*22(bx)
_newproc+d1:	or	di,di
_newproc+d3:	je	_newproc+db
_newproc+d5:	inc	*2(di)
_newproc+d8:	incb	*1(di)
_newproc+db:	mov	bx,80
_newproc+df:	incb	*1(bx)
_newproc+e2:	cmp	82,*0
_newproc+e7:	je	_newproc+f0
_newproc+e9:	mov	bx,82
_newproc+ed:	incb	*1(bx)
_newproc+f0:	call	0
_newproc+f3:	mov	ax,#0
_newproc+f6:	push	ax
_newproc+f7:	call	0
_newproc+fa:	pop	cx
_newproc+fb:	mov	di,*-6(bp)
_newproc+fe:	mov	76,di
5af:		mov	si,*-8(bp)
5b2:		mov	ax,*14(si)
5b5:		mov	*-14(bp),ax
5b8:		mov	ax,*12(si)
5bb:		mov	*-10(bp),ax
5be:		mov	ax,*-14(bp)
5c1:		mov	*14(di),ax
5c4:		push	*-14(bp)
5c7:		mov	ax,#0
5ca:		push	ax
5cb:		call	0
5ce:		add	sp,*4
5d1:		mov	cx,#5
5d4:		shl	ax,cl
5d6:		mov	*-12(bp),ax
5d9:		or	ax,ax
5db:		jne	621
5dd:		movb	*2(si),*4
5e1:		mov	ax,*-10(bp)
5e4:		mov	*12(di),ax
5e7:		mov	ax,#d2
5ea:		push	ax
5eb:		call	0
5ee:		pop	cx
5ef:		push	*-10(bp)
5f2:		call	0
5f5:		pop	cx
5f6:		xor	ax,ax
5f8:		push	ax
5f9:		xor	ax,ax
5fb:		push	ax
5fc:		push	di
5fd:		call	0
600:		add	sp,*6
603:		or	ax,ax
605:		je	617
607:		mov	ax,#ff9b
60a:		push	ax
60b:		mov	ax,#0
60e:		push	ax
60f:		call	0
612:		add	sp,*4
615:		j	5f6
617:		or	(di),#1000
61b:		movb	*2(si),*3
61f:		j	65c
621:		push	*-10(bp)
624:		call	0
627:		pop	cx
628:		mov	ax,*-12(bp)
62b:		mov	*12(di),ax
62e:		mov	ax,*-14(bp)
631:		dec	*-14(bp)
634:		or	ax,ax
636:		je	65c
638:		push	*-12(bp)
63b:		push	*-10(bp)
63e:		call	0
641:		add	sp,*4
644:		mov	ax,#1
647:		mov	cx,#5
64a:		shl	ax,cl
64c:		add	*-10(bp),ax
64f:		mov	ax,#1
652:		mov	cx,#5
655:		shl	ax,cl
657:		add	*-12(bp),ax
65a:		j	62e
65c:		mov	76,si
660:		xor	ax,ax
662:		lea	sp,*-4(bp)
665:		pop	di
666:		pop	si
667:		pop	bp
668:		ret
_expand:
_expand:	push	bp
_expand+1:	mov	bp,sp
_expand+3:	push	si
_expand+4:	push	di
_expand+5:	sub	sp,*8
_expand+8:	mov	di,76
_expand+c:	mov	ax,*14(di)
_expand+f:	mov	*-10(bp),ax
_expand+12:	mov	ax,*4(bp)
_expand+15:	mov	*14(di),ax
_expand+18:	mov	ax,*12(di)
_expand+1b:	mov	*-12(bp),ax
_expand+1e:	mov	ax,*-10(bp)
_expand+21:	cmp	ax,*4(bp)
_expand+24:	jl	_expand+48
_expand+26:	mov	ax,*-12(bp)
_expand+29:	mov	cx,#5
_expand+2c:	shr	ax,cl
_expand+2e:	add	ax,*4(bp)
_expand+31:	push	ax
_expand+32:	mov	ax,*-10(bp)
_expand+35:	sub	ax,*4(bp)
_expand+38:	push	ax
_expand+39:	mov	ax,#0
_expand+3c:	push	ax
_expand+3d:	call	0
_expand+40:	add	sp,*6
_expand+43:	mov	ax,#1
_expand+46:	j	_expand+c1
_expand+48:	mov	si,*4(bp)
_expand+4b:	mov	ax,*20(di)
_expand+4e:	mov	*-6(bp),ax
_expand+51:	or	ax,ax
_expand+53:	je	_expand+5d
_expand+55:	mov	bx,*-6(bp)
_expand+58:	mov	ax,*8(bx)
_expand+5b:	add	si,ax
_expand+5d:	mov	ax,*22(di)
_expand+60:	mov	*-6(bp),ax
_expand+63:	or	ax,ax
_expand+65:	je	_expand+6f
_expand+67:	mov	bx,*-6(bp)
_expand+6a:	mov	ax,*8(bx)
_expand+6d:	add	si,ax
_expand+6f:	cmp	si,0
_expand+73:	jnle	_expand+b9
_expand+75:	push	*4(bp)
_expand+78:	mov	ax,#0
_expand+7b:	push	ax
_expand+7c:	call	0
_expand+7f:	add	sp,*4
_expand+82:	mov	cx,#5
_expand+85:	shl	ax,cl
_expand+87:	mov	si,ax
_expand+89:	or	si,si
_expand+8b:	jne	_expand+ca
_expand+8d:	mov	ax,#0
_expand+90:	push	ax
_expand+91:	call	0
_expand+94:	pop	cx
_expand+95:	mov	ax,#d2
_expand+98:	push	ax
_expand+99:	call	0
_expand+9c:	pop	cx
_expand+9d:	call	0
_expand+a0:	push	*-12(bp)
_expand+a3:	call	0
_expand+a6:	pop	cx
_expand+a7:	push	*-10(bp)
_expand+aa:	mov	ax,#1
_expand+ad:	push	ax
_expand+ae:	push	di
_expand+af:	call	0
_expand+b2:	add	sp,*6
_expand+b5:	or	ax,ax
_expand+b7:	je	_expand+c3
_expand+b9:	mov	ax,*-10(bp)
_expand+bc:	mov	*14(di),ax
_expand+bf:	xor	ax,ax
_expand+c1:	j	781
_expand+c3:	or	(di),#1000
_expand+c7:	call	_swtch
_expand+ca:	mov	*12(di),si
_expand+cd:	mov	*-8(bp),#0
_expand+d2:	mov	ax,*-8(bp)
_expand+d5:	cmp	ax,*-10(bp)
_expand+d8:	jnl	_expand+fc
_expand+da:	push	si
_expand+db:	mov	ax,*-8(bp)
_expand+de:	mov	cx,#5
_expand+e1:	shl	ax,cl
_expand+e3:	add	ax,*-12(bp)
_expand+e6:	push	ax
_expand+e7:	call	0
_expand+ea:	add	sp,*4
_expand+ed:	mov	ax,#1
_expand+f0:	mov	cx,#5
_expand+f3:	shl	ax,cl
_expand+f5:	add	si,ax
_expand+f7:	inc	*-8(bp)
_expand+fa:	j	_expand+d2
_expand+fc:	mov	ax,*-12(bp)
768:		mov	cx,#5
76b:		shr	ax,cl
76d:		push	ax
76e:		push	*-10(bp)
771:		mov	ax,#0
774:		push	ax
775:		call	0
778:		add	sp,*6
77b:		call	0
77e:		mov	ax,#1
781:		lea	sp,*-4(bp)
784:		pop	di
785:		pop	si
786:		pop	bp
787:		ret

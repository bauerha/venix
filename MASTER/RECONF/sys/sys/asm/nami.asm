_namei:		push	bp
_namei+1:	mov	bp,sp
_namei+3:	push	si
_namei+4:	push	di
_namei+5:	sub	sp,*8
_namei+8:	mov	di,80
_namei+c:	call	*4(bp)
_namei+f:	mov	cx,ax
_namei+11:	movb	*-5(bp),cl
_namei+14:	cmpb	cl,*2f
_namei+17:	jne	_namei+25
_namei+19:	mov	di,82
_namei+1d:	or	di,di
_namei+1f:	jne	_namei+25
_namei+21:	mov	di,0
_namei+25:	push	*4(di)
_namei+28:	push	*2(di)
_namei+2b:	call	0
_namei+2e:	add	sp,*4
_namei+31:	cmpb	*-5(bp),*2f
_namei+35:	jne	_namei+41
_namei+37:	call	*4(bp)
_namei+3a:	mov	cx,ax
_namei+3c:	movb	*-5(bp),cl
_namei+3f:	j	_namei+31
_namei+41:	cmpb	*-5(bp),*0
_namei+45:	jne	_namei+52
_namei+47:	cmp	*6(bp),*0
_namei+4b:	je	_namei+52
_namei+4d:	movb	71,*2
_namei+52:	cmpb	71,*0
_namei+57:	jne	_namei+bf
_namei+59:	cmpb	*-5(bp),*0
_namei+5d:	jne	_namei+64
_namei+5f:	mov	ax,di
_namei+61:	jmp	154
_namei+64:	mov	si,#84
_namei+67:	cmpb	*-5(bp),*2f
_namei+6b:	je	_namei+9c
_namei+6d:	cmpb	*-5(bp),*0
_namei+71:	je	_namei+9c
_namei+73:	cmpb	71,*0
_namei+78:	jne	_namei+9c
_namei+7a:	cmpb	*-5(bp),*20
_namei+7e:	jnbe	_namei+84
_namei+80:	movb	*-5(bp),*23
_namei+84:	cmp	si,#92
_namei+88:	jnb	_namei+92
_namei+8a:	mov	bx,si
_namei+8c:	inc	si
_namei+8d:	movb	al,*-5(bp)
_namei+90:	movb	(bx),al
_namei+92:	call	*4(bp)
_namei+95:	mov	cx,ax
_namei+97:	movb	*-5(bp),cl
_namei+9a:	j	_namei+67
_namei+9c:	cmp	si,#92
_namei+a0:	jnb	_namei+aa
_namei+a2:	mov	bx,si
_namei+a4:	inc	si
_namei+a5:	movb	(bx),*0
_namei+a8:	j	_namei+9c
_namei+aa:	cmpb	*-5(bp),*2f
_namei+ae:	jne	_namei+ba
_namei+b0:	call	*4(bp)
_namei+b3:	mov	cx,ax
_namei+b5:	movb	*-5(bp),cl
_namei+b8:	j	_namei+aa
_namei+ba:	cmpb	71,*0
_namei+bf:	jne	_namei+e1
_namei+c1:	mov	ax,*6(di)
_namei+c4:	and	ax,#6000
_namei+c7:	cmp	ax,#4000
_namei+ca:	je	_namei+d1
_namei+cc:	movb	71,*14
_namei+d1:	mov	ax,#40
_namei+d4:	push	ax
_namei+d5:	push	di
_namei+d6:	call	0
_namei+d9:	add	sp,*4
_namei+dc:	cmpb	71,*0
_namei+e1:	jne	138
_namei+e3:	mov	7e,#0
_namei+e9:	mov	7c,#0
_namei+ef:	movb	70,*1
_namei+f4:	mov	*-12(bp),#0
_namei+f9:	mov	ax,*12(di)
_namei+fc:	xor	dx,dx
_namei+fe:	mov	cx,#10
101:
data address not found
103:		mov	7a,ax
106:		mov	*-10(bp),#0
10b:		cmp	7a,*0
110:		jne	15e
112:		cmp	*-10(bp),*0
116:		je	11f
118:		push	*-10(bp)
11b:		call	0
11e:		pop	cx
11f:		cmp	*6(bp),*1
123:		jne	157
125:		cmpb	*-5(bp),*0
129:		jne	157
12b:		mov	ax,#80
12e:		push	ax
12f:		push	di
130:		call	0
133:		add	sp,*4
136:		or	ax,ax
138:		jne	15c
13a:		mov	a4,di
13e:		cmp	*-12(bp),*0
142:		je	14f
144:		mov	ax,*-12(bp)
147:		sub	ax,#10
14a:		mov	7e,ax
14d:		j	152
14f:		orb	(di),*2
152:		xor	ax,ax
154:		jmp	237
157:		movb	71,*2
15c:		j	1a2
15e:
data address not found
160:		jle	162
162:		inc	(bx+di)
164:		jne	1a5
166:		cmp	*-10(bp),*0
16a:		je	173
16c:		push	*-10(bp)
16f:		call	0
172:		pop	cx
173:		mov	ax,7e
176:		xor	dx,dx
178:		mov	cx,#200
17b:
data address not found
17d:		push	ax
17e:		push	di
17f:		call	0
182:		add	sp,*4
185:		push	ax
186:		push	*2(di)
189:		call	0
18c:		add	sp,*4
18f:		mov	*-10(bp),ax
192:		mov	bx,ax
194:		mov	ax,(bx)
196:		test	ax,#4
199:		je	1a5
19b:		push	*-10(bp)
19e:		call	0
1a1:		pop	cx
1a2:		jmp	2af
1a5:		mov	ax,#10
1a8:		push	ax
1a9:		mov	ax,#94
1ac:		push	ax
1ad:		mov	bx,*-10(bp)
1b0:		mov	ax,*14(bx)
1b3:		mov	dx,7e
1b7:		and	dx,#1ff
1bb:		add	ax,dx
1bd:		push	ax
1be:		call	0
1c1:		add	sp,*6
1c4:		add	7e,*10
1c9:		dec	7a
1cd:		cmp	94,*0
1d2:		jne	1e6
1d4:		cmp	*-12(bp),*0
1d8:		je	1dd
1da:		jmp	10b
1dd:		mov	ax,7e
1e0:		mov	*-12(bp),ax
1e3:		jmp	10b
1e6:		mov	si,#84
1e9:		cmp	si,#92
1ed:		jnb	20d
1ef:		movb	al,(si)
1f1:		cbw
1f2:		mov	dx,#96
1f5:		sub	dx,#84
1f9:		add	dx,si
1fb:		mov	bx,dx
1fd:		movb	dl,(bx)
1ff:		mov	cx,#8
202:		shl	dx,cl
204:		sar	dx,cl
206:		cmp	ax,dx
208:		jne	1d8
20a:		inc	si
20b:		j	1e9
20d:		cmp	*-10(bp),*0
211:		je	21a
213:		push	*-10(bp)
216:		call	0
219:		pop	cx
21a:		cmp	*6(bp),*2
21e:		jne	239
220:		cmpb	*-5(bp),*0
224:		jne	239
226:		mov	ax,#80
229:		push	ax
22a:		push	di
22b:		call	0
22e:		add	sp,*4
231:		or	ax,ax
233:		jne	2af
235:		mov	ax,di
237:		j	2ad
239:		mov	ax,*2(di)
23c:		mov	*-10(bp),ax
23f:		cmp	94,*1
244:		jne	290
246:		cmp	*4(di),*1
24a:		jne	290
24c:		cmpb	97,*2e
251:		jne	290
253:		mov	*-8(bp),#6
258:		mov	ax,*-8(bp)
25b:		cmp	ax,0
25f:		jnb	290
261:		mov	bx,*-8(bp)
264:		cmp	*2(bx),*0
268:		je	28a
26a:		mov	bx,*-8(bp)
26d:		mov	ax,(bx)
26f:		cmp	ax,*-10(bp)
272:		jne	28a
274:		push	di
275:		call	0
278:		pop	cx
279:		mov	bx,*-8(bp)
27c:		mov	di,*4(bx)
27f:		incb	*1(di)
282:		push	di
283:		call	0
286:		pop	cx
287:		jmp	_namei+c1
28a:		add	*-8(bp),*6
28e:		j	258
290:		push	di
291:		call	0
294:		pop	cx
295:		push	94
299:		push	*-10(bp)
29c:		call	0
29f:		add	sp,*4
2a2:		mov	di,ax
2a4:		or	di,di
2a6:		je	2ab
2a8:		jmp	_namei+52
2ab:		xor	ax,ax
2ad:		j	2b6
2af:		push	di
2b0:		call	0
2b3:		pop	cx
2b4:		xor	ax,ax
2b6:		lea	sp,*-4(bp)
2b9:		pop	di
2ba:		pop	si
2bb:		pop	bp
2bc:		ret
_schar:
_schar:		push	bp
_schar+1:	mov	bp,sp
_schar+3:	push	si
_schar+4:	push	di
_schar+5:	mov	bx,92
_schar+9:	movb	al,(bx)
_schar+b:	cbw
_schar+c:	inc	92
_schar+10:	pop	di
_schar+11:	pop	si
_schar+12:	pop	bp
_schar+13:	ret
_uchar:
_uchar:		push	bp
_uchar+1:	mov	bp,sp
_uchar+3:	push	si
_uchar+4:	push	di
_uchar+5:	mov	ax,92
_uchar+8:	inc	92
_uchar+c:	push	ax
_uchar+d:	call	0
_uchar+10:	pop	cx
_uchar+11:	mov	di,ax
_uchar+13:	or	di,di
_uchar+15:	jnl	_uchar+1c
_uchar+17:	movb	71,*e
_uchar+1c:	mov	ax,di
_uchar+1e:	pop	di
_uchar+1f:	pop	si
_uchar+20:	pop	bp
_uchar+21:	ret

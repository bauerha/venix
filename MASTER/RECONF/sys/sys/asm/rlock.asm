_locking:	push	bp
_locking+1:	mov	bp,sp
_locking+3:	push	si
_locking+4:	push	di
_locking+5:	sub	sp,*c
_locking+8:	mov	bx,128
_locking+c:	push	(bx)
_locking+e:	call	0
_locking+11:	pop	cx
_locking+12:	mov	*-8(bp),ax
_locking+15:	or	ax,ax
_locking+17:	je	_locking+3e
_locking+19:	mov	bx,128
_locking+1d:	mov	(bx),#0
_locking+21:	mov	bx,*-8(bp)
_locking+24:	mov	ax,*2(bx)
_locking+27:	mov	*-6(bp),ax
_locking+2a:	mov	bx,ax
_locking+2c:	movb	al,(bx)
_locking+2e:	and	ax,#ff
_locking+31:	and	ax,#6000
_locking+34:	cmp	ax,#4000
_locking+37:	jne	_locking+41
_locking+39:	movb	71,*d
_locking+3e:	jmp	18b
_locking+41:	mov	bx,*-8(bp)
_locking+44:	mov	ax,*4(bx)
_locking+47:	mov	*-12(bp),ax
_locking+4a:	mov	bx,*-8(bp)
_locking+4d:	mov	ax,*6(bx)
_locking+50:	mov	*-10(bp),ax
_locking+53:	mov	bx,128
_locking+57:	cmp	*-12(bx),*0
_locking+5b:	jne	_locking+67
_locking+5d:	mov	bx,128
_locking+61:	cmp	*-4(bx),*0
_locking+65:	je	_locking+90
_locking+67:	mov	bx,128
_locking+6b:	mov	ax,*-4(bx)
_locking+6e:	mov	*-16(bp),ax
_locking+71:	mov	bx,128
_locking+75:	mov	ax,*-12(bx)
_locking+78:	mov	*-14(bp),ax
_locking+7b:	mov	ax,*-12(bp)
_locking+7e:	add	*-16(bp),ax
_locking+81:	push	*-10(bp)
_locking+84:	lea	ax,*-16(bp)
_locking+87:	push	ax
_locking+88:	call	0
_locking+8b:	add	sp,*4
_locking+8e:	j	_locking+9a
_locking+90:	mov	*-16(bp),#4000
_locking+95:	mov	*-14(bp),#4000
_locking+9a:	mov	ax,*-6(bp)
_locking+9d:	add	ax,#20
_locking+a0:	mov	di,ax
_locking+a2:	mov	bx,128
_locking+a6:	cmp	*-20(bx),*0
_locking+aa:	je	_locking+af
_locking+ac:	jmp	1d8
_locking+af:	mov	si,(di)
_locking+b1:	or	si,si
_locking+b3:	jne	_locking+b8
_locking+b5:	jmp	18b
_locking+b8:	mov	ax,*4(si)
_locking+bb:	cmp	ax,76
_locking+bf:	je	_locking+c5
_locking+c1:	mov	di,si
_locking+c3:	j	_locking+af
_locking+c5:	push	*8(si)
_locking+c8:	push	*6(si)
_locking+cb:	push	*-14(bp)
_locking+ce:	push	*-16(bp)
_locking+d1:	call	0
_locking+d4:	add	sp,*8
_locking+d7:	or	ax,ax
_locking+d9:	jnle	_locking+de
_locking+db:	jmp	18b
_locking+de:	push	*-10(bp)
_locking+e1:	push	*-12(bp)
_locking+e4:	push	*12(si)
_locking+e7:	push	*10(si)
_locking+ea:	call	0
_locking+ed:	add	sp,*8
_locking+f0:	or	ax,ax
_locking+f2:	jnle	_locking+f8
_locking+f4:	mov	di,si
_locking+f6:	j	_locking+af
_locking+f8:	push	*8(si)
_locking+fb:	push	*6(si)
_locking+fe:	push	*-10(bp)
101:		push	*-12(bp)
104:		call	0
107:		add	sp,*8
10a:		or	ax,ax
10c:		jnle	12f
10e:		push	*-14(bp)
111:		push	*-16(bp)
114:		push	*12(si)
117:		push	*10(si)
11a:		call	0
11d:		add	sp,*8
120:		or	ax,ax
122:		jnle	12f
124:		mov	ax,(si)
126:		mov	(di),ax
128:		push	si
129:		call	_lockfre
12c:		pop	cx
12d:		j	_locking+f6
12f:		test	*2(si)
132:		adcb	(bx+si),al
134:		je	140
136:		and	*2(si),#ffef
13b:		push	si
13c:		call	0
13f:		pop	cx
140:		push	*-10(bp)
143:		push	*-12(bp)
146:		push	*8(si)
149:		push	*6(si)
14c:		call	0
14f:		add	sp,*8
152:		or	ax,ax
154:		jnl	18d
156:		push	*12(si)
159:		push	*10(si)
15c:		push	*-14(bp)
15f:		push	*-16(bp)
162:		call	0
165:		add	sp,*8
168:		or	ax,ax
16a:		jnl	18d
16c:		lea	ax,*10(si)
16f:		push	ax
170:		lea	ax,*-16(bp)
173:		push	ax
174:		push	si
175:		call	_lockadd
178:		add	sp,*6
17b:		or	ax,ax
17d:		jne	1c5
17f:		mov	ax,*-12(bp)
182:		mov	*10(si),ax
185:		mov	ax,*-10(bp)
188:		mov	*12(si),ax
18b:		j	1c5
18d:		push	*8(si)
190:		push	*6(si)
193:		push	*-10(bp)
196:		push	*-12(bp)
199:		call	0
19c:		add	sp,*8
19f:		or	ax,ax
1a1:		jnle	1c7
1a3:		push	*12(si)
1a6:		push	*10(si)
1a9:		push	*-14(bp)
1ac:		push	*-16(bp)
1af:		call	0
1b2:		add	sp,*8
1b5:		or	ax,ax
1b7:		jnl	1c7
1b9:		mov	ax,*-16(bp)
1bc:		mov	*6(si),ax
1bf:		mov	ax,*-14(bp)
1c2:		mov	*8(si),ax
1c5:		j	209
1c7:		mov	ax,*-12(bp)
1ca:		mov	*10(si),ax
1cd:		mov	ax,*-10(bp)
1d0:		mov	*12(si),ax
1d3:		mov	di,si
1d5:		jmp	12d
1d8:		lea	ax,*-16(bp)
1db:		push	ax
1dc:		lea	ax,*-12(bp)
1df:		push	ax
1e0:		push	*-6(bp)
1e3:		mov	bx,128
1e7:		push	*-20(bx)
1ea:		call	_locked
1ed:		add	sp,*8
1f0:		or	ax,ax
1f2:		jne	230
1f4:		mov	si,(di)
1f6:		or	si,si
1f8:		jne	20b
1fa:		lea	ax,*-16(bp)
1fd:		push	ax
1fe:		lea	ax,*-12(bp)
201:		push	ax
202:		push	di
203:		call	_lockadd
206:		add	sp,*6
209:		j	230
20b:		push	*8(si)
20e:		push	*6(si)
211:		push	*-14(bp)
214:		push	*-16(bp)
217:		call	0
21a:		add	sp,*8
21d:		or	ax,ax
21f:		jnl	232
221:		lea	ax,*-16(bp)
224:		push	ax
225:		lea	ax,*-12(bp)
228:		push	ax
229:		push	di
22a:		call	_lockadd
22d:		add	sp,*6
230:		j	25f
232:		push	*8(si)
235:		push	*6(si)
238:		push	*-14(bp)
23b:		push	*-16(bp)
23e:		call	0
241:		add	sp,*8
244:		or	ax,ax
246:		jnle	262
248:		mov	ax,76
24b:		cmp	ax,*4(si)
24e:		je	262
250:		lea	ax,*-16(bp)
253:		push	ax
254:		lea	ax,*-12(bp)
257:		push	ax
258:		push	di
259:		call	_lockadd
25c:		add	sp,*6
25f:		jmp	2e2
262:		push	*8(si)
265:		push	*6(si)
268:		push	*-14(bp)
26b:		push	*-16(bp)
26e:		call	0
271:		add	sp,*8
274:		or	ax,ax
276:		jl	29a
278:		push	*8(si)
27b:		push	*6(si)
27e:		push	*-10(bp)
281:		push	*-12(bp)
284:		call	0
287:		add	sp,*8
28a:		or	ax,ax
28c:		jnl	29a
28e:		mov	ax,*-12(bp)
291:		mov	*6(si),ax
294:		mov	ax,*-10(bp)
297:		mov	*8(si),ax
29a:		mov	di,si
29c:		mov	si,(di)
29e:		or	si,si
2a0:		jne	2f6
2a2:		push	*12(di)
2a5:		push	*10(di)
2a8:		push	*-10(bp)
2ab:		push	*-12(bp)
2ae:		call	0
2b1:		add	sp,*8
2b4:		or	ax,ax
2b6:		jnle	2e4
2b8:		mov	ax,76
2bb:		cmp	ax,*4(di)
2be:		jne	2e4
2c0:		push	*12(di)
2c3:		push	*10(di)
2c6:		push	*-14(bp)
2c9:		push	*-16(bp)
2cc:		call	0
2cf:		add	sp,*8
2d2:		or	ax,ax
2d4:		jnle	2dc
2d6:		mov	ax,*-16(bp)
2d9:		mov	*10(di),ax
2dc:		mov	ax,*-14(bp)
2df:		mov	*12(di),ax
2e2:		j	2f3
2e4:		lea	ax,*-16(bp)
2e7:		push	ax
2e8:		lea	ax,*-12(bp)
2eb:		push	ax
2ec:		push	di
2ed:		call	_lockadd
2f0:		add	sp,*6
2f3:		jmp	3b1
2f6:		push	*-10(bp)
2f9:		push	*-12(bp)
2fc:		push	*8(si)
2ff:		push	*6(si)
302:		call	0
305:		add	sp,*8
308:		or	ax,ax
30a:		jnl	310
30c:		mov	di,si
30e:		j	29c
310:		push	*12(di)
313:		push	*10(di)
316:		push	*-14(bp)
319:		push	*-16(bp)
31c:		call	0
31f:		add	sp,*8
322:		or	ax,ax
324:		jnle	329
326:		jmp	3b1
329:		push	*12(di)
32c:		push	*10(di)
32f:		push	*-10(bp)
332:		push	*-12(bp)
335:		call	0
338:		add	sp,*8
33b:		or	ax,ax
33d:		jnle	355
33f:		mov	ax,76
342:		cmp	ax,*4(di)
345:		jne	355
347:		mov	ax,*-16(bp)
34a:		mov	*10(di),ax
34d:		mov	ax,*-14(bp)
350:		mov	*12(di),ax
353:		j	36a
355:		lea	ax,*-16(bp)
358:		push	ax
359:		lea	ax,*-12(bp)
35c:		push	ax
35d:		push	di
35e:		call	_lockadd
361:		add	sp,*6
364:		or	ax,ax
366:		jne	3b1
368:		mov	di,(di)
36a:		mov	si,(di)
36c:		or	si,si
36e:		je	3b1
370:		push	*8(si)
373:		push	*6(si)
376:		push	*12(di)
379:		push	*10(di)
37c:		call	0
37f:		add	sp,*8
382:		or	ax,ax
384:		jl	3be
386:		push	*12(si)
389:		push	*10(si)
38c:		push	*12(di)
38f:		push	*10(di)
392:		call	0
395:		add	sp,*8
398:		or	ax,ax
39a:		jnle	3b3
39c:		mov	ax,*10(si)
39f:		mov	*10(di),ax
3a2:		mov	ax,*12(si)
3a5:		mov	*12(di),ax
3a8:		mov	ax,(si)
3aa:		mov	(di),ax
3ac:		push	si
3ad:		call	_lockfre
3b0:		pop	cx
3b1:		j	3be
3b3:		mov	ax,(si)
3b5:		mov	(di),ax
3b7:		push	si
3b8:		call	_lockfre
3bb:		pop	cx
3bc:		j	36a
3be:		lea	sp,*-4(bp)
3c1:		pop	di
3c2:		pop	si
3c3:		pop	bp
3c4:		ret
_lockedz:
_lockedz:	push	bp
_lockedz+1:	mov	bp,sp
_lockedz+3:	push	si
_lockedz+4:	push	di
_lockedz+5:	sub	sp,*8
_lockedz+8:	cmp	*4(bp),*0
_lockedz+c:	je	_lockedz+36
_lockedz+e:	mov	ax,7c
_lockedz+11:	mov	*-8(bp),ax
_lockedz+14:	mov	ax,7e
_lockedz+17:	mov	*-6(bp),ax
_lockedz+1a:	mov	ax,7c
_lockedz+1d:	mov	*-12(bp),ax
_lockedz+20:	mov	ax,7e
_lockedz+23:	mov	*-10(bp),ax
_lockedz+26:	push	7a
_lockedz+2a:	lea	ax,*-12(bp)
_lockedz+2d:	push	ax
_lockedz+2e:	call	0
_lockedz+31:	add	sp,*4
_lockedz+34:	j	_lockedz+4a
_lockedz+36:	mov	*-6(bp),#0
_lockedz+3b:	mov	*-8(bp),#0
_lockedz+40:	mov	*-10(bp),#4000
_lockedz+45:	mov	*-12(bp),#4000
_lockedz+4a:	lea	ax,*-12(bp)
_lockedz+4d:	push	ax
_lockedz+4e:	lea	ax,*-8(bp)
_lockedz+51:	push	ax
_lockedz+52:	push	*6(bp)
_lockedz+55:	mov	ax,#1
_lockedz+58:	push	ax
_lockedz+59:	call	_locked
_lockedz+5c:	add	sp,*8
_lockedz+5f:	lea	sp,*-4(bp)
_lockedz+62:	pop	di
_lockedz+63:	pop	si
_lockedz+64:	pop	bp
_lockedz+65:	ret
_locked:
_locked:	push	bp
_locked+1:	mov	bp,sp
_locked+3:	push	si
_locked+4:	push	di
_locked+5:	mov	di,#6(bp)
_locked+9:	mov	si,*32(di)
_locked+c:	or	si,si
_locked+e:	jne	_locked+13
_locked+10:	jmp	_locked+9c
_locked+13:	mov	bx,*10(bp)
_locked+16:	push	*2(bx)
_locked+19:	mov	bx,*10(bp)
_locked+1c:	push	(bx)
_locked+1e:	push	*8(si)
_locked+21:	push	*6(si)
_locked+24:	call	0
_locked+27:	add	sp,*8
_locked+2a:	or	ax,ax
_locked+2c:	jnl	_locked+9c
_locked+2e:	mov	ax,*4(si)
_locked+31:	cmp	ax,76
_locked+35:	je	_locked+52
_locked+37:	mov	bx,*8(bp)
_locked+3a:	push	*2(bx)
_locked+3d:	mov	bx,*8(bp)
_locked+40:	push	(bx)
_locked+42:	push	*12(si)
_locked+45:	push	*10(si)
_locked+48:	call	0
_locked+4b:	add	sp,*8
_locked+4e:	or	ax,ax
_locked+50:	jnle	_locked+5c
_locked+52:	mov	si,(si)
_locked+54:	or	si,si
_locked+56:	jne	_locked+c
_locked+58:	xor	ax,ax
_locked+5a:	j	_locked+9e
_locked+5c:	cmp	*4(bp),*1
_locked+60:	jle	_locked+6c
_locked+62:	movb	71,*d
_locked+67:	mov	ax,#1
_locked+6a:	j	_locked+9e
_locked+6c:	push	si
_locked+6d:	call	_deadloc
_locked+70:	pop	cx
_locked+71:	or	ax,ax
_locked+73:	je	_locked+7a
_locked+75:	mov	ax,#1
_locked+78:	j	_locked+9e
_locked+7a:	or	*2(si),#10
_locked+7f:	mov	ax,#5a
_locked+82:	push	ax
_locked+83:	push	si
_locked+84:	call	0
_locked+87:	add	sp,*4
_locked+8a:	mov	si,*32(di)
_locked+8d:	cmpb	71,*0
_locked+92:	jne	_locked+97
_locked+94:	jmp	_locked+c
_locked+97:	mov	ax,#1
_locked+9a:	j	_locked+9e
_locked+9c:	xor	ax,ax
_locked+9e:	pop	di
_locked+9f:	pop	si
_locked+a0:	pop	bp
_locked+a1:	ret
_deadloc:
_deadloc:	push	bp
_deadloc+1:	mov	bp,sp
_deadloc+3:	push	si
_deadloc+4:	push	di
_deadloc+5:	mov	di,#4(bp)
_deadloc+9:	mov	bx,*4(di)
_deadloc+c:	cmpb	*2(bx),*1
_deadloc+10:	jne	_deadloc+3a
_deadloc+12:	mov	bx,*4(di)
_deadloc+15:	mov	si,*24(bx)
_deadloc+18:	cmp	si,#0
_deadloc+1c:	jb	_deadloc+3a
_deadloc+1e:	cmp	si,0
_deadloc+22:	jnb	_deadloc+3a
_deadloc+24:	mov	ax,*4(si)
_deadloc+27:	cmp	ax,76
_deadloc+2b:	jne	_deadloc+36
_deadloc+2d:	movb	71,*28
_deadloc+32:	mov	ax,si
_deadloc+34:	j	_deadloc+3c
_deadloc+36:	mov	di,si
_deadloc+38:	j	_deadloc+9
_deadloc+3a:	xor	ax,ax
_deadloc+3c:	pop	di
_deadloc+3d:	pop	si
_deadloc+3e:	pop	bp
_deadloc+3f:	ret
_unlock:
_unlock:	push	bp
_unlock+1:	mov	bp,sp
_unlock+3:	push	si
_unlock+4:	push	di
_unlock+5:	mov	ax,*4(bp)
_unlock+8:	add	ax,#20
_unlock+b:	mov	si,ax
_unlock+d:	or	ax,ax
_unlock+f:	je	_unlock+2f
_unlock+11:	mov	di,(si)
_unlock+13:	or	di,di
_unlock+15:	je	_unlock+2f
_unlock+17:	mov	ax,*4(di)
_unlock+1a:	cmp	ax,76
_unlock+1e:	jne	_unlock+2b
_unlock+20:	mov	ax,(di)
_unlock+22:	mov	(si),ax
_unlock+24:	push	di
_unlock+25:	call	_lockfre
_unlock+28:	pop	cx
_unlock+29:	j	_unlock+11
_unlock+2b:	mov	si,di
_unlock+2d:	j	_unlock+11
_unlock+2f:	pop	di
_unlock+30:	pop	si
_unlock+31:	pop	bp
_unlock+32:	ret
_lockall:
_lockall:	push	bp
_lockall+1:	mov	bp,sp
_lockall+3:	push	si
_lockall+4:	push	di
_lockall+5:	mov	si,#0
_lockall+8:	cmp	*4(si),*0
_lockall+c:	jne	_lockall+26
_lockall+e:	mov	*4(si),#0
_lockall+13:	mov	di,#e
_lockall+16:	cmp	di,0
_lockall+1a:	jnb	_lockall+26
_lockall+1c:	push	di
_lockall+1d:	call	_lockfre
_lockall+20:	pop	cx
_lockall+21:	add	di,*e
_lockall+24:	j	_lockall+16
_lockall+26:	mov	di,(si)
_lockall+28:	or	di,di
_lockall+2a:	jne	_lockall+35
_lockall+2c:	movb	71,*28
_lockall+31:	xor	ax,ax
_lockall+33:	j	_lockall+3f
_lockall+35:	mov	ax,(di)
_lockall+37:	mov	(si),ax
_lockall+39:	mov	(di),#0
_lockall+3d:	mov	ax,di
_lockall+3f:	pop	di
_lockall+40:	pop	si
_lockall+41:	pop	bp
_lockall+42:	ret
_lockfre:
_lockfre:	push	bp
_lockfre+1:	mov	bp,sp
_lockfre+3:	push	si
_lockfre+4:	push	di
_lockfre+5:	mov	di,#4(bp)
_lockfre+9:	test	*2(di)
_lockfre+c:	adcb	(bx+si),al
_lockfre+e:	je	_lockfre+1a
_lockfre+10:	and	*2(di),#ffef
_lockfre+15:	push	di
_lockfre+16:	call	0
_lockfre+19:	pop	cx
_lockfre+1a:	mov	ax,0
_lockfre+1d:	mov	(di),ax
_lockfre+1f:	mov	0,di
_lockfre+23:	pop	di
_lockfre+24:	pop	si
_lockfre+25:	pop	bp
_lockfre+26:	ret
_lockadd:
_lockadd:	push	bp
_lockadd+1:	mov	bp,sp
_lockadd+3:	push	si
_lockadd+4:	push	di
_lockadd+5:	mov	di,#4(bp)
_lockadd+9:	call	_lockall
_lockadd+c:	mov	si,ax
_lockadd+e:	or	ax,ax
_lockadd+10:	jne	_lockadd+17
_lockadd+12:	mov	ax,#1
_lockadd+15:	j	_lockadd+47
_lockadd+17:	mov	ax,(di)
_lockadd+19:	mov	(si),ax
_lockadd+1b:	mov	(di),si
_lockadd+1d:	mov	ax,76
_lockadd+20:	mov	*4(si),ax
_lockadd+23:	mov	bx,*6(bp)
_lockadd+26:	mov	ax,(bx)
_lockadd+28:	mov	*6(si),ax
_lockadd+2b:	mov	bx,*6(bp)
_lockadd+2e:	mov	ax,*2(bx)
_lockadd+31:	mov	*8(si),ax
_lockadd+34:	mov	bx,*8(bp)
_lockadd+37:	mov	ax,(bx)
_lockadd+39:	mov	*10(si),ax
_lockadd+3c:	mov	bx,*8(bp)
_lockadd+3f:	mov	ax,*2(bx)
_lockadd+42:	mov	*12(si),ax
_lockadd+45:	xor	ax,ax
_lockadd+47:	pop	di
_lockadd+48:	pop	si
_lockadd+49:	pop	bp
_lockadd+4a:	ret

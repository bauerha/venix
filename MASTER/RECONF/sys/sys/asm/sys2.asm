_read:		push	bp
_read+1:	mov	bp,sp
_read+3:	push	si
_read+4:	push	di
_read+5:	mov	ax,#1
_read+8:	push	ax
_read+9:	call	_rdwr
_read+c:	pop	cx
_read+d:	pop	di
_read+e:	pop	si
_read+f:	pop	bp
_read+10:	ret

_write:
_write:		push	bp
_write+1:	mov	bp,sp
_write+3:	push	si
_write+4:	push	di
_write+5:	mov	ax,#2
_write+8:	push	ax
_write+9:	call	_rdwr
_write+c:	pop	cx
_write+d:	pop	di
_write+e:	pop	si
_write+f:	pop	bp
_write+10:	ret

_rdwr:
_rdwr:		push	bp
_rdwr+1:	mov	bp,sp
_rdwr+3:	push	si
_rdwr+4:	push	di
_rdwr+5:	mov	bx,128
_rdwr+9:	push	(bx)
_rdwr+b:	call	0
_rdwr+e:	pop	cx
_rdwr+f:	mov	di,ax
_rdwr+11:	or	di,di
_rdwr+13:	je	_rdwr+22
_rdwr+15:	movb	al,(di)
_rdwr+17:	cbw
_rdwr+18:	test	*4(bp),ax
_rdwr+1b:	jne	_rdwr+25
_rdwr+1d:	movb	71,*9
_rdwr+22:	jmp	_rdwr+b7
_rdwr+25:	mov	bx,128
_rdwr+29:	mov	ax,*-12(bx)
_rdwr+2c:	mov	78,ax
_rdwr+2f:	mov	bx,128
_rdwr+33:	mov	ax,*-4(bx)
_rdwr+36:	mov	7a,ax
_rdwr+39:	movb	70,*0
_rdwr+3e:	movb	al,(di)
_rdwr+40:	cbw
_rdwr+41:	test	ax,#4
_rdwr+44:	je	_rdwr+5a
_rdwr+46:	cmp	*4(bp),*1
_rdwr+4a:	jne	_rdwr+53
_rdwr+4c:	push	di
_rdwr+4d:	call	0
_rdwr+50:	pop	cx
_rdwr+51:	j	_rdwr+58
_rdwr+53:	push	di
_rdwr+54:	call	0
_rdwr+57:	pop	cx
_rdwr+58:	j	_rdwr+a6
_rdwr+5a:	mov	ax,*6(di)
_rdwr+5d:	mov	7e,ax
_rdwr+60:	mov	ax,*4(di)
_rdwr+63:	mov	7c,ax
_rdwr+66:	mov	si,*2(di)
_rdwr+69:	cmp	*32(si),*0
_rdwr+6d:	je	_rdwr+7e
_rdwr+6f:	push	si
_rdwr+70:	mov	ax,#1
_rdwr+73:	push	ax
_rdwr+74:	call	0
_rdwr+77:	add	sp,*4
_rdwr+7a:	or	ax,ax
_rdwr+7c:	jne	_rdwr+b7
_rdwr+7e:	cmp	*4(bp),*1
_rdwr+82:	jne	_rdwr+8b
_rdwr+84:	push	si
_rdwr+85:	call	0
_rdwr+88:	pop	cx
_rdwr+89:	j	_rdwr+90
_rdwr+8b:	push	si
_rdwr+8c:	call	0
_rdwr+8f:	pop	cx
_rdwr+90:	mov	bx,128
_rdwr+94:	mov	ax,*-4(bx)
_rdwr+97:	sub	ax,7a
_rdwr+9b:	push	ax
_rdwr+9c:	lea	ax,*4(di)
_rdwr+9f:	push	ax
_rdwr+a0:	call	0
_rdwr+a3:	add	sp,*4
_rdwr+a6:	mov	bx,128
_rdwr+aa:	mov	ax,*-4(bx)
_rdwr+ad:	sub	ax,7a
_rdwr+b1:	mov	bx,128
_rdwr+b5:	mov	(bx),ax
_rdwr+b7:	pop	di
_rdwr+b8:	pop	si
_rdwr+b9:	pop	bp
_rdwr+ba:	ret

_open:
_open:		push	bp
_open+1:	mov	bp,sp
_open+3:	push	si
_open+4:	push	di
_open+5:	xor	ax,ax
_open+7:	push	ax
_open+8:	mov	ax,#0
_open+b:	push	ax
_open+c:	call	0
_open+f:	add	sp,*4
_open+12:	mov	di,ax
_open+14:	or	di,di
_open+16:	je	_open+30
_open+18:	mov	bx,128
_open+1c:	inc	*-12(bx)
_open+1f:	xor	ax,ax
_open+21:	push	ax
_open+22:	mov	bx,128
_open+26:	push	*-12(bx)
_open+29:	push	di
_open+2a:	call	_open1
_open+2d:	add	sp,*6
_open+30:	pop	di
_open+31:	pop	si
_open+32:	pop	bp
_open+33:	ret

_creat:
_creat:		push	bp
_creat+1:	mov	bp,sp
_creat+3:	push	si
_creat+4:	push	di
_creat+5:	mov	ax,#1
_creat+8:	push	ax
_creat+9:	mov	ax,#0
_creat+c:	push	ax
_creat+d:	call	0
_creat+10:	add	sp,*4
_creat+13:	mov	di,ax
_creat+15:	or	di,di
_creat+17:	jne	_creat+46
_creat+19:	cmpb	71,*0
_creat+1e:	jne	_creat+5f
_creat+20:	mov	bx,128
_creat+24:	mov	ax,*-12(bx)
_creat+27:	and	ax,#1ff
_creat+2a:	push	ax
_creat+2b:	call	0
_creat+2e:	pop	cx
_creat+2f:	mov	di,ax
_creat+31:	or	di,di
_creat+33:	je	_creat+70
_creat+35:	mov	ax,#2
_creat+38:	push	ax
_creat+39:	mov	ax,#2
_creat+3c:	push	ax
_creat+3d:	push	di
_creat+3e:	call	_open1
_creat+41:	add	sp,*6
_creat+44:	j	_creat+70
_creat+46:	cmp	*32(di),*0
_creat+4a:	je	_creat+61
_creat+4c:	push	di
_creat+4d:	xor	ax,ax
_creat+4f:	push	ax
_creat+50:	call	0
_creat+53:	add	sp,*4
_creat+56:	or	ax,ax
_creat+58:	je	_creat+61
_creat+5a:	push	di
_creat+5b:	call	0
_creat+5e:	pop	cx
_creat+5f:	j	_creat+70
_creat+61:	mov	ax,#1
_creat+64:	push	ax
_creat+65:	mov	ax,#2
_creat+68:	push	ax
_creat+69:	push	di
_creat+6a:	call	_open1
_creat+6d:	add	sp,*6
_creat+70:	pop	di
_creat+71:	pop	si
_creat+72:	pop	bp
_creat+73:	ret

_open1:
_open1:		push	bp
_open1+1:	mov	bp,sp
_open1+3:	push	si
_open1+4:	push	di
_open1+5:	push	cx
_open1+6:	mov	si,*4(bp)
_open1+9:	cmp	*8(bp),*2
_open1+d:	je	_open1+43
_open1+f:
data address not found
_open1+11:	push	es
_open1+12:	add	(bx+si),ax
_open1+14:	je	_open1+21
_open1+16:	mov	ax,#100
_open1+19:	push	ax
_open1+1a:	push	si
_open1+1b:	call	0
_open1+1e:	add	sp,*4
_open1+21:
data address not found
_open1+23:	push	es
_open1+24:	addb	al,(bx+si)
_open1+26:	je	_open1+43
_open1+28:	mov	ax,#80
_open1+2b:	push	ax
_open1+2c:	push	si
_open1+2d:	call	0
_open1+30:	add	sp,*4
_open1+33:	mov	ax,*6(si)
_open1+36:	and	ax,#6000
_open1+39:	cmp	ax,#4000
_open1+3c:	jne	_open1+43
_open1+3e:	movb	71,*15
_open1+43:	cmpb	71,*0
_open1+48:	jne	_open1+9a
_open1+4a:	cmp	*8(bp),*0
_open1+4e:	je	_open1+55
_open1+50:	push	si
_open1+51:	call	0
_open1+54:	pop	cx
_open1+55:	push	si
_open1+56:	call	0
_open1+59:	pop	cx
_open1+5a:	call	0
_open1+5d:	mov	di,ax
_open1+5f:	or	ax,ax
_open1+61:	je	_open1+9a
_open1+63:	mov	ax,*6(bp)
_open1+66:	and	ax,#3
_open1+69:	mov	cx,ax
_open1+6b:	movb	(di),cl
_open1+6d:	mov	ax,si
_open1+6f:	mov	*2(di),ax
_open1+72:	mov	bx,128
_open1+76:	mov	ax,(bx)
_open1+78:	mov	*-6(bp),ax
_open1+7b:	push	*6(bp)
_open1+7e:	push	si
_open1+7f:	call	0
_open1+82:	add	sp,*4
_open1+85:	cmpb	71,*0
_open1+8a:	je	_open1+9f
_open1+8c:	mov	bx,*-6(bp)
_open1+8f:	shl	bx
_open1+91:	mov	#a6(bx),#0
_open1+97:	decb	*1(di)
_open1+9a:	push	si
_open1+9b:	call	0
_open1+9e:	pop	cx
_open1+9f:	pop	cx
_open1+a0:	pop	di
_open1+a1:	pop	si
_open1+a2:	pop	bp
_open1+a3:	ret

_close:
_close:		push	bp
_close+1:	mov	bp,sp
_close+3:	push	si
_close+4:	push	di
_close+5:	mov	bx,128
_close+9:	push	(bx)
_close+b:	call	0
_close+e:	pop	cx
_close+f:	mov	di,ax
_close+11:	or	di,di
_close+13:	je	_close+32
_close+15:	mov	bx,128
_close+19:	mov	ax,(bx)
_close+1b:	mov	bx,ax
_close+1d:	shl	bx
_close+1f:	mov	#a6(bx),#0
_close+25:	push	di
_close+26:	call	0
_close+29:	pop	cx
_close+2a:	mov	bx,128
_close+2e:	mov	(bx),#0
_close+32:	pop	di
_close+33:	pop	si
_close+34:	pop	bp
_close+35:	ret

_seek:
_seek:		push	bp
_seek+1:	mov	bp,sp
_seek+3:	push	si
_seek+4:	push	di
_seek+5:	mov	bx,128
_seek+9:	push	(bx)
_seek+b:	call	0
_seek+e:	pop	cx
_seek+f:	mov	di,ax
_seek+11:	or	ax,ax
_seek+13:	je	_seek+22
_seek+15:	movb	al,(di)
_seek+17:	cbw
_seek+18:	test	ax,#4
_seek+1b:	je	_seek+25
_seek+1d:	movb	71,*1d
_seek+22:	jmp	_seek+b1
_seek+25:	mov	bx,128
_seek+29:	mov	ax,*-20(bx)
_seek+2c:	j	_seek+90
_seek+2e:	mov	bx,128
_seek+32:	mov	ax,*-12(bx)
_seek+35:	mov	*6(di),ax
_seek+38:	mov	bx,128
_seek+3c:	mov	ax,*-4(bx)
_seek+3f:	mov	*4(di),ax
_seek+42:	j	_seek+8e
_seek+44:	mov	bx,128
_seek+48:	mov	ax,*-4(bx)
_seek+4b:	add	*4(di),ax
_seek+4e:	mov	bx,128
_seek+52:	push	*-12(bx)
_seek+55:	lea	ax,*4(di)
_seek+58:	push	ax
_seek+59:	call	0
_seek+5c:	add	sp,*4
_seek+5f:	j	_seek+9e
_seek+61:	mov	bx,*2(di)
_seek+64:	movb	al,*11(bx)
_seek+67:	and	ax,#ff
_seek+6a:	mov	bx,128
_seek+6e:	add	ax,*-4(bx)
_seek+71:	mov	*4(di),ax
_seek+74:	mov	bx,128
_seek+78:	mov	ax,*-12(bx)
_seek+7b:	mov	*6(di),ax
_seek+7e:	mov	bx,*2(di)
_seek+81:	push	*12(bx)
_seek+84:	lea	ax,*4(di)
_seek+87:	push	ax
_seek+88:	call	0
_seek+8b:	add	sp,*4
_seek+8e:	j	_seek+9e
_seek+90:	or	ax,ax
_seek+92:	je	_seek+2e
_seek+94:	cmp	ax,#1
_seek+97:	je	_seek+44
_seek+99:	cmp	ax,#2
_seek+9c:	je	_seek+61
_seek+9e:	mov	bx,128
_seek+a2:	mov	ax,*4(di)
_seek+a5:	mov	*-12(bx),ax
_seek+a8:	mov	bx,128
_seek+ac:	mov	ax,*6(di)
_seek+af:	mov	(bx),ax
_seek+b1:	pop	di
_seek+b2:	pop	si
_seek+b3:	pop	bp
_seek+b4:	ret

_link:
_link:		push	bp
_link+1:	mov	bp,sp
_link+3:	push	si
_link+4:	push	di
_link+5:	xor	ax,ax
_link+7:	push	ax
_link+8:	mov	ax,#0
_link+b:	push	ax
_link+c:	call	0
_link+f:	add	sp,*4
_link+12:	mov	di,ax
_link+14:	or	di,di
_link+16:	jne	_link+25
_link+18:	mov	bx,128
_link+1c:	mov	(bx),#0
_link+20:	xor	ax,ax
_link+22:	jmp	_link+a9
_link+25:	cmpb	*8(di),*7f
_link+29:	jb	_link+32
_link+2b:	movb	71,*1f
_link+30:	j	_link+8f
_link+32:	mov	ax,*6(di)
_link+35:	and	ax,#6000
_link+38:	cmp	ax,#4000
_link+3b:	jne	_link+44
_link+3d:	call	0
_link+40:	or	ax,ax
_link+42:	je	_link+8f
_link+44:	andb	(di),*fe
_link+47:	mov	bx,128
_link+4b:	mov	ax,*-12(bx)
_link+4e:	mov	92,ax
_link+51:	mov	ax,#1
_link+54:	push	ax
_link+55:	mov	ax,#0
_link+58:	push	ax
_link+59:	call	0
_link+5c:	add	sp,*4
_link+5f:	mov	si,ax
_link+61:	or	si,si
_link+63:	je	_link+6f
_link+65:	movb	71,*11
_link+6a:	push	si
_link+6b:	call	0
_link+6e:	pop	cx
_link+6f:	cmpb	71,*0
_link+74:	jne	_link+a4
_link+76:	mov	bx,a4
_link+7a:	mov	ax,*2(bx)
_link+7d:	cmp	ax,*2(di)
_link+80:	je	_link+91
_link+82:	push	a4
_link+86:	call	0
_link+89:	pop	cx
_link+8a:	movb	71,*12
_link+8f:	j	_link+a4
_link+91:	push	di
_link+92:	call	0
_link+95:	pop	cx
_link+96:	incb	*8(di)
_link+99:	orb	(di),*2
_link+9c:	mov	bx,128
_link+a0:	mov	(bx),#0
_link+a4:	push	di
_link+a5:	call	0
_link+a8:	pop	cx
_link+a9:	pop	di
_link+aa:	pop	si
_link+ab:	pop	bp
_link+ac:	ret

_mknod:
_mknod:		push	bp
_mknod+1:	mov	bp,sp
_mknod+3:	push	si
_mknod+4:	push	di
_mknod+5:	call	0
_mknod+8:	or	ax,ax
_mknod+a:	je	_mknod+27
_mknod+c:	mov	ax,#1
_mknod+f:	push	ax
_mknod+10:	mov	ax,#0
_mknod+13:	push	ax
_mknod+14:	call	0
_mknod+17:	add	sp,*4
_mknod+1a:	mov	di,ax
_mknod+1c:	or	di,di
_mknod+1e:	je	_mknod+27
_mknod+20:	movb	71,*11
_mknod+25:	j	_mknod+51
_mknod+27:	cmpb	71,*0
_mknod+2c:	jne	_mknod+56
_mknod+2e:	mov	bx,128
_mknod+32:	push	*-12(bx)
_mknod+35:	call	0
_mknod+38:	pop	cx
_mknod+39:	mov	di,ax
_mknod+3b:	or	di,di
_mknod+3d:	je	_mknod+56
_mknod+3f:	mov	bx,128
_mknod+43:	mov	ax,*-4(bx)
_mknod+46:	mov	*14(di),ax
_mknod+49:	mov	bx,128
_mknod+4d:	mov	(bx),#0
_mknod+51:	push	di
_mknod+52:	call	0
_mknod+55:	pop	cx
_mknod+56:	pop	di
_mknod+57:	pop	si
_mknod+58:	pop	bp
_mknod+59:	ret

_umask:
_umask:		push	bp
_umask+1:	mov	bp,sp
_umask+3:	push	si
_umask+4:	push	di
_umask+5:	mov	bx,128
_umask+9:	mov	di,(bx)
_umask+b:	mov	bx,128
_umask+f:	mov	ax,132
_umask+12:	mov	(bx),ax
_umask+14:	mov	ax,di
_umask+16:	and	ax,#1ff
_umask+19:	mov	132,ax
_umask+1c:	pop	di
_umask+1d:	pop	si
_umask+1e:	pop	bp
_umask+1f:	ret

_alarm:
_alarm:		push	bp
_alarm+1:	mov	bp,sp
_alarm+3:	push	si
_alarm+4:	push	di
_alarm+5:	mov	bx,128
_alarm+9:	mov	di,(bx)
_alarm+b:	or	di,di
_alarm+d:	jnl	_alarm+3a
_alarm+f:	push	76
_alarm+13:	mov	ax,#48d
_alarm+16:	push	ax
_alarm+17:	call	0
_alarm+1a:	add	sp,*4
_alarm+1d:	mov	ax,di
_alarm+1f:
data address not found
_alarm+21:	push	ax
_alarm+22:	push	76
_alarm+26:	mov	ax,#48d
_alarm+29:	push	ax
_alarm+2a:	call	0
_alarm+2d:	add	sp,*6
_alarm+30:	mov	bx,128
_alarm+34:	mov	(bx),#0
_alarm+38:	j	_alarm+4e
_alarm+3a:	mov	bx,76
_alarm+3e:	mov	ax,*32(bx)
_alarm+41:	mov	bx,128
_alarm+45:	mov	(bx),ax
_alarm+47:	mov	bx,76
_alarm+4b:	mov	*32(bx),di
_alarm+4e:	pop	di
_alarm+4f:	pop	si
_alarm+50:	pop	bp
_alarm+51:	ret

_falarm:
_falarm:	push	bp
_falarm+1:	mov	bp,sp
_falarm+3:	push	si
_falarm+4:	push	di
_falarm+5:	mov	ax,#e
_falarm+8:	push	ax
_falarm+9:	push	*4(bp)
_falarm+c:	call	0
_falarm+f:	add	sp,*4
_falarm+12:	pop	di
_falarm+13:	pop	si
_falarm+14:	pop	bp
_falarm+15:	ret

_pause:
_pause:		push	bp
_pause+1:	mov	bp,sp
_pause+3:	push	si
_pause+4:	push	di
_pause+5:	mov	ax,#5a
_pause+8:	push	ax
_pause+9:	mov	ax,#0
_pause+c:	push	ax
_pause+d:	call	0
_pause+10:	add	sp,*4
_pause+13:	j	_pause+5

_utime:
_utime:		push	bp
_utime+1:	mov	bp,sp
_utime+3:	push	si
_utime+4:	push	di
_utime+5:	sub	sp,*8
_utime+8:	call	0
_utime+b:	mov	di,ax
_utime+d:	or	ax,ax
_utime+f:	je	_utime+44
_utime+11:	mov	ax,#8
_utime+14:	push	ax
_utime+15:	lea	ax,*-12(bp)
_utime+18:	push	ax
_utime+19:	mov	bx,128
_utime+1d:	push	*-12(bx)
_utime+20:	call	0
_utime+23:	add	sp,*6
_utime+26:	or	ax,ax
_utime+28:	je	_utime+31
_utime+2a:	movb	71,*e
_utime+2f:	j	_utime+44
_utime+31:	orb	(di),*6
_utime+34:	lea	ax,*-8(bp)
_utime+37:	push	ax
_utime+38:	push	di
_utime+39:	call	0
_utime+3c:	add	sp,*4
_utime+3f:	push	di
_utime+40:	call	0
_utime+43:	pop	cx
_utime+44:	lea	sp,*-4(bp)
_utime+47:	pop	di
_utime+48:	pop	si
_utime+49:	pop	bp
_utime+4a:	ret

_saccess:
_saccess:	push	bp
_saccess+1:	mov	bp,sp
_saccess+3:	push	si
_saccess+4:	push	di
_saccess+5:	push	cx
_saccess+6:	movb	al,72
_saccess+9:	movb	*-5(bp),al
_saccess+c:	movb	al,73
_saccess+f:	movb	*-6(bp),al
_saccess+12:	movb	al,74
_saccess+15:	movb	72,al
_saccess+18:	movb	al,75
_saccess+1b:	movb	73,al
_saccess+1e:	xor	ax,ax
_saccess+20:	push	ax
_saccess+21:	mov	ax,#0
_saccess+24:	push	ax
_saccess+25:	call	0
_saccess+28:	add	sp,*4
_saccess+2b:	mov	di,ax
_saccess+2d:	or	ax,ax
_saccess+2f:	je	_saccess+7b
_saccess+31:	mov	bx,128
_saccess+35:	mov	ax,*-12(bx)
_saccess+38:	test	ax,#4
_saccess+3b:	je	_saccess+48
_saccess+3d:	mov	ax,#100
_saccess+40:	push	ax
_saccess+41:	push	di
_saccess+42:	call	0
_saccess+45:	add	sp,*4
_saccess+48:	mov	bx,128
_saccess+4c:	mov	ax,*-12(bx)
_saccess+4f:	test	ax,#2
_saccess+52:	je	_saccess+5f
_saccess+54:	mov	ax,#80
_saccess+57:	push	ax
_saccess+58:	push	di
_saccess+59:	call	0
_saccess+5c:	add	sp,*4
_saccess+5f:	mov	bx,128
_saccess+63:	mov	ax,*-12(bx)
_saccess+66:	test	ax,#1
_saccess+69:	je	_saccess+76
_saccess+6b:	mov	ax,#40
_saccess+6e:	push	ax
_saccess+6f:	push	di
_saccess+70:	call	0
_saccess+73:	add	sp,*4
_saccess+76:	push	di
_saccess+77:	call	0
_saccess+7a:	pop	cx
_saccess+7b:	movb	al,*-5(bp)
_saccess+7e:	movb	72,al
_saccess+81:	movb	al,*-6(bp)
_saccess+84:	movb	73,al
_saccess+87:	mov	bx,128
_saccess+8b:	mov	(bx),#0
_saccess+8f:	pop	cx
_saccess+90:	pop	di
_saccess+91:	pop	si
_saccess+92:	pop	bp
_saccess+93:	ret

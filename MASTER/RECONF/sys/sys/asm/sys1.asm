_exec:		push	bp
_exec+1:	mov	bp,sp
_exec+3:	push	si
_exec+4:	push	di
_exec+5:	mov	bx,128
_exec+9:	mov	*-4(bx),#0
_exec+e:	call	_exece
_exec+11:	pop	di
_exec+12:	pop	si
_exec+13:	pop	bp
_exec+14:	ret

_exece:
_exece:		push	bp
_exece+1:	mov	bp,sp
_exece+3:	push	si
_exece+4:	push	di
_exece+5:	sub	sp,*32
_exece+8:	xor	ax,ax
_exece+a:	push	ax
_exece+b:	mov	ax,#0
_exece+e:	push	ax
_exece+f:	call	0
_exece+12:	add	sp,*4
_exece+15:	mov	di,ax
_exece+17:	or	ax,ax
_exece+19:	jne	_exece+1e
_exece+1b:	jmp	4fa
_exece+1e:	call	0
_exece+21:	cmpb	0,*2
_exece+26:	jl	_exece+38
_exece+28:	mov	ax,#ffff
_exece+2b:	push	ax
_exece+2c:	mov	ax,#0
_exece+2f:	push	ax
_exece+30:	call	0
_exece+33:	add	sp,*4
_exece+36:	j	_exece+21
_exece+38:	incb	0
_exece+3c:	mov	*-8(bp),#0
_exece+41:	mov	ax,#40
_exece+44:	push	ax
_exece+45:	push	di
_exece+46:	call	0
_exece+49:	add	sp,*4
_exece+4c:	or	ax,ax
_exece+4e:	jne	_exece+57
_exece+50:
data address not found
_exece+52:	push	es
_exece+53:	addb	*116(bx+si),ah
_exece+56:	orb	dh,al
_exece+58:	push	es
_exece+59:	jno	_exece+5b
_exece+5b:	addb	ch,cl
_exece+5d:	esc	0,(bx+si)
_exece+5f:	mov	*-14(bp),#0
_exece+64:	mov	*-16(bp),#0
_exece+69:	mov	*-18(bp),#0
_exece+6e:	mov	*-10(bp),#0
_exece+73:	mov	bx,128
_exece+77:	cmp	*-12(bx),*0
_exece+7b:	je	_exece+93
_exece+7d:	mov	bx,128
_exece+81:	push	*-12(bx)
_exece+84:	call	0
_exece+87:	pop	cx
_exece+88:	mov	*-10(bp),ax
_exece+8b:	mov	bx,128
_exece+8f:	add	*-12(bx),*2
_exece+93:	cmp	*-10(bp),*0
_exece+97:	jne	_exece+c9
_exece+99:	mov	bx,128
_exece+9d:	cmp	*-4(bx),*0
_exece+a1:	je	_exece+c9
_exece+a3:	mov	bx,128
_exece+a7:	mov	*-12(bx),#0
_exece+ac:	mov	bx,128
_exece+b0:	push	*-4(bx)
_exece+b3:	call	0
_exece+b6:	pop	cx
_exece+b7:	mov	*-10(bp),ax
_exece+ba:	or	ax,ax
_exece+bc:	je	_exece+cd
_exece+be:	mov	bx,128
_exece+c2:	add	*-4(bx),*2
_exece+c6:	inc	*-16(bp)
_exece+c9:	cmp	*-10(bp),*0
_exece+cd:	je	15f
_exece+cf:	inc	*-14(bp)
_exece+d2:	cmp	*-10(bp),*ff
_exece+d6:	je	13a
_exece+d8:
data address not found
_exece+da:	outb	al,dx
_exece+db:	inc	(bx+di)
_exece+dd:	jne	129
_exece+df:	cmp	*-18(bp),*0
_exece+e3:	jne	_exece+f5
_exece+e5:	mov	ax,#ffff
_exece+e8:	push	ax
_exece+e9:	call	0
_exece+ec:	pop	cx
_exece+ed:	mov	*-8(bp),ax
_exece+f0:	mov	*-6(bp),ax
_exece+f3:	j	11b
_exece+f5:	mov	ax,#ffff
_exece+f8:	push	ax
_exece+f9:	call	0
_exece+fc:	pop	cx
_exece+fd:	mov	bx,*-6(bp)
115:		mov	*6(bx),ax
118:		mov	*-6(bp),ax
11b:		mov	bx,*-6(bp)
11e:		mov	*6(bx),#0
123:		mov	bx,*-6(bp)
126:		mov	si,*14(bx)
129:		mov	ax,*-10(bp)
12c:		inc	*-10(bp)
12f:		push	ax
130:		call	0
133:		pop	cx
134:		mov	*-22(bp),ax
137:		cmp	ax,#ffff
13a:		je	14c
13c:		mov	ax,*-18(bp)
13f:		inc	*-18(bp)
142:		cmp	ax,#800
145:		jb	14e
147:		movb	71,*7
14c:		j	1a0
14e:		mov	bx,si
150:		inc	si
151:		mov	ax,*-22(bp)
154:		mov	cx,ax
156:		movb	(bx),cl
158:		orb	cl,cl
15a:		jne	_exece+d8
15c:		jmp	_exece+6e
15f:		inc	*-18(bp)
162:		and	*-18(bp),#fffe
167:		lea	ax,*-54(bp)
16a:		mov	78,ax
16d:		mov	7a,#20
173:		mov	7e,#0
179:		mov	7c,#0
17f:		movb	70,*1
184:		push	di
185:		call	0
188:		pop	cx
189:		movb	70,*0
18e:		cmpb	71,*0
193:		jne	1a0
195:		mov	ax,*-54(bp)
198:		jmp	22a
19b:		movb	71,*8
1a0:		j	221
1a2:		mov	ax,*-46(bp)
1a5:		mov	dx,*-44(bp)
1a8:		add	ax,*-50(bp)
1ab:		adc	dx,*-48(bp)
1ae:		mov	*-46(bp),ax
1b1:		mov	*-44(bp),dx
1b4:		mov	ax,*-52(bp)
1b7:		xor	dx,dx
1b9:		add	ax,*-46(bp)
1bc:		adc	dx,*-44(bp)
1bf:		add	ax,*-42(bp)
1c2:		adc	dx,*-40(bp)
1c5:		mov	cx,#9
1c8:		or	cx,cx
1ca:		je	1d2
1cc:		shr	dx
1ce:		rcr	ax
1d0:		loop	1cc
1d2:		add	ax,#1
1d5:		adc	dx,*0
1d8:		mov	*-12(bp),ax
1db:		cmp	*-52(bp),*0
1df:		je	216
1e1:		mov	ax,*-12(bp)
1e4:		inc	ax
1e5:		inc	ax
1e6:		mov	*-22(bp),ax
1e9:		cmp	*-12(bp),#80
1ee:		jnbe	21c
1f0:		mov	ax,#8
1f3:		mov	cx,#9
1f6:		shl	ax,cl
1f8:		cmp	*-52(bp),ax
1fb:		jb	21c
1fd:		mov	ax,#800
200:		mov	cx,#9
203:		shr	ax,cl
205:		add	*-22(bp),ax
208:		cmp	*-22(bp),#82
20d:		jle	23d
20f:		mov	*-22(bp),#82
214:		j	23d
216:		cmp	*-12(bp),*78
21a:		jbe	223
21c:		movb	71,*c
221:		j	259
223:		mov	*-22(bp),#82
228:		j	23d
22a:		cmp	ax,#107
22d:		jne	232
22f:		jmp	1a2
232:		cmp	ax,#109
235:		jne	23a
237:		jmp	1b4
23a:		jmp	19b
23d:		cmp	*-54(bp),#107
242:		je	25b
244:		movb	al,(di)
246:		and	ax,#ff
249:		test	ax,#20
24c:		jne	25b
24e:		cmpb	*1(di),*1
252:		je	25b
254:		movb	71,*1a
259:		j	2d4
25b:		mov	a,#0
261:		mov	130,#0
267:		call	0
26a:		mov	bx,76
26e:		mov	*16(bx),#2
273:		mov	bx,76
277:		mov	*18(bx),#0
27c:		cmp	*-54(bp),#107
281:		je	2fb
283:		mov	ax,*-50(bp)
286:		mov	dx,*-48(bp)
289:		mov	cx,#9
28c:		or	cx,cx
28e:		je	296
290:		sar	dx
292:		rcr	ax
294:		loop	290
296:		add	ax,#1
299:		adc	dx,*0
29c:		mov	si,ax
29e:		mov	bx,76
2a2:		mov	ax,*14(bx)
2a5:		dec	ax
2a6:		dec	ax
2a7:		mov	dx,si
2a9:		cmp	ax,dx
2ab:		jnb	2b5
2ad:		mov	ax,#2
2b0:		push	ax
2b1:		call	0
2b4:		pop	cx
2b5:		mov	ax,si
2b7:		push	ax
2b8:		xor	ax,ax
2ba:		push	ax
2bb:		push	di
2bc:		call	0
2bf:		add	sp,*6
2c2:		or	ax,ax
2c4:		jne	2d7
2c6:		mov	ax,#9
2c9:		push	ax
2ca:		push	76
2ce:		call	0
2d1:		add	sp,*4
2d4:		jmp	4c3
2d7:		add	*-50(bp),*20
2db:		adc	*-48(bp),*0
2df:		mov	ax,*-50(bp)
2e2:		mov	7e,ax
2e5:		mov	ax,*-50(bp)
2e8:		mov	dx,*-48(bp)
2eb:		mov	cx,#10
2ee:		or	cx,cx
2f0:		je	2f8
2f2:		sar	dx
2f4:		rcr	ax
2f6:		loop	2f2
2f8:		mov	7c,ax
2fb:		push	*-22(bp)
2fe:		call	0
301:		pop	cx
302:		or	ax,ax
304:		je	2c6
306:		mov	ax,*-12(bp)
309:		inc	ax
30a:		inc	ax
30b:		mov	bx,76
30f:		mov	*16(bx),ax
312:		dec	*-22(bp)
315:		cmp	*-22(bp),*2
319:		jl	333
31b:		mov	bx,76
31f:		mov	ax,*12(bx)
322:		mov	dx,*-22(bp)
325:		mov	cx,#5
328:		shl	dx,cl
32a:		add	ax,dx
32c:		push	ax
32d:		call	0
330:		pop	cx
331:		j	312
333:		call	0
336:		mov	ax,*-52(bp)
339:		mov	78,ax
33c:		mov	ax,*-46(bp)
33f:		mov	7a,ax
342:		push	di
343:		call	0
346:		pop	cx
347:		mov	ax,*-52(bp)
34a:		mov	*-10(bp),ax
34d:		or	ax,ax
34f:		jne	358
351:		mov	*-22(bp),#8
356:		j	35d
358:		mov	*-22(bp),#0
35d:		mov	bx,76
361:		mov	ax,*-22(bp)
364:		mov	*18(bx),ax
367:		mov	ax,*-10(bp)
36a:		dec	ax
36b:		dec	ax
36c:		sub	ax,*-18(bp)
36f:		mov	*-22(bp),ax
372:		mov	ax,*-18(bp)
375:		add	ax,#8
378:		mov	dx,*-14(bp)
37b:		shl	dx
37d:		add	ax,dx
37f:		sub	*-10(bp),ax
382:		mov	bx,128
386:		mov	ax,*-10(bp)
389:		mov	*-10(bx),ax
38c:		mov	ax,*-14(bp)
38f:		sub	ax,*-16(bp)
392:		push	ax
393:		push	*-10(bp)
396:		call	0
399:		add	sp,*4
39c:		mov	*-18(bp),#0
3a1:		cmp	*-14(bp),*0
3a5:		je	414
3a7:		mov	ax,*-14(bp)
3aa:		cmp	ax,*-16(bp)
3ad:		jne	3bf
3af:		xor	ax,ax
3b1:		push	ax
3b2:		add	*-10(bp),*2
3b6:		push	*-10(bp)
3b9:		call	0
3bc:		add	sp,*4
3bf:		dec	*-14(bp)
3c2:		push	*-22(bp)
3c5:		add	*-10(bp),*2
3c9:		push	*-10(bp)
3cc:		call	0
3cf:		add	sp,*4
3d2:
data address not found
3d4:		outb	al,dx
3d5:		inc	(bx+di)
3d7:		jne	3f6
3d9:		cmp	*-18(bp),*0
3dd:		jne	3e7
3df:		mov	ax,*-8(bp)
3e2:		mov	*-6(bp),ax
3e5:		j	3f0
3e7:		mov	bx,*-6(bp)
3ea:		mov	ax,*6(bx)
3ed:		mov	*-6(bp),ax
3f0:		mov	bx,*-6(bp)
3f3:		mov	si,*14(bx)
3f6:		inc	*-18(bp)
3f9:		movb	al,(si)
3fb:		cbw
3fc:		push	ax
3fd:		mov	ax,*-22(bp)
400:		inc	*-22(bp)
403:		push	ax
404:		call	0
407:		add	sp,*4
40a:		mov	bx,si
40c:		inc	si
40d:		cmpb	(bx),*0
410:		jne	3d2
412:		j	3a1
414:		xor	ax,ax
416:		push	ax
417:		mov	ax,*-10(bp)
41a:		inc	ax
41b:		inc	ax
41c:		push	ax
41d:		call	0
420:		add	sp,*4
423:		xor	ax,ax
425:		push	ax
426:		push	*-22(bp)
429:		call	0
42c:		add	sp,*4
42f:		mov	bx,76
433:		mov	ax,(bx)
435:		test	ax,#800
438:		jne	467
43a:
data address not found
43c:		push	es
43d:		addb	(bx+si),cl
43f:		je	458
441:		cmpb	72,*0
446:		je	458
448:		movb	al,*9(di)
44b:		movb	72,al
44e:		mov	bx,76
452:		movb	al,*9(di)
455:		movb	*4(bx),al
458:
data address not found
45a:		push	es
45b:		addb	(si),al
45d:		je	475
45f:		movb	al,*10(di)
462:		movb	73,al
465:		j	475
467:		mov	ax,#5
46a:		push	ax
46b:		push	76
46f:		call	0
472:		add	sp,*4
475:		mov	ax,di
477:		mov	*-22(bp),ax
47a:		mov	di,#d6
47d:		cmp	di,#118
481:		jnb	490
483:		cmp	(di),*1
486:		je	48c
488:		mov	(di),#0
48c:		inc	di
48d:		inc	di
48e:		j	47d
490:		mov	si,#0
493:		cmp	si,#7
497:		jnb	4ad
499:		mov	bx,si
49b:		inc	si
49c:		movb	al,(bx)
49e:		cbw
49f:		shl	ax
4a1:		add	ax,128
4a5:		mov	bx,ax
4a7:		mov	(bx),#0
4ab:		j	493
4ad:		mov	di,*-22(bp)
4b0:		mov	bx,128
4b4:		mov	*6(bx),#200
4b9:		mov	ax,*-34(bp)
4bc:		mov	bx,128
4c0:		mov	*2(bx),ax
4c3:		push	di
4c4:		call	0
4c7:		pop	cx
4c8:		mov	ax,*-8(bp)
4cb:		mov	*-6(bp),ax
4ce:		or	ax,ax
4d0:		je	4e4
4d2:		mov	bx,*-6(bp)
4d5:		mov	ax,*6(bx)
4d8:		mov	*-8(bp),ax
4db:		push	*-6(bp)
4de:		call	0
4e1:		pop	cx
4e2:		j	4c8
4e4:		decb	0
4e8:		movb	al,0
4eb:		cbw
4ec:		inc	ax
4ed:		cmp	ax,#2
4f0:		jl	4fa
4f2:		mov	ax,#0
4f5:		push	ax
4f6:		call	0
4f9:		pop	cx
4fa:		lea	sp,*-4(bp)
4fd:		pop	di
4fe:		pop	si
4ff:		pop	bp
500:		ret

_rexit:
_rexit:		push	bp
_rexit+1:	mov	bp,sp
_rexit+3:	push	si
_rexit+4:	push	di
_rexit+5:	mov	bx,128
_rexit+9:	mov	ax,(bx)
_rexit+b:	mov	cx,#8
_rexit+e:	shl	ax,cl
_rexit+10:	push	ax
_rexit+11:	call	_exit
_rexit+14:	pop	cx
_rexit+15:	pop	di
_rexit+16:	pop	si
_rexit+17:	pop	bp
_rexit+18:	ret

_exit:
_exit:		push	bp
_exit+1:	mov	bp,sp
_exit+3:	push	si
_exit+4:	push	di
_exit+5:	push	*4(bp)
_exit+8:	call	_qexit
_exit+b:	pop	cx
_exit+c:	mov	*4(bp),#2
_exit+11:	mov	bx,76
_exit+15:	mov	*28(bx),#0
_exit+1a:	mov	*30(bx),#0
_exit+1f:	j	_exit+5

_qexit:
_qexit:		push	bp
_qexit+1:	mov	bp,sp
_qexit+3:	push	si
_qexit+4:	push	di
_qexit+5:	sub	sp,*4
_qexit+8:	mov	ax,#ce
_qexit+b:	push	ax
_qexit+c:	call	0
_qexit+f:	pop	cx
_qexit+10:	mov	si,76
_qexit+14:	and	(si),#f7bf
_qexit+18:	mov	*32(si),#0
_qexit+1d:	push	si
_qexit+1e:	mov	ax,#0
_qexit+21:	push	ax
_qexit+22:	call	0
_qexit+25:	add	sp,*4
_qexit+28:	mov	*-8(bp),#d6
_qexit+2d:	cmp	*-8(bp),#118
_qexit+32:	jnb	_qexit+41
_qexit+34:	mov	bx,*-8(bp)
_qexit+37:	mov	(bx),#1
_qexit+3b:	add	*-8(bp),*2
_qexit+3f:	j	_qexit+2d
_qexit+41:	mov	da,#0
_qexit+47:	mov	*-8(bp),#a6
_qexit+4c:	cmp	*-8(bp),#ce
_qexit+51:	jnb	_qexit+73
_qexit+53:	mov	bx,*-8(bp)
_qexit+56:	mov	ax,(bx)
_qexit+58:	mov	*-6(bp),ax
_qexit+5b:	or	ax,ax
_qexit+5d:	je	_qexit+6d
_qexit+5f:	mov	bx,*-8(bp)
_qexit+62:	mov	(bx),#0
_qexit+66:	push	*-6(bp)
_qexit+69:	call	0
_qexit+6c:	pop	cx
_qexit+6d:	add	*-8(bp),*2
_qexit+71:	j	_qexit+4c
_qexit+73:	inc	da
_qexit+77:	push	80
_qexit+7b:	call	0
_qexit+7e:	pop	cx
_qexit+7f:	cmp	82,*0
_qexit+84:	je	_qexit+8e
_qexit+86:	push	82
_qexit+8a:	call	0
_qexit+8d:	pop	cx
_qexit+8e:	call	0
_qexit+91:	call	0
_qexit+94:	call	0
_qexit+97:	mov	ax,*12(si)
_qexit+9a:	mov	cx,#5
_qexit+9d:	shr	ax,cl
_qexit+9f:	push	ax
_qexit+a0:	push	*14(si)
_qexit+a3:	mov	ax,#0
_qexit+a6:	push	ax
_qexit+a7:	call	0
_qexit+aa:	add	sp,*6
_qexit+ad:	movb	*2(si),*5
_qexit+b1:	mov	ax,*4(bp)
_qexit+b4:	mov	*28(si),ax
_qexit+b7:	mov	ax,120
_qexit+ba:	mov	dx,122
_qexit+be:	add	ax,118
_qexit+c2:	adc	dx,11a
_qexit+c6:	mov	*16(si),ax
_qexit+c9:	mov	*18(si),dx
_qexit+cc:	mov	ax,124
_qexit+cf:	mov	dx,126
_qexit+d3:	add	ax,11c
_qexit+d7:	adc	dx,11e
_qexit+db:	mov	*20(si),ax
_qexit+de:	mov	*22(si),dx
_qexit+e1:	mov	di,#22
_qexit+e4:	cmp	di,0
_qexit+e8:	jnb	659
_qexit+ea:	mov	ax,*8(si)
_qexit+ed:	cmp	ax,*10(di)
_qexit+f0:	jne	647
_qexit+f2:	mov	ax,#22
_qexit+f5:	push	ax
_qexit+f6:	call	0
_qexit+f9:	pop	cx
_qexit+fa:	mov	*10(di),#1
63a:		cmpb	*2(di),*6
63e:		jne	654
640:		push	di
641:		call	0
644:		pop	cx
645:		j	654
647:		mov	ax,*10(si)
64a:		cmp	ax,*8(di)
64d:		jne	654
64f:		push	di
650:		call	0
653:		pop	cx
654:		add	di,*22
657:		j	_qexit+e4
659:		or	(si),#1000
65d:		call	0
660:		lea	sp,*-4(bp)
663:		pop	di
664:		pop	si
665:		pop	bp
666:		ret

_wait:
_wait:		push	bp
_wait+1:	mov	bp,sp
_wait+3:	push	si
_wait+4:	push	di
_wait+5:	xor	di,di
_wait+7:	mov	si,#22
_wait+a:	cmp	si,0
_wait+e:	jb	_wait+13
_wait+10:	jmp	_wait+b9
_wait+13:	mov	bx,76
_wait+17:	mov	ax,*10(si)
_wait+1a:	cmp	ax,*8(bx)
_wait+1d:	jne	_wait+88
_wait+1f:	inc	di
_wait+20:	cmpb	*2(si),*5
_wait+24:	jne	_wait+84
_wait+26:	mov	bx,128
_wait+2a:	mov	ax,*8(si)
_wait+2d:	mov	(bx),ax
_wait+2f:	mov	bx,128
_wait+33:	mov	ax,*28(si)
_wait+36:	mov	*-12(bx),ax
_wait+39:	movb	*2(si),*0
_wait+3d:	mov	*8(si),#0
_wait+42:	mov	*10(si),#0
_wait+47:	mov	*28(si),#0
_wait+4c:	mov	*30(si),#0
_wait+51:	mov	*26(si),#0
_wait+56:	mov	(si),#0
_wait+5a:	mov	ax,124
_wait+5d:	mov	dx,126
_wait+61:	add	ax,*20(si)
_wait+64:	adc	dx,*22(si)
_wait+67:	mov	124,ax
_wait+6a:	mov	126,dx
_wait+6e:	mov	ax,120
_wait+71:	mov	dx,122
_wait+75:	add	ax,*16(si)
_wait+78:	adc	dx,*18(si)
_wait+7b:	mov	120,ax
_wait+7e:	mov	122,dx
_wait+82:	j	_wait+d3
_wait+84:	cmpb	*2(si),*6
_wait+88:	jne	_wait+b3
_wait+8a:
data address not found
_wait+8c:	addb	(si),al
_wait+8e:	jne	_wait+b3
_wait+90:	or	(si),#400
_wait+94:	mov	bx,128
_wait+98:	mov	ax,*8(si)
_wait+9b:	mov	(bx),ax
_wait+9d:	push	si
_wait+9e:	call	0
_wait+a1:	pop	cx
_wait+a2:	mov	cx,#8
_wait+a5:	shl	ax,cl
_wait+a7:	or	ax,#7f
_wait+aa:	mov	bx,128
_wait+ae:	mov	*-12(bx),ax
_wait+b1:	j	_wait+d3
_wait+b3:	add	si,*22
_wait+b6:	jmp	_wait+a
_wait+b9:	or	di,di
_wait+bb:	je	_wait+ce
_wait+bd:	mov	ax,#28
_wait+c0:	push	ax
_wait+c1:	push	76
_wait+c5:	call	0
_wait+c8:	add	sp,*4
_wait+cb:	jmp	_wait+5
_wait+ce:	movb	71,*a
_wait+d3:	pop	di
_wait+d4:	pop	si
_wait+d5:	pop	bp
_wait+d6:	ret

_fork:
_fork:		push	bp
_fork+1:	mov	bp,sp
_fork+3:	push	si
_fork+4:	push	di
_fork+5:	sub	sp,*4
_fork+8:	mov	bx,76
_fork+c:	mov	ax,(bx)
_fork+e:	test	ax,#7f
_fork+11:	je	_fork+1b
_fork+13:	movb	71,*d
_fork+18:	jmp	_fork+a4
_fork+1b:	mov	bx,76
_fork+1f:	mov	ax,*16(bx)
_fork+22:	mov	bx,76
_fork+26:	add	ax,*18(bx)
_fork+29:	mov	*-6(bp),ax
_fork+2c:	push	*-6(bp)
_fork+2f:	mov	ax,#0
_fork+32:	push	ax
_fork+33:	call	0
_fork+36:	add	sp,*4
_fork+39:	mov	*-8(bp),ax
_fork+3c:	or	ax,ax
_fork+3e:	je	_fork+87
_fork+40:	push	*-8(bp)
_fork+43:	push	*-6(bp)
_fork+46:	mov	ax,#0
_fork+49:	push	ax
_fork+4a:	call	0
_fork+4d:	add	sp,*6
_fork+50:	mov	*-6(bp),#0
_fork+55:	xor	si,si
_fork+57:	mov	di,0
_fork+5b:	cmp	di,#44
_fork+5f:	jb	_fork+85
_fork+61:	cmpb	*2(di),*0
_fork+65:	jne	_fork+6b
_fork+67:	mov	si,di
_fork+69:	j	_fork+80
_fork+6b:	movb	al,*4(di)
_fork+6e:	and	ax,#ff
_fork+71:	movb	dl,74
_fork+75:	and	dx,#ff
_fork+79:	cmp	ax,dx
_fork+7b:	jne	_fork+80
_fork+7d:	inc	*-6(bp)
_fork+80:	sub	di,*22
_fork+83:	j	_fork+5b
_fork+85:	or	si,si
_fork+87:	je	_fork+9f
_fork+89:	cmpb	72,*0
_fork+8e:	je	_fork+a6
_fork+90:	mov	ax,*-6(bp)
_fork+93:	cmp	ax,0
_fork+97:	jnbe	_fork+9f
_fork+99:	cmp	si,0
_fork+9d:	jne	_fork+a6
_fork+9f:	movb	71,*b
_fork+a4:	j	_fork+f0
_fork+a6:	call	0
_fork+a9:	or	ax,ax
_fork+ab:	je	_fork+e7
_fork+ad:	mov	bx,128
_fork+b1:	mov	(bx),#0
_fork+b5:	mov	118,#0
_fork+bb:	mov	11a,#0
_fork+c1:	mov	11c,#0
_fork+c7:	mov	11e,#0
_fork+cd:	mov	120,#0
_fork+d3:	mov	122,#0
_fork+d9:	mov	124,#0
_fork+df:	mov	126,#0
_fork+e5:	j	_fork+f0
_fork+e7:	mov	bx,128
_fork+eb:	mov	ax,*8(si)
_fork+ee:	mov	(bx),ax
_fork+f0:	lea	sp,*-4(bp)
_fork+f3:	pop	di
_fork+f4:	pop	si
_fork+f5:	pop	bp
_fork+f6:	ret

_sbreak:
_sbreak:	push	bp
_sbreak+1:	mov	bp,sp
_sbreak+3:	push	si
_sbreak+4:	push	di
_sbreak+5:	push	cx
_sbreak+6:	mov	di,76
_sbreak+a:	mov	bx,128
_sbreak+e:	mov	ax,(bx)
_sbreak+10:	add	ax,#1ff
_sbreak+13:	mov	cx,#9
_sbreak+16:	shr	ax,cl
_sbreak+18:	inc	ax
_sbreak+19:	inc	ax
_sbreak+1a:	mov	si,ax
_sbreak+1c:	cmp	*18(di),*0
_sbreak+20:	je	_sbreak+33
_sbreak+22:	mov	ax,#82
_sbreak+25:	sub	ax,*18(di)
_sbreak+28:	cmp	si,ax
_sbreak+2a:	jb	_sbreak+7d
_sbreak+2c:	movb	71,*c
_sbreak+31:	j	_sbreak+9d
_sbreak+33:	cmp	si,#82
_sbreak+37:	jnb	_sbreak+2c
_sbreak+39:	cmp	si,*14(di)
_sbreak+3c:	jbe	_sbreak+65
_sbreak+3e:	call	0
_sbreak+41:	mov	ax,#800
_sbreak+44:	mov	cx,#9
_sbreak+47:	shr	ax,cl
_sbreak+49:	add	ax,si
_sbreak+4b:	mov	*-6(bp),ax
_sbreak+4e:	cmp	ax,#82
_sbreak+51:	jbe	_sbreak+58
_sbreak+53:	mov	*-6(bp),#82
_sbreak+58:	push	*-6(bp)
_sbreak+5b:	call	0
_sbreak+5e:	pop	cx
_sbreak+5f:	or	ax,ax
_sbreak+61:	jne	_sbreak+7d
_sbreak+63:	j	_sbreak+2c
_sbreak+65:	mov	ax,#800
_sbreak+68:	mov	cx,#9
_sbreak+6b:	shr	ax,cl
_sbreak+6d:	shl	ax
_sbreak+6f:	mov	dx,*14(di)
_sbreak+72:	sub	dx,ax
_sbreak+74:	cmp	si,dx
_sbreak+76:	jnb	_sbreak+7d
_sbreak+78:	push	si
_sbreak+79:	call	0
_sbreak+7c:	pop	cx
_sbreak+7d:	mov	ax,*16(di)
_sbreak+80:	mov	*-6(bp),ax
_sbreak+83:	mov	*16(di),si
_sbreak+86:	dec	si
_sbreak+87:	cmp	si,*-6(bp)
_sbreak+8a:	jb	_sbreak+9d
_sbreak+8c:	mov	ax,si
_sbreak+8e:	mov	cx,#5
_sbreak+91:	shl	ax,cl
_sbreak+93:	add	ax,*12(di)
_sbreak+96:	push	ax
_sbreak+97:	call	0
_sbreak+9a:	pop	cx
_sbreak+9b:	j	_sbreak+86
_sbreak+9d:	pop	cx
_sbreak+9e:	pop	di
_sbreak+9f:	pop	si
_sbreak+a0:	pop	bp
_sbreak+a1:	ret

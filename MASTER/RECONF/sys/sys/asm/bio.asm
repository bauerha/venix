_bread:		push	bp
_bread+1:	mov	bp,sp
_bread+3:	push	si
_bread+4:	push	di
_bread+5:	push	*6(bp)
_bread+8:	push	*4(bp)
_bread+b:	call	_getblk
_bread+e:	add	sp,*4
_bread+11:	mov	di,ax
_bread+13:	test	(di)
_bread+15:	addb	al,(bx+si)
_bread+17:	je	_bread+1d
_bread+19:	mov	ax,di
_bread+1b:	j	_bread+3e
_bread+1d:	or	(di),#1
_bread+21:	mov	*12(di),#ff00
_bread+26:	push	di
_bread+27:	movb	al,*5(bp)
_bread+2a:	cbw
_bread+2b:	mov	bx,ax
_bread+2d:	mov	cx,#3
_bread+30:	shl	bx,cl
_bread+32:	call	#_bdevsw+4(bx)
_bread+36:	pop	cx
_bread+37:	push	di
_bread+38:	call	_iowait
_bread+3b:	pop	cx
_bread+3c:	mov	ax,di
_bread+3e:	pop	di
_bread+3f:	pop	si
_bread+40:	pop	bp
_bread+41:	ret

_breada:
_breada:	push	bp
_breada+1:	mov	bp,sp
_breada+3:	push	si
_breada+4:	push	di
_breada+5:	xor	di,di
_breada+7:	push	*6(bp)
_breada+a:	push	*4(bp)
_breada+d:	call	_incore
_breada+10:	add	sp,*4
_breada+13:	or	ax,ax
_breada+15:	jne	_breada+45
_breada+17:	push	*6(bp)
_breada+1a:	push	*4(bp)
_breada+1d:	call	_getblk
_breada+20:	add	sp,*4
_breada+23:	mov	di,ax
_breada+25:	test	(di)
_breada+27:	addb	al,(bx+si)
_breada+29:	jne	_breada+45
_breada+2b:	or	(di),#1
_breada+2f:	mov	*12(di),#ff00
_breada+34:	push	di
_breada+35:	movb	al,*5(bp)
_breada+38:	cbw
_breada+39:	mov	bx,ax
_breada+3b:	mov	cx,#3
_breada+3e:	shl	bx,cl
_breada+40:	call	#_bdevsw+4(bx)
_breada+44:	pop	cx
_breada+45:	cmp	*8(bp),*0
_breada+49:	je	_breada+98
_breada+4b:	push	*8(bp)
_breada+4e:	push	*4(bp)
_breada+51:	call	_incore
_breada+54:	add	sp,*4
_breada+57:	or	ax,ax
_breada+59:	jne	_breada+98
_breada+5b:	cmp	_breeli+6,#_breeli
_breada+61:	je	_breada+98
_breada+63:	push	*8(bp)
_breada+66:	push	*4(bp)
_breada+69:	call	_getblk
_breada+6c:	add	sp,*4
_breada+6f:	mov	si,ax
_breada+71:	test	(si)
_breada+73:	addb	al,(bx+si)
_breada+75:	je	_breada+7e
_breada+77:	push	si
_breada+78:	call	_brelse
_breada+7b:	pop	cx
_breada+7c:	j	_breada+98
_breada+7e:	or	(si),#101
_breada+82:	mov	*12(si),#ff00
_breada+87:	push	si
_breada+88:	movb	al,*5(bp)
_breada+8b:	cbw
_breada+8c:	mov	bx,ax
_breada+8e:	mov	cx,#3
_breada+91:	shl	bx,cl
_breada+93:	call	#_bdevsw+4(bx)
_breada+97:	pop	cx
_breada+98:	or	di,di
_breada+9a:	jne	_breada+aa
_breada+9c:	push	*6(bp)
_breada+9f:	push	*4(bp)
_breada+a2:	call	_bread
_breada+a5:	add	sp,*4
_breada+a8:	j	_breada+b1
_breada+aa:	push	di
_breada+ab:	call	_iowait
_breada+ae:	pop	cx
_breada+af:	mov	ax,di
_breada+b1:	pop	di
_breada+b2:	pop	si
_breada+b3:	pop	bp
_breada+b4:	ret

_bwrite:
_bwrite:	push	bp
_bwrite+1:	mov	bp,sp
_bwrite+3:	push	si
_bwrite+4:	push	di
_bwrite+5:	mov	di,*4(bp)
_bwrite+8:	mov	si,(di)
_bwrite+a:	and	(di),#fdf8
_bwrite+e:	mov	*12(di),#ff00
_bwrite+13:	push	di
_bwrite+14:	movb	al,*11(di)
_bwrite+17:	cbw
_bwrite+18:	mov	bx,ax
_bwrite+1a:	mov	cx,#3
_bwrite+1d:	shl	bx,cl
_bwrite+1f:	call	#_bdevsw+4(bx)
_bwrite+23:	pop	cx
_bwrite+24:	test	(si)
_bwrite+26:	addb	(bx+di),al
_bwrite+28:	jne	_bwrite+36
_bwrite+2a:	push	di
_bwrite+2b:	call	_iowait
_bwrite+2e:	pop	cx
_bwrite+2f:	push	di
_bwrite+30:	call	_brelse
_bwrite+33:	pop	cx
_bwrite+34:	j	_bwrite+4a
_bwrite+36:	test	(si)
_bwrite+38:	addb	(bp+si),al
_bwrite+3a:	je	_bwrite+45
_bwrite+3c:	mov	bx,*4(bp)
_bwrite+3f:	or	(bx),#80
_bwrite+43:	j	_bwrite+4a
_bwrite+45:	push	di
_bwrite+46:	call	_geterro
_bwrite+49:	pop	cx
_bwrite+4a:	pop	di
_bwrite+4b:	pop	si
_bwrite+4c:	pop	bp
_bwrite+4d:	ret

_bdwrite:
_bdwrite:	push	bp
_bdwrite+1:	mov	bp,sp
_bdwrite+3:	push	si
_bdwrite+4:	push	di
_bdwrite+5:	mov	di,*4(bp)
_bdwrite+8:	movb	al,*11(di)
_bdwrite+b:	cbw
_bdwrite+c:	mov	bx,ax
_bdwrite+e:	mov	cx,#3
_bdwrite+11:	shl	bx,cl
_bdwrite+13:	mov	si,#_bdevsw+6(bx)
_bdwrite+17:	cmp	si,#_tmtab
_bdwrite+1b:	jne	_bdwrite+24
_bdwrite+1d:	push	di
_bdwrite+1e:	call	_bawrite
_bdwrite+21:	pop	cx
_bdwrite+22:	j	_bdwrite+2d
_bdwrite+24:	or	(di),#202
_bdwrite+28:	push	di
_bdwrite+29:	call	_brelse
_bdwrite+2c:	pop	cx
_bdwrite+2d:	pop	di
_bdwrite+2e:	pop	si
_bdwrite+2f:	pop	bp
_bdwrite+30:	ret

_bawrite:
_bawrite:	push	bp
_bawrite+1:	mov	bp,sp
_bawrite+3:	push	si
_bawrite+4:	push	di
_bawrite+5:	mov	di,*4(bp)
_bawrite+8:	or	(di),#100
_bawrite+c:	push	di
_bawrite+d:	call	_bwrite
_bawrite+10:	pop	cx
_bawrite+11:	pop	di
_bawrite+12:	pop	si
_bawrite+13:	pop	bp
_bawrite+14:	ret

_brelse:
_brelse:	push	bp
_brelse+1:	mov	bp,sp
_brelse+3:	push	si
_brelse+4:	push	di
_brelse+5:	push	cx
_brelse+6:	mov	di,*4(bp)
_brelse+9:	test	(di)
_brelse+b:	inc	ax
_brelse+c:	addb	*5(si),dh
_brelse+f:	push	di
_brelse+10:	call	_wakeup
_brelse+13:	pop	cx
_brelse+14:	test	_bfreeli
_brelse+18:	inc	ax
_brelse+19:	addb	*14(si),dh
_brelse+1c:	and	_bfreeli,#ffbf
_brelse+22:	mov	ax,#_bfreeli
_brelse+25:	push	ax
_brelse+26:	call	_wakeup
_brelse+29:	pop	cx
_brelse+2a:	test	(di)
_brelse+2c:	addb	al,*0
_brelse+2e:	je	_brelse+34
_brelse+30:	movb	*10(di),*ff
_brelse+34:	call	_spl1
_brelse+37:	mov	*-6(bp),ax
_brelse+3a:	mov	bx,*4(bp)
_brelse+3d:	mov	ax,(bx)
_brelse+3f:	test	ax,#80
_brelse+42:	je	_brelse+58
_brelse+44:	mov	si,#_bfreeli+6
_brelse+47:	mov	bx,(si)
_brelse+49:	mov	*8(bx),di
_brelse+4c:	mov	ax,(si)
_brelse+4e:	mov	*6(di),ax
_brelse+51:	mov	*8(di),#_bfreeli
_brelse+56:	j	_brelse+6a
_brelse+58:	mov	si,#_bfreeli+8
_brelse+5b:	mov	bx,(si)
_brelse+5d:	mov	*6(bx),di
_brelse+60:	mov	ax,(si)
_brelse+62:	mov	*8(di),ax
_brelse+65:	mov	*6(di),#_bfreeli
_brelse+6a:	mov	(si),di
_brelse+6c:	and	(di),#fe37
_brelse+70:	push	*-6(bp)
_brelse+73:	call	_splx
_brelse+76:	pop	cx
_brelse+77:	pop	cx
_brelse+78:	pop	di
_brelse+79:	pop	si
_brelse+7a:	pop	bp
_brelse+7b:	ret

_incore:
_incore:	push	bp
_incore+1:	mov	bp,sp
_incore+3:	push	si
_incore+4:	push	di
_incore+5:	call	_spl1
_incore+8:	movb	al,*5(bp)
_incore+b:	cbw
_incore+c:	mov	bx,ax
_incore+e:	mov	cx,#3
_incore+11:	shl	bx,cl
_incore+13:	mov	si,#_bdevsw+6(bx)
_incore+17:	mov	di,*2(si)
_incore+1a:	cmp	di,si
_incore+1c:	je	_incore+3a
_incore+1e:	mov	ax,*18(di)
_incore+21:	cmp	ax,*6(bp)
_incore+24:	jne	_incore+35
_incore+26:	mov	ax,*10(di)
_incore+29:	cmp	ax,*4(bp)
_incore+2c:	jne	_incore+35
_incore+2e:	call	_spl0
_incore+31:	mov	ax,di
_incore+33:	j	_incore+3f
_incore+35:	mov	di,*2(di)
_incore+38:	j	_incore+1a
_incore+3a:	call	_spl0
_incore+3d:	xor	ax,ax
_incore+3f:	pop	di
_incore+40:	pop	si
_incore+41:	pop	bp
_incore+42:	ret

_getblk:
_getblk:	push	bp
_getblk+1:	mov	bp,sp
_getblk+3:	push	si
_getblk+4:	push	di
_getblk+5:	movb	al,*5(bp)
_getblk+8:	cbw
_getblk+9:	cmp	ax,_nblkdev
_getblk+d:	jl	_getblk+17
_getblk+f:	lea	ax,*-4(bp)
_getblk+12:	push	ax
_getblk+13:	call	_panic
_getblk+16:	pop	cx
_getblk+17:	call	_spl1
_getblk+1a:	cmp	*4(bp),*0
_getblk+1e:	jnl	_getblk+25
_getblk+20:	mov	si,#_bfreeli
_getblk+23:	j	_getblk+7f
_getblk+25:	movb	al,*5(bp)
_getblk+28:	cbw
_getblk+29:	mov	bx,ax
_getblk+2b:	mov	cx,#3
_getblk+2e:	shl	bx,cl
_getblk+30:	mov	si,#_bdevsw+6(bx)
_getblk+34:	or	si,si
_getblk+36:	jne	_getblk+40
_getblk+38:	lea	ax,*-4(bp)
_getblk+3b:	push	ax
_getblk+3c:	call	_panic
_getblk+3f:	pop	cx
_getblk+40:	mov	di,*2(si)
_getblk+43:	cmp	di,si
_getblk+45:	je	_getblk+7f
_getblk+47:	mov	ax,*18(di)
_getblk+4a:	cmp	ax,*6(bp)
_getblk+4d:	jne	_getblk+7a
_getblk+4f:	mov	ax,*10(di)
_getblk+52:	cmp	ax,*4(bp)
_getblk+55:	jne	_getblk+7a
_getblk+57:	test	(di)
_getblk+59:	orb	(bx+si),al
_getblk+5b:	je	_getblk+6e
_getblk+5d:	or	(di),#40
_getblk+61:	mov	ax,#ffcf
_getblk+64:	push	ax
_getblk+65:	push	di
_getblk+66:	call	_sleep
_getblk+69:	add	sp,*4
_getblk+6c:	j	_getblk+17
_getblk+6e:	push	di
_getblk+6f:	call	_notavai
_getblk+72:	pop	cx
_getblk+73:	call	_spl0
_getblk+76:	mov	ax,di
_getblk+78:	j	_getblk+f5
_getblk+7a:	mov	di,*2(di)
_getblk+7d:	j	_getblk+43
_getblk+7f:	cmp	_bfreeli+6,#_bfreeli
_getblk+85:	jne	_getblk+9e
_getblk+87:	or	_bfreeli,#40
_getblk+8d:	mov	ax,#ffcf
_getblk+90:	push	ax
_getblk+91:	mov	ax,#_bfreeli
_getblk+94:	push	ax
_getblk+95:	call	_sleep
_getblk+98:	add	sp,*4
_getblk+9b:	jmp	_getblk+17
_getblk+9e:	mov	di,_bfreeli+6
_getblk+a2:	push	di
_getblk+a3:	call	_notavai
_getblk+a6:	pop	cx
_getblk+a7:	test	(di)
_getblk+a9:	addb	(bp+si),al
_getblk+ab:	je	_getblk+bc
_getblk+ad:	call	_spl0
_getblk+b0:	or	(di),#100
_getblk+b4:	push	di
_getblk+b5:	call	_bwrite
_getblk+b8:	pop	cx
_getblk+b9:	jmp	_getblk+17
_getblk+bc:	mov	(di),#8
_getblk+c0:	mov	bx,*4(di)
_getblk+c3:	mov	ax,*2(di)
_getblk+c6:	mov	*2(bx),ax
_getblk+c9:	mov	bx,*2(di)
_getblk+cc:	mov	ax,*4(di)
_getblk+cf:	mov	*4(bx),ax
_getblk+d2:	mov	ax,*2(si)
_getblk+d5:	mov	*2(di),ax
_getblk+d8:	mov	*4(di),si
_getblk+db:	mov	bx,*2(si)
_getblk+de:	mov	*4(bx),di
_getblk+e1:	mov	*2(si),di
_getblk+e4:	call	_spl0
_getblk+e7:	mov	ax,*4(bp)
_getblk+ea:	mov	*10(di),ax
_getblk+ed:	mov	ax,*6(bp)
_getblk+f0:	mov	*18(di),ax
_getblk+f3:	mov	ax,di
_getblk+f5:	pop	di
_getblk+f6:	pop	si
_getblk+f7:	pop	bp
_getblk+f8:	ret

_iowait:
_iowait:	push	bp
_iowait+1:	mov	bp,sp
_iowait+3:	push	si
_iowait+4:	push	di
_iowait+5:	mov	di,*4(bp)
_iowait+8:	call	_spl1
_iowait+b:	test	(di)
_iowait+d:	addb	al,(bx+si)
_iowait+f:	jne	_iowait+1e
_iowait+11:	mov	ax,#ffce
_iowait+14:	push	ax
_iowait+15:	push	di
_iowait+16:	call	_sleep
_iowait+19:	add	sp,*4
_iowait+1c:	j	_iowait+b
_iowait+1e:	call	_spl0
_iowait+21:	push	di
_iowait+22:	call	_geterro
_iowait+25:	pop	cx
_iowait+26:	pop	di
_iowait+27:	pop	si
_iowait+28:	pop	bp
_iowait+29:	ret

_notavai:
_notavai:	push	bp
_notavai+1:	mov	bp,sp
_notavai+3:	push	si
_notavai+4:	push	di
_notavai+5:	mov	di,*4(bp)
_notavai+8:	call	_spl1
_notavai+b:	mov	si,ax
_notavai+d:	mov	bx,*8(di)
_notavai+10:	mov	ax,*6(di)
_notavai+13:	mov	*6(bx),ax
_notavai+16:	mov	bx,*6(di)
_notavai+19:	mov	ax,*8(di)
_notavai+1c:	mov	*8(bx),ax
_notavai+1f:	or	(di),#8
_notavai+23:	push	si
_notavai+24:	call	_splx
_notavai+27:	pop	cx
_notavai+28:	pop	di
_notavai+29:	pop	si
_notavai+2a:	pop	bp
_notavai+2b:	ret

_iodone:
_iodone:	push	bp
_iodone+1:	mov	bp,sp
_iodone+3:	push	si
_iodone+4:	push	di
_iodone+5:	push	cx
_iodone+6:	mov	si,*4(bp)
_iodone+9:	mov	di,si
_iodone+b:	or	(di),#2
_iodone+f:	test	(di)
_iodone+11:	addb	(bx+di),al
_iodone+13:	je	_iodone+1c
_iodone+15:	push	si
_iodone+16:	call	_brelse
_iodone+19:	pop	cx
_iodone+1a:	j	_iodone+8a
_iodone+1c:	test	(di)
_iodone+1e:	adcb	(bx+si),al
_iodone+20:	je	_iodone+27

_iodone+22:	test	*10(si)
_iodone+24:	orb	al,#7400(bx+si)

_iodone+27:	je	_iodone+8c
_iodone+29:	mov	ax,*22(si)
_iodone+2c:	mov	*-6(bp),ax
_iodone+2f:	mov	bx,ax
_iodone+31:	dec	(bx)
_iodone+33:	mov	ax,(bx)
_iodone+35:	inc	ax
_iodone+36:	test	ax,#200
_iodone+39:	je	_iodone+49
_iodone+3b:	push	*-6(bp)
_iodone+3e:	call	_wakeup
_iodone+41:	pop	cx
_iodone+42:	mov	bx,*-6(bp)
_iodone+45:	and	(bx),#fdff
_iodone+49:	test	(di)
_iodone+4b:	addb	al,*0
_iodone+4d:	je	_iodone+5e
_iodone+4f:	mov	ax,#6
_iodone+52:	push	ax
_iodone+53:	push	*-6(bp)
_iodone+56:	call	_psignal
_iodone+59:	add	sp,*4
_iodone+5c:	j	_iodone+72
_iodone+5e:	test	*10(si)
_iodone+60:	orb	al,*0(bx+si) --> inc	ax; addb	*13(si),dh
_iodone+63:	je	_iodone+72
_iodone+65:	mov	ax,#10
_iodone+68:	push	ax
_iodone+69:	push	*-6(bp)
_iodone+6c:	call	_psignal
_iodone+6f:	add	sp,*4
_iodone+72:	mov	(di),#0
_iodone+76:	cmpb	_rawbusy,*0
_iodone+7b:	je	_iodone+95
_iodone+7d:	movb	_rawbusy,*0
_iodone+82:	mov	ax,#_rawbuf
_iodone+85:	push	ax
_iodone+86:	call	_wakeup
_iodone+89:	pop	cx
_iodone+8a:	j	_iodone+95
_iodone+8c:	and	(di),#ffbf
_iodone+90:	push	si
_iodone+91:	call	_wakeup
_iodone+94:	pop	cx
_iodone+95:	pop	cx
_iodone+96:	pop	di
_iodone+97:	pop	si
_iodone+98:	pop	bp
_iodone+99:	ret

_clrbuf:
_clrbuf:	push	bp
_clrbuf+1:	mov	bp,sp
_clrbuf+3:	push	si
_clrbuf+4:	push	di
_clrbuf+5:	mov	bx,*4(bp)
_clrbuf+8:	mov	di,*14(bx)
_clrbuf+b:	mov	si,#100
_clrbuf+e:	mov	bx,di
_clrbuf+10:	inc	di
_clrbuf+11:	inc	di
_clrbuf+12:	mov	(bx),#0
_clrbuf+16:	dec	si
_clrbuf+17:	jne	_clrbuf+e
_clrbuf+19:	mov	bx,*4(bp)
_clrbuf+1c:	mov	*20(bx),#0
_clrbuf+21:	pop	di
_clrbuf+22:	pop	si
_clrbuf+23:	pop	bp
_clrbuf+24:	ret

_binit:
_binit:		push	bp
_binit+1:	mov	bp,sp
_binit+3:	push	si
_binit+4:	push	di
_binit+5:	sub	sp,*4
_binit+8:	mov	_bfreeli+8,#_bfreeli
_binit+e:	mov	_bfreeli+6,#_bfreeli
_binit+14:	mov	_bfreeli+4,#_bfreeli
_binit+1a:	mov	_bfreeli+2,#_bfreeli
_binit+20:	mov	*-6(bp),#_buffers
_binit+25:	mov	di,#_buf
_binit+28:	cmp	di,_lbuf
_binit+2c:	jnb	_binit+72
_binit+2e:	mov	(di),#8
_binit+32:	mov	*10(di),#ffff
_binit+37:	mov	ax,*-6(bp)
_binit+3a:	mov	*14(di),ax
_binit+3d:	add	*-6(bp),#202
_binit+42:	call	_getds
_binit+45:	mov	cx,#4
_binit+48:	shl	ax,cl
_binit+4a:	add	ax,*-6(bp)
_binit+4d:	cmp	ax,#200
_binit+50:	jb	_binit+6d
_binit+52:	mov	*4(di),#_bfreeli
_binit+57:	mov	ax,_bfreeli+2
_binit+5a:	mov	*2(di),ax
_binit+5d:	mov	bx,_bfreeli+2
_binit+61:	mov	*4(bx),di
_binit+64:	mov	_bfreeli+2,di
_binit+68:	push	di
_binit+69:	call	_brelse
_binit+6c:	pop	cx
_binit+6d:	add	di,*18
_binit+70:	j	_binit+28
_binit+72:	mov	*-6(bp),#0
_binit+77:	mov	*-8(bp),#_bdevsw
_binit+7c:	mov	bx,*-8(bp)
_binit+7f:	cmp	(bx),*0
_binit+82:	je	_binit+9d
_binit+84:	mov	bx,*-8(bp)
_binit+87:	mov	si,*6(bx)
_binit+8a:	or	si,si
_binit+8c:	je	_binit+94
_binit+8e:	mov	*2(si),si
_binit+91:	mov	*4(si),si
_binit+94:	inc	*-6(bp)
_binit+97:	add	*-8(bp),*8
_binit+9b:	j	_binit+7c
_binit+9d:	mov	ax,*-6(bp)
_binit+a0:	mov	_nblkdev,ax
_binit+a3:	lea	sp,*-4(bp)
_binit+a6:	pop	di
_binit+a7:	pop	si
_binit+a8:	pop	bp
_binit+a9:	ret

_swap:
_swap:		push	bp
_swap+1:	mov	bp,sp
_swap+3:	push	si
_swap+4:	push	di
_swap+5:	push	cx
_swap+6:	mov	ax,*8(bp)
_swap+9:	mov	*-6(bp),ax
_swap+c:	cmp	ax,#7f
_swap+f:	jbe	_swap+39
_swap+11:	push	*10(bp)
_swap+14:	mov	ax,*-6(bp)
_swap+17:	sub	ax,#7f
_swap+1a:	push	ax
_swap+1b:	mov	ax,#7f
_swap+1e:	mov	cx,#5
_swap+21:	shl	ax,cl
_swap+23:	add	ax,*6(bp)
_swap+26:	push	ax
_swap+27:	mov	ax,*4(bp)
_swap+2a:	add	ax,#7f
_swap+2d:	push	ax
_swap+2e:	call	_swap
_swap+31:	add	sp,*8
_swap+34:	mov	*-6(bp),#7f
_swap+39:	mov	di,#_swbuf0
_swap+3c:	test	(di)
_swap+3e:	orb	(bx+si),al
_swap+40:	je	_swap+4d
_swap+42:	test	_swbuf1
_swap+46:	inc	ax
_swap+47:	addb	*3(di),dh
_swap+4a:	mov	di,#_xwbuf1
_swap+4d:	mov	si,di
_swap+4f:	call	_spl1
_swap+52:	test	(si)
_swap+54:	orb	(bx+si),al
_swap+56:	je	_swap+69
_swap+58:	or	(si),#40
_swap+5c:	mov	ax,#ff9d
_swap+5f:	push	ax
_swap+60:	push	si
_swap+61:	call	_sleep
_swap+64:	add	sp,*4
_swap+67:	j	_swap+52
_swap+69:	mov	ax,*10(bp)
_swap+6c:	or	ax,#18
_swap+6f:	mov	(si),ax
_swap+71:	mov	ax,_swapdev
_swap+74:	mov	*10(di),ax
_swap+77:	mov	ax,*4(bp)
_swap+7a:	mov	*18(di),ax
_swap+7d:	mov	ax,*-6(bp)
_swap+80:	mov	cx,#9
_swap+83:	shl	ax,cl
_swap+85:	shr	ax
_swap+87:	neg	ax
_swap+89:	mov	*12(di),ax
_swap+8c:	mov	ax,*6(bp)
_swap+8f:	mov	cx,#4
_swap+92:	shl	ax,cl
_swap+94:	mov	*14(di),ax
_swap+97:	mov	ax,*6(bp)
_swap+9a:	mov	cx,#c
_swap+9d:	shr	ax,cl
_swap+9f:	mov	*16(di),ax
_swap+a2:	push	di
_swap+a3:	mov	ax,_swapdev
_swap+a6:	mov	cx,#8
_swap+a9:	shr	ax,cl
_swap+ab:	mov	bx,ax
_swap+ad:	mov	cx,#3
_swap+b0:	shl	bx,cl
_swap+b2:	call	#_bdevsw+4(bx)
_swap+b6:	pop	cx
_swap+b7:	call	_spl1
_swap+ba:	test	(si)
_swap+bc:	addb	al,(bx+si)
_swap+be:	jne	_swap+cd
_swap+c0:	mov	ax,#ff9c
_swap+c3:	push	ax
_swap+c4:	push	si
_swap+c5:	call	_sleep
_swap+c8:	add	sp,*4
_swap+cb:	j	_swap+ba
_swap+cd:	test	(si)
_swap+cf:	inc	ax
_swap+d0:	addb	*5(si),dh
_swap+d3:	push	di
_swap+d4:	call	_wakeup
_swap+d7:	pop	cx
_swap+d8:	call	_spl0
_swap+db:	test	(si)
_swap+dd:	addb	al,*0
_swap+df:	je	_swap+e9
_swap+e1:	mov	ax,#_MP_swap
_swap+e4:	push	ax
_swap+e5:	call	_panic
_swap+e8:	pop	cx
_swap+e9:	mov	(si),#0
_swap+ed:	pop	cx
_swap+ee:	pop	di
_swap+ef:	pop	si
_swap+f0:	pop	bp
_swap+f1:	ret

_bflush:
_bflush:	push	bp
_bflush+1:	mov	bp,sp
_bflush+3:	push	si
_bflush+4:	push	di
_bflush+5:	call	_spl1
_bflush+8:	mov	di,_bfreeli+6
_bflush+c:	cmp	di,#_bfreeli
_bflush+10:	je	_bflush+3b
_bflush+12:	test	(di)
_bflush+14:	addb	(bp+si),al
_bflush+16:	je	_bflush+36
_bflush+18:	cmp	*4(bp),*ff
_bflush+1c:	je	_bflush+26
_bflush+1e:	mov	ax,*4(bp)
_bflush+21:	cmp	ax,*10(di)
_bflush+24:	jne	_bflush+36
_bflush+26:	or	(di),#100
_bflush+2a:	push	di
_bflush+2b:	call	_notavai
_bflush+2e:	pop	cx
_bflush+2f:	push	di
_bflush+30:	call	_bwrite
_bflush+33:	pop	cx
_bflush+34:	j	_bflush+5
_bflush+36:	mov	di,*6(di)
_bflush+39:	j	_bflush+c
_bflush+3b:	call	_spl0
_bflush+3e:	pop	di
_bflush+3f:	pop	si
_bflush+40:	pop	bp
_bflush+41:	ret

_aphysio:
_aphysio:	push	bp
_aphysio+1:	mov	bp,sp
_aphysio+3:	push	si
_aphysio+4:	push	di
_aphysio+5:	mov	si,_u+78	*u_ubase
_aphysio+9:	mov	ax,si
_aphysio+b:	add	ax,_u+7a	u_count
_aphysio+f:	cmp	si,ax
_aphysio+11:	jnbe	_aphysio+33
_aphysio+13:	mov	bx,_u+76	*u_procp
_aphysio+17:	cmp	*18(bx),*0
_aphysio+1b:	jne	_aphysio+38

_aphysio+1d:	mov	ax,si
_aphysio+1f:	add	ax,_u+7a	u_count
_aphysio+23:	mov	bx,_u+76	*u_procp
_aphysio+27:	mov	dx,*14(bx)
_aphysio+2a:	dec	dx
_aphysio+2b:	dec	dx
_aphysio+2c:	mov	cx,#9
_aphysio+2f:	shl	dx,cl
_aphysio+31:	cmp	ax,dx
_aphysio+33:	jbe	_aphysio+38
_aphysio+35:	jmp	756 (59ae) from 58c3

_aphysio+38:	call	_spl1
_aphysio+3b:	mov	di,#_rawbuf
_aphysio+3e:	cmp	di,_lrawbuf
_aphysio+42:	jnb	_aphysio+4f
_aphysio+44:	test	(di)
_aphysio+46:	orb	(bx+si),al
_aphysio+48:	je	_aphysio+68
_aphysio+4a:	add	di,*18
_aphysio+4d:	j	_aphysio+3e

_aphysio+4f:	incb	_rawbusy
_aphysio+53:	mov	ax,#ffcf
_aphysio+56:	push	ax
_aphysio+57:	mov	ax,#_rawbuf
_aphysio+5a:	push	ax
_aphysio+5b:	call	_sleep
_aphysio+5e:	add	sp,*4
_aphysio+61:	movb	_rawbusy,*0
_aphysio+66:	j	_aphysio+3b

_aphysio+68:	mov	ax,*8(bp)	read/write flag
_aphysio+6b:	or	ax,#18
_aphysio+6e:	mov	(di),ax
_aphysio+70:	mov	ax,*6(bp)	dev
_aphysio+73:	mov	*10(di),ax
_aphysio+76:	mov	ax,si
_aphysio+78:	and	ax,#f
_aphysio+7b:	mov	*14(di),ax
_aphysio+7e:	mov	ax,si
_aphysio+80:	mov	cx,#4
_aphysio+83:	shr	ax,cl
_aphysio+85:	mov	si,ax
_aphysio+87:	add	si,_u+6		u_ds
_aphysio+8b:	mov	ax,si
_aphysio+8d:	mov	cx,#4
_aphysio+90:	shl	ax,cl
_aphysio+92:	add	*14(di),ax
_aphysio+95:	mov	ax,si
_aphysio+97:	mov	cx,#c
_aphysio+9a:	shr	ax,cl
_aphysio+9c:	mov	*16(di),ax
_aphysio+9f:	mov	ax,#fff7
_aphysio+a2:	push	ax
_aphysio+a3:	mov	ax,#_u+7c	u_offset[0]
_aphysio+a6:	push	ax
_aphysio+a7:	call	_lshift
_aphysio+aa:	add	sp,*4
_aphysio+ad:	mov	*18(di),ax
_aphysio+b0:	mov	ax,_u+7a	u_count
_aphysio+b3:	shr	ax
_aphysio+b5:	neg	ax
_aphysio+b7:	mov	*12(di),ax
_aphysio+ba:	mov	ax,_u+76	*u_procp
_aphysio+bd:	mov	*22(di),ax
_aphysio+c0:	mov	bx,_u+76	*u_procp
_aphysio+c4:	inc	(bx)
_aphysio+c6:	push	di
_aphysio+c7:	call	*4(bp)		xtstrat
_aphysio+ca:	pop	cx
_aphysio+cb:	call	_spl1
_aphysio+ce:	test	*6(bp)
_aphysio+d1:	addb	(bx+si),*74
_aphysio+d4:	or	ax,di
_aphysio+d6:	push	es
_aphysio+d7:	jp	_aphysio+d9	; jbe	_aphysio+7d
_aphysio+d9:	addb	(bx+si),al
_aphysio+db:	call	_spl0
_aphysio+de:	j	75b (59b3) from 596c
_aphysio+e0:	test	(di)
_aphysio+e2:	addb	al,(bx+si)
_aphysio+e4:	jne	_aphysio+f3
_aphysio+e6:	mov	ax,#ffce
_aphysio+e9:	push	ax
_aphysio+ea:	push	di
_aphysio+eb:	call	_sleep
_aphysio+ee:	add	sp,*4
_aphysio+f1:	j	_aphysio+e0
_aphysio+f3:	mov	bx,_u+76	*u_procp
_aphysio+f7:	dec	(bx)
_aphysio+f9:	cmpb	_rawbusy,*0
_aphysio+fe:	je	73e (5996) from 598c
736:		mov	ax,#_rawbuf
739:		push	ax
73a:		call	_wakeup
73d:		pop	cx
73e:		call	_spl0
741:		mov	ax,*20(di)
744:		neg	ax
746:		shl	ax
748:		mov	_u+7a,ax	u_count
74b:		push	di
74c:		call	_geterro
74f:		pop	cx
750:		mov	(di),#0
754:		j	75b (59b3) from 59ac
756:		movb	_u+71,*e	u_error
75b:		pop	di
75c:		pop	si
75d:		pop	bp
75e:		ret

_geterro:
_geterro:	push	bp
_geterro+1:	mov	bp,sp
_geterro+3:	push	si
_geterro+4:	push	di
_geterro+5:	mov	bx,*4(bp)
_geterro+8:	mov	ax,(bx)
_geterro+a:	test	ax,#4
_geterro+d:	je	_geterro+14
_geterro+f:	movb	_u+71,*5
_geterro+14:	pop	di
_geterro+15:	pop	si
_geterro+16:	pop	bp
_geterro+17:	ret

_aiowait:
_aiowait:	push	bp
_aiowait+1:	mov	bp,sp
_aiowait+3:	push	si
_aiowait+4:	push	di
_aiowait+5:	call	_spl1
_aiowait+8:	xor	si,si
_aiowait+a:	mov	di,#_rawbuf
_aiowait+d:	cmp	di,_lrawbuf
_aiowait+11:	jnb	_aiowait+30
_aiowait+13:	test	(di)
_aiowait+15:	orb	(bx+si),al
_aiowait+17:	je	_aiowait+2b
_aiowait+19:	mov	ax,*10(di)
_aiowait+1c:	cmp	ax,*4(bp)
_aiowait+1f:	jne	_aiowait+2b
_aiowait+21:	mov	ax,*22(di)
_aiowait+24:	cmp	ax,_u+76
_aiowait+28:	jne	_aiowait+2b
_aiowait+2a:	inc	si
_aiowait+2b:	add	di,*18
_aiowait+2e:	j	_aiowait+d
_aiowait+30:	cmp	si,*6(bp)
_aiowait+33:	jbe	_aiowait+4d
_aiowait+35:	mov	bx,_u+76
_aiowait+39:	or	(bx),#200
_aiowait+3d:	mov	ax,#1
_aiowait+40:	push	ax
_aiowait+41:	push	_u+76
_aiowait+45:	call	_sleep
_aiowait+48:	add	sp,*4
_aiowait+4b:	j	_aiowait+8
_aiowait+4d:	call	_spl0
_aiowait+50:	mov	bx,128 (a524) from 5a1f
_aiowait+54:	mov	(bx),si
_aiowait+56:	pop	di
_aiowait+57:	pop	si
_aiowait+58:	pop	bp
_aiowait+59:	ret

_swaio:
_swaio:		push	bp
_swaio+1:	mov	bp,sp
_swaio+3:	push	si
_swaio+4:	push	di
_swaio+5:	mov	di,_u+76
_swaio+9:	call	_spl1
_swaio+c:	mov	si,ax
_swaio+e:	test	(di)
_swaio+10:	aas
_swaio+11:	addb	*17(si),dh
_swaio+14:	or	(di),#200
_swaio+18:	mov	ax,#ffce
_swaio+1b:	push	ax
_swaio+1c:	push	di
_swaio+1d:	call	_sleep
_swaio+20:	add	sp,*4
_swaio+23:	j	_swaio+e
_swaio+25:	push	si
_swaio+26:	call	_splx
_swaio+29:	pop	cx
_swaio+2a:	pop	di
_swaio+2b:	pop	si
_swaio+2c:	pop	bp
_swaio+2d:	ret

_disksor:
_disksor:	push	bp
_disksor+1:	mov	bp,sp
_disksor+3:	push	si
_disksor+4:	push	di
_disksor+5:	push	cx
_disksor+6:	mov	di,*6(bp)
_disksor+9:	mov	*6(di),#0
_disksor+e:	mov	bx,*4(bp)
_disksor+11:	mov	si,*6(bx)
_disksor+14:	or	si,si
_disksor+16:	jne	_disksor+20
_disksor+18:	mov	bx,*4(bp)
_disksor+1b:	mov	*6(bx),di
_disksor+1e:	j	_disksor+8a
_disksor+20:	mov	ax,*6(si)
_disksor+23:	mov	*-6(bp),ax
_disksor+26:	or	ax,ax
_disksor+28:	je	_disksor+3a
_disksor+2a:	mov	bx,*-6(bp)
_disksor+2d:	mov	ax,*10(bx)
_disksor+30:	test	ax,#80
_disksor+33:	je	_disksor+3a
_disksor+35:	mov	si,*-6(bp)
_disksor+38:	j	_disksor+20
_disksor+3a:	test	*10(di)
_disksor+3c:	orb	al,#7500(bx+si)	; addb	(bx+si),*75
_disksor+40:	inc	ax
_disksor+41:	mov	bx,_u+76
_disksor+45:	mov	ax,(bx)
_disksor+47:	test	ax,#100
_disksor+4a:	jne	_disksor+81
_disksor+4c:	mov	ax,*6(si)
_disksor+4f:	mov	*-6(bp),ax
_disksor+52:	or	ax,ax
_disksor+54:	je	_disksor+81
_disksor+56:	mov	ax,*20(si)
_disksor+59:	cmp	ax,*20(di)
_disksor+5c:	jnle	_disksor+69
_disksor+5e:	mov	bx,*-6(bp)
_disksor+61:	mov	ax,*20(di)
_disksor+64:	cmp	ax,*20(bx)
_disksor+67:	jl	_disksor+81
_disksor+69:	mov	ax,*20(si)
_disksor+6c:	cmp	ax,*20(di)
_disksor+6f:	jl	_disksor+7c
_disksor+71:	mov	bx,*-6(bp)
_disksor+74:	mov	ax,*20(di)
_disksor+77:	cmp	ax,*20(bx)
_disksor+7a:	jnle	_disksor+81
_disksor+7c:	mov	si,*-6(bp)
_disksor+7f:	j	_disksor+4c
_disksor+81:	mov	ax,*-6(bp)
_disksor+84:	mov	*6(di),ax
_disksor+87:	mov	*6(si),di
_disksor+8a:	pop	cx
_disksor+8b:	pop	di
_disksor+8c:	pop	si
_disksor+8d:	pop	bp
_disksor+8e:	ret

_getf:		push	bp
_getf+1:	mov	bp,sp
_getf+3:	push	si
_getf+4:	push	di
_getf+5:	mov	si,*4(bp)
_getf+8:	or	si,si
_getf+a:	jl	_getf+21
_getf+c:	cmp	si,*14
_getf+f:	jnl	_getf+21
_getf+11:	mov	bx,si
_getf+13:	shl	bx
_getf+15:	mov	di,#a6(bx)
_getf+19:	or	di,di
_getf+1b:	je	_getf+21
_getf+1d:	mov	ax,di
_getf+1f:	j	_getf+28
_getf+21:	movb	71,*9
_getf+26:	xor	ax,ax
_getf+28:	pop	di
_getf+29:	pop	si
_getf+2a:	pop	bp
_getf+2b:	ret

_closef:
_closef:	push	bp
_closef+1:	mov	bp,sp
_closef+3:	push	si
_closef+4:	push	di
_closef+5:	sub	sp,*4
_closef+8:	mov	di,*4(bp)
_closef+b:	or	di,di
_closef+d:	je	_closef+22
_closef+f:	mov	bx,*4(bp)
_closef+12:	push	*2(bx)
_closef+15:	call	0
_closef+18:	pop	cx
_closef+19:	cmpb	*1(di),*1
_closef+1d:	jle	_closef+25
_closef+1f:	decb	*1(di)
_closef+22:	jmp	_closef+a7
_closef+25:	mov	si,*2(di)
_closef+28:	push	si
_closef+29:	call	0
_closef+2c:	pop	cx
_closef+2d:	movb	*1(di),*0
_closef+31:	movb	al,(di)
_closef+33:	cbw
_closef+34:	test	ax,#4
_closef+37:	je	_closef+4f
_closef+39:	and	*6(si),#fe7f
_closef+3e:	mov	ax,si
_closef+40:	inc	ax
_closef+41:	push	ax
_closef+42:	call	0
_closef+45:	pop	cx
_closef+46:	mov	ax,si
_closef+48:	inc	ax
_closef+49:	inc	ax
_closef+4a:	push	ax
_closef+4b:	call	0
_closef+4e:	pop	cx
_closef+4f:	push	si
_closef+50:	call	0
_closef+53:	pop	cx
_closef+54:	movb	al,(di)
_closef+56:	cbw
_closef+57:	and	ax,#2
_closef+5a:	mov	*-6(bp),ax
_closef+5d:	mov	ax,*14(si)
_closef+60:	mov	*-8(bp),ax
_closef+63:
data address not found
_closef+65:	clc
_closef+66:	andb	(bx+si),al
_closef+68:	jne	_closef+83
_closef+6a:	mov	di,#0
_closef+6d:	cmp	di,0
_closef+71:	jnb	_closef+83
_closef+73:	cmpb	*1(di),*0
_closef+77:	je	_closef+7e
_closef+79:	cmp	*2(di),si
_closef+7c:	je	_closef+cb
_closef+7e:	add	di,*8
_closef+81:	j	_closef+6d
_closef+83:	movb	al,*-7(bp)
_closef+86:	cbw
_closef+87:	mov	di,ax
_closef+89:	mov	ax,*6(si)
_closef+8c:	and	ax,#6000
_closef+8f:	j	_closef+c1
_closef+91:	push	*-6(bp)
_closef+94:	push	*-8(bp)
_closef+97:	mov	ax,di
_closef+99:	mov	bx,ax
_closef+9b:	mov	cx,#3
_closef+9e:	shl	bx,cl
_closef+a0:	call	#2(bx)
_closef+a4:	add	sp,*4
_closef+a7:	j	_closef+cb
_closef+a9:	push	*-6(bp)
_closef+ac:	push	*-8(bp)
_closef+af:	mov	ax,di
_closef+b1:	mov	dx,#a
_closef+b4:
data address not found
_closef+b6:	mov	bx,ax
_closef+b8:	call	#2(bx)
_closef+bc:	add	sp,*4
_closef+bf:	j	_closef+cb
_closef+c1:	cmp	ax,#2000
_closef+c4:	je	_closef+a9
_closef+c6:	cmp	ax,#6000
_closef+c9:	je	_closef+91
_closef+cb:	lea	sp,*-4(bp)
_closef+ce:	pop	di
_closef+cf:	pop	si
_closef+d0:	pop	bp
_closef+d1:	ret
_openi:
_openi:		push	bp
_openi+1:	mov	bp,sp
_openi+3:	push	si
_openi+4:	push	di
_openi+5:	mov	di,*4(bp)
_openi+8:	movb	al,*15(di)
_openi+b:	cbw
_openi+c:	mov	si,ax
_openi+e:	mov	ax,*6(di)
_openi+11:	and	ax,#6000
_openi+14:	j	_openi+50
_openi+16:	cmp	si,0
_openi+1a:	jnl	_openi+5c
_openi+1c:	push	*6(bp)
_openi+1f:	push	*14(di)
_openi+22:	mov	ax,si
_openi+24:	mov	dx,#a
_openi+27:
data address not found
_openi+29:	mov	bx,ax
_openi+2b:	call	#0(bx)
_openi+2f:	add	sp,*4
_openi+32:	j	_openi+61
_openi+34:	cmp	si,0
_openi+38:	jnl	_openi+5c
_openi+3a:	push	*6(bp)
_openi+3d:	push	*14(di)
_openi+40:	mov	bx,si
_openi+42:	mov	cx,#3
_openi+45:	shl	bx,cl
_openi+47:	call	#0(bx)
_openi+4b:	add	sp,*4
_openi+4e:	j	_openi+61
_openi+50:	cmp	ax,#2000
_openi+53:	je	_openi+16
_openi+55:	cmp	ax,#6000
_openi+58:	je	_openi+34
_openi+5a:	j	_openi+61
_openi+5c:	movb	71,*6
_openi+61:	pop	di
_openi+62:	pop	si
_openi+63:	pop	bp
_openi+64:	ret
_access:
_access:	push	bp
_access+1:	mov	bp,sp
_access+3:	push	si
_access+4:	push	di
_access+5:	mov	di,*4(bp)
_access+8:	mov	si,*6(bp)
_access+b:	cmp	si,#80
_access+f:	jne	_access+3f
_access+11:	push	*2(di)
_access+14:	call	0
_access+17:	pop	cx
_access+18:	mov	bx,ax
_access+1a:	cmpb	#19b(bx),*0
_access+1f:	je	_access+2b
_access+21:	movb	71,*1e
_access+26:	mov	ax,#1
_access+29:	j	_access+54
_access+2b:	movb	al,(di)
_access+2d:	and	ax,#ff
_access+30:	test	ax,#20
_access+33:	je	_access+3f
_access+35:	movb	71,*1a
_access+3a:	mov	ax,#1
_access+3d:	j	_access+8b
_access+3f:	cmpb	72,*0
_access+44:	jne	_access+56
_access+46:	cmp	si,*40
_access+49:	jne	_access+52
_access+4b:
data address not found
_access+4d:	push	es
_access+4e:	dec	cx
_access+4f:	addb	*59(si),dh
_access+52:	xor	ax,ax
_access+54:	j	_access+95
_access+56:	movb	al,72
_access+59:	and	ax,#ff
_access+5c:	movb	dl,*9(di)
_access+5f:	and	dx,#ff
_access+63:	cmp	ax,dx
_access+65:	je	_access+82
_access+67:	mov	cx,#3
_access+6a:	sar	si,cl
_access+6c:	movb	al,73
_access+6f:	and	ax,#ff
_access+72:	movb	dl,*10(di)
_access+75:	and	dx,#ff
_access+79:	cmp	ax,dx
_access+7b:	je	_access+82
_access+7d:	mov	cx,#3
_access+80:	sar	si,cl
_access+82:	mov	ax,*6(di)
_access+85:	test	si,ax
_access+87:	je	_access+8d
_access+89:	xor	ax,ax
_access+8b:	j	_access+95
_access+8d:	movb	71,*d
_access+92:	mov	ax,#1
_access+95:	pop	di
_access+96:	pop	si
_access+97:	pop	bp
_access+98:	ret
_owner:
_owner:		push	bp
_owner+1:	mov	bp,sp
_owner+3:	push	si
_owner+4:	push	di
_owner+5:	xor	ax,ax
_owner+7:	push	ax
_owner+8:	mov	ax,#0
_owner+b:	push	ax
_owner+c:	call	0
_owner+f:	add	sp,*4
_owner+12:	mov	di,ax
_owner+14:	or	ax,ax
_owner+16:	jne	_owner+1c
_owner+18:	xor	ax,ax
_owner+1a:	j	_owner+43
_owner+1c:	movb	al,72
_owner+1f:	and	ax,#ff
_owner+22:	movb	dl,*9(di)
_owner+25:	and	dx,#ff
_owner+29:	cmp	ax,dx
_owner+2b:	jne	_owner+31
_owner+2d:	mov	ax,di
_owner+2f:	j	_owner+43
_owner+31:	call	_suser
_owner+34:	or	ax,ax
_owner+36:	je	_owner+3c
_owner+38:	mov	ax,di
_owner+3a:	j	_owner+43
_owner+3c:	push	di
_owner+3d:	call	0
_owner+40:	pop	cx
_owner+41:	xor	ax,ax
_owner+43:	pop	di
_owner+44:	pop	si
_owner+45:	pop	bp
_owner+46:	ret
_suser:
_suser:		push	bp
_suser+1:	mov	bp,sp
_suser+3:	push	si
_suser+4:	push	di
_suser+5:	cmpb	72,*0
_suser+a:	jne	_suser+11
_suser+c:	mov	ax,#1
_suser+f:	j	_suser+18
_suser+11:	movb	71,*1
_suser+16:	xor	ax,ax
_suser+18:	pop	di
_suser+19:	pop	si
_suser+1a:	pop	bp
_suser+1b:	ret
_ufalloc:
_ufalloc:	push	bp
_ufalloc+1:	mov	bp,sp
_ufalloc+3:	push	si
_ufalloc+4:	push	di
_ufalloc+5:	xor	di,di
_ufalloc+7:	cmp	di,*14
_ufalloc+a:	jnl	_ufalloc+24
_ufalloc+c:	mov	bx,di
_ufalloc+e:	shl	bx
_ufalloc+10:	cmp	#a6(bx),*0
_ufalloc+15:	jne	_ufalloc+21
_ufalloc+17:	mov	bx,128
_ufalloc+1b:	mov	(bx),di
_ufalloc+1d:	mov	ax,di
_ufalloc+1f:	j	_ufalloc+2c
_ufalloc+21:	inc	di
_ufalloc+22:	j	_ufalloc+7
_ufalloc+24:	movb	71,*18
_ufalloc+29:	mov	ax,#ffff
_ufalloc+2c:	pop	di
_ufalloc+2d:	pop	si
_ufalloc+2e:	pop	bp
_ufalloc+2f:	ret
_falloc:
_falloc:	push	bp
_falloc+1:	mov	bp,sp
_falloc+3:	push	si
_falloc+4:	push	di
_falloc+5:	call	_ufalloc
_falloc+8:	mov	si,ax
_falloc+a:	or	ax,ax
_falloc+c:	jnl	_falloc+12
_falloc+e:	xor	ax,ax
_falloc+10:	j	_falloc+4e
_falloc+12:	mov	di,#0
_falloc+15:	cmp	di,0
_falloc+19:	jnb	_falloc+3f
_falloc+1b:	cmpb	*1(di),*0
_falloc+1f:	jne	_falloc+3a
_falloc+21:	mov	bx,si
_falloc+23:	shl	bx
_falloc+25:	mov	#a6(bx),di
_falloc+29:	incb	*1(di)
_falloc+2c:	mov	*4(di),#0
_falloc+31:	mov	*6(di),#0
_falloc+36:	mov	ax,di
_falloc+38:	j	_falloc+4e
_falloc+3a:	add	di,*8
_falloc+3d:	j	_falloc+15
_falloc+3f:	mov	ax,#0
_falloc+42:	push	ax
_falloc+43:	call	0
_falloc+46:	pop	cx
_falloc+47:	movb	71,*17
_falloc+4c:	xor	ax,ax
_falloc+4e:	pop	di
_falloc+4f:	pop	si
_falloc+50:	pop	bp
_falloc+51:	ret

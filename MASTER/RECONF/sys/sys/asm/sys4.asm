_gtime:		push	bp
_gtime+1:	mov	bp,sp
_gtime+3:	push	si
_gtime+4:	push	di
_gtime+5:	mov	bx,128
_gtime+9:	mov	ax,0
_gtime+c:	mov	(bx),ax
_gtime+e:	mov	bx,128
_gtime+12:	mov	ax,2
_gtime+15:	mov	*-12(bx),ax
_gtime+18:	pop	di
_gtime+19:	pop	si
_gtime+1a:	pop	bp
_gtime+1b:	ret

_stime:
_stime:		push	bp
_stime+1:	mov	bp,sp
_stime+3:	push	si
_stime+4:	push	di
_stime+5:	call	0
_stime+8:	or	ax,ax
_stime+a:	je	_stime+2a
_stime+c:	mov	bx,128
_stime+10:	mov	ax,(bx)
_stime+12:	mov	0,ax
_stime+15:	mov	bx,128
_stime+19:	mov	ax,*-12(bx)
_stime+1c:	mov	2,ax
_stime+1f:	call	0
_stime+22:	mov	bx,128
_stime+26:	mov	(bx),#0
_stime+2a:	pop	di
_stime+2b:	pop	si
_stime+2c:	pop	bp
_stime+2d:	ret

_setuid:
_setuid:	push	bp
_setuid+1:	mov	bp,sp
_setuid+3:	push	si
_setuid+4:	push	di
_setuid+5:	mov	bx,128
_setuid+9:	mov	di,(bx)
_setuid+b:	movb	al,74
_setuid+e:	and	ax,#ff
_setuid+11:	cmp	ax,di
_setuid+13:	je	_setuid+1c
_setuid+15:	call	0
_setuid+18:	or	ax,ax
_setuid+1a:	je	_setuid+31
_setuid+1c:	mov	cx,di
_setuid+1e:	movb	72,cl
_setuid+22:	mov	bx,76
_setuid+26:	mov	cx,di
_setuid+28:	movb	*4(bx),cl
_setuid+2b:	mov	cx,di
_setuid+2d:	movb	74,cl
_setuid+31:	mov	bx,128
_setuid+35:	mov	(bx),#0
_setuid+39:	pop	di
_setuid+3a:	pop	si
_setuid+3b:	pop	bp
_setuid+3c:	ret

_getuid:
_getuid:	push	bp
_getuid+1:	mov	bp,sp
_getuid+3:	push	si
_getuid+4:	push	di
_getuid+5:	mov	bx,128
_getuid+9:	movb	al,74
_getuid+c:	and	ax,#ff
_getuid+f:	mov	(bx),ax
_getuid+11:	mov	bx,128
_getuid+15:	movb	al,72
_getuid+18:	and	ax,#ff
_getuid+1b:	mov	*-12(bx),ax
_getuid+1e:	pop	di
_getuid+1f:	pop	si
_getuid+20:	pop	bp
_getuid+21:	ret

_setgid:
_setgid:	push	bp
_setgid+1:	mov	bp,sp
_setgid+3:	push	si
_setgid+4:	push	di
_setgid+5:	mov	bx,128
_setgid+9:	mov	di,(bx)
_setgid+b:	movb	al,75
_setgid+e:	and	ax,#ff
_setgid+11:	cmp	ax,di
_setgid+13:	je	_setgid+1c
_setgid+15:	call	0
_setgid+18:	or	ax,ax
_setgid+1a:	je	_setgid+28
_setgid+1c:	mov	cx,di
_setgid+1e:	movb	73,cl
_setgid+22:	mov	cx,di
_setgid+24:	movb	75,cl
_setgid+28:	mov	bx,128
_setgid+2c:	mov	(bx),#0
_setgid+30:	pop	di
_setgid+31:	pop	si
_setgid+32:	pop	bp
_setgid+33:	ret

_getgid:
_getgid:	push	bp
_getgid+1:	mov	bp,sp
_getgid+3:	push	si
_getgid+4:	push	di
_getgid+5:	mov	bx,128
_getgid+9:	movb	al,75
_getgid+c:	and	ax,#ff
_getgid+f:	mov	(bx),ax
_getgid+11:	mov	bx,128
_getgid+15:	movb	al,73
_getgid+18:	and	ax,#ff
_getgid+1b:	mov	*-12(bx),ax
_getgid+1e:	pop	di
_getgid+1f:	pop	si
_getgid+20:	pop	bp
_getgid+21:	ret

_getpid:
_getpid:	push	bp
_getpid+1:	mov	bp,sp
_getpid+3:	push	si
_getpid+4:	push	di
_getpid+5:	mov	bx,76
_getpid+9:	mov	ax,*8(bx)
_getpid+c:	mov	bx,128
_getpid+10:	mov	(bx),ax
_getpid+12:	pop	di
_getpid+13:	pop	si
_getpid+14:	pop	bp
_getpid+15:	ret

_sync:
_sync:		push	bp
_sync+1:	mov	bp,sp
_sync+3:	push	si
_sync+4:	push	di
_sync+5:	call	0
_sync+8:	mov	bx,128
_sync+c:	mov	(bx),#0
_sync+10:	pop	di
_sync+11:	pop	si
_sync+12:	pop	bp
_sync+13:	ret

_nice:
_nice:		push	bp
_nice+1:	mov	bp,sp
_nice+3:	push	si
_nice+4:	push	di
_nice+5:	mov	bx,128
_nice+9:	mov	di,(bx)
_nice+b:	or	di,di
_nice+d:	jnl	_nice+30
_nice+f:	cmpb	73,*0
_nice+14:	je	_nice+1d
_nice+16:	cmpb	72,*0
_nice+1b:	jne	_nice+2c
_nice+1d:	cmp	di,*9c
_nice+20:	jnle	_nice+38
_nice+22:	mov	bx,76
_nice+26:	or	(bx),#100
_nice+2a:	j	_nice+38
_nice+2c:	xor	di,di
_nice+2e:	j	_nice+38
_nice+30:	mov	bx,76
_nice+34:	and	(bx),#feff
_nice+38:	mov	bx,76
_nice+3c:	movb	al,*7(bx)
_nice+3f:	cbw
_nice+40:	add	di,ax
_nice+42:	cmp	di,*14
_nice+45:	jle	_nice+4a
_nice+47:	mov	di,#14
_nice+4a:	cmp	di,*ec
_nice+4d:	jnl	_nice+52
_nice+4f:	mov	di,#ffec
_nice+52:	mov	bx,76
_nice+56:	mov	cx,di
_nice+58:	movb	*7(bx),cl
_nice+5b:	mov	bx,128
_nice+5f:	mov	(bx),#0
_nice+63:	pop	di
_nice+64:	pop	si
_nice+65:	pop	bp
_nice+66:	ret

_unlink:
_unlink:	push	bp
_unlink+1:	mov	bp,sp
_unlink+3:	push	si
_unlink+4:	push	di
_unlink+5:	mov	ax,#2
_unlink+8:	push	ax
_unlink+9:	mov	ax,#0
_unlink+c:	push	ax
_unlink+d:	call	0
_unlink+10:	add	sp,*4
_unlink+13:	mov	si,ax
_unlink+15:	or	si,si
_unlink+17:	je	_unlink+7f
_unlink+19:	push	si
_unlink+1a:	call	0
_unlink+1d:	pop	cx
_unlink+1e:	push	94
_unlink+22:	push	*2(si)
_unlink+25:	call	0
_unlink+28:	add	sp,*4
_unlink+2b:	mov	di,ax
_unlink+2d:	or	di,di
_unlink+2f:	jne	_unlink+39
_unlink+31:	mov	ax,#0
_unlink+34:	push	ax
_unlink+35:	call	0
_unlink+38:	pop	cx
_unlink+39:	mov	ax,*6(di)
_unlink+3c:	and	ax,#6000
_unlink+3f:	cmp	ax,#4000
_unlink+42:	jne	_unlink+4b
_unlink+44:	call	0
_unlink+47:	or	ax,ax
_unlink+49:	je	_unlink+75
_unlink+4b:	sub	7e,*10
_unlink+50:	mov	78,#94
_unlink+56:	mov	7a,#10
_unlink+5c:	mov	94,#0
_unlink+62:	push	si
_unlink+63:	call	0
_unlink+66:	pop	cx
_unlink+67:	decb	*8(di)
_unlink+6a:	orb	(di),*2
_unlink+6d:	mov	bx,128
_unlink+71:	mov	(bx),#0
_unlink+75:	push	si
_unlink+76:	call	0
_unlink+79:	pop	cx
_unlink+7a:	push	di
_unlink+7b:	call	0
_unlink+7e:	pop	cx
_unlink+7f:	pop	di
_unlink+80:	pop	si
_unlink+81:	pop	bp
_unlink+82:	ret

_chdir:
_chdir:		push	bp
_chdir+1:	mov	bp,sp
_chdir+3:	push	si
_chdir+4:	push	di
_chdir+5:	mov	ax,#80
_chdir+8:	push	ax
_chdir+9:	call	_cdirec
_chdir+c:	pop	cx
_chdir+d:	mov	bx,128
_chdir+11:	mov	(bx),#0
_chdir+15:	pop	di
_chdir+16:	pop	si
_chdir+17:	pop	bp
_chdir+18:	ret

_chroot:
_chroot:	push	bp
_chroot+1:	mov	bp,sp
_chroot+3:	push	si
_chroot+4:	push	di
_chroot+5:	mov	ax,#82
_chroot+8:	push	ax
_chroot+9:	call	_cdirec
_chroot+c:	pop	cx
_chroot+d:	mov	bx,128
_chroot+11:	mov	(bx),#0
_chroot+15:	pop	di
_chroot+16:	pop	si
_chroot+17:	pop	bp
_chroot+18:	ret

_cdirec:
_cdirec:	push	bp
_cdirec+1:	mov	bp,sp
_cdirec+3:	push	si
_cdirec+4:	push	di
_cdirec+5:	xor	ax,ax
_cdirec+7:	push	ax
_cdirec+8:	mov	ax,#0
_cdirec+b:	push	ax
_cdirec+c:	call	0
_cdirec+f:	add	sp,*4
_cdirec+12:	mov	di,ax
_cdirec+14:	or	di,di
_cdirec+16:	je	_cdirec+59
_cdirec+18:	mov	ax,*6(di)
_cdirec+1b:	and	ax,#6000
_cdirec+1e:	cmp	ax,#4000
_cdirec+21:	je	_cdirec+2f
_cdirec+23:	movb	71,*14
_cdirec+28:	push	di
_cdirec+29:	call	0
_cdirec+2c:	pop	cx
_cdirec+2d:	j	_cdirec+59
_cdirec+2f:	mov	ax,#40
_cdirec+32:	push	ax
_cdirec+33:	push	di
_cdirec+34:	call	0
_cdirec+37:	add	sp,*4
_cdirec+3a:	or	ax,ax
_cdirec+3c:	jne	_cdirec+28
_cdirec+3e:	push	di
_cdirec+3f:	call	0
_cdirec+42:	pop	cx
_cdirec+43:	mov	bx,*4(bp)
_cdirec+46:	cmp	(bx),*0
_cdirec+49:	je	_cdirec+54
_cdirec+4b:	mov	bx,*4(bp)
_cdirec+4e:	push	(bx)
_cdirec+50:	call	0
_cdirec+53:	pop	cx
_cdirec+54:	mov	bx,*4(bp)
_cdirec+57:	mov	(bx),di
_cdirec+59:	pop	di
_cdirec+5a:	pop	si
_cdirec+5b:	pop	bp
_cdirec+5c:	ret

_chmod:
_chmod:		push	bp
_chmod+1:	mov	bp,sp
_chmod+3:	push	si
_chmod+4:	push	di
_chmod+5:	call	0
_chmod+8:	mov	di,ax
_chmod+a:	or	ax,ax
_chmod+c:	je	_chmod+47
_chmod+e:	and	*6(di),#f000
_chmod+13:	cmpb	72,*0
_chmod+18:	je	_chmod+2a
_chmod+1a:	cmpb	73,*0
_chmod+1f:	je	_chmod+2a
_chmod+21:	mov	bx,128
_chmod+25:	and	*-12(bx),#fdff
_chmod+2a:	mov	bx,128
_chmod+2e:	mov	ax,*-12(bx)
_chmod+31:	and	ax,#fff
_chmod+34:	or	*6(di),ax
_chmod+37:	orb	(di),*2
_chmod+3a:	push	di
_chmod+3b:	call	0
_chmod+3e:	pop	cx
_chmod+3f:	mov	bx,128
_chmod+43:	mov	(bx),#0
_chmod+47:	pop	di
_chmod+48:	pop	si
_chmod+49:	pop	bp
_chmod+4a:	ret

_chown:
_chown:		push	bp
_chown+1:	mov	bp,sp
_chown+3:	push	si
_chown+4:	push	di
_chown+5:	call	0
_chown+8:	or	ax,ax
_chown+a:	je	_chown+3d
_chown+c:	call	0
_chown+f:	mov	di,ax
_chown+11:	or	ax,ax
_chown+13:	je	_chown+3d
_chown+15:	mov	bx,128
_chown+19:	mov	ax,*-12(bx)
_chown+1c:	mov	cx,ax
_chown+1e:	movb	*9(di),cl
_chown+21:	mov	bx,128
_chown+25:	mov	ax,*-4(bx)
_chown+28:	mov	cx,ax
_chown+2a:	movb	*10(di),cl
_chown+2d:	orb	(di),*2
_chown+30:	push	di
_chown+31:	call	0
_chown+34:	pop	cx
_chown+35:	mov	bx,128
_chown+39:	mov	(bx),#0
_chown+3d:	pop	di
_chown+3e:	pop	si
_chown+3f:	pop	bp
_chown+40:	ret

_ssig:
_ssig:		push	bp
_ssig+1:	mov	bp,sp
_ssig+3:	push	si
_ssig+4:	push	di
_ssig+5:	sub	sp,*4
_ssig+8:	mov	bx,128
_ssig+c:	mov	di,(bx)
_ssig+e:	or	di,di
_ssig+10:	jle	_ssig+1c
_ssig+12:	cmp	di,*21
_ssig+15:	jnl	_ssig+1c
_ssig+17:	cmp	di,*9
_ssig+1a:	jne	_ssig+23
_ssig+1c:	movb	71,*16
_ssig+21:	j	_ssig+75
_ssig+23:	mov	bx,di
_ssig+25:	shl	bx
_ssig+27:	mov	ax,#d6(bx)
_ssig+2b:	mov	bx,128
_ssig+2f:	mov	(bx),ax
_ssig+31:	mov	bx,128
_ssig+35:	mov	ax,*-12(bx)
_ssig+38:	mov	bx,di
_ssig+3a:	shl	bx
_ssig+3c:	mov	#d6(bx),ax
_ssig+40:	dec	di
_ssig+41:	mov	ax,di
_ssig+43:	cwd
_ssig+44:	mov	bx,#1
_ssig+47:	xor	si,si
_ssig+49:	mov	cx,ax
_ssig+4b:	or	cx,cx
_ssig+4d:	je	_ssig+55
_ssig+4f:	shl	bx
_ssig+51:	rcl	si
_ssig+53:	loop	_ssig+4f
_ssig+55:
data address not found
_ssig+57:
data address not found
_ssig+59:	mov	*-8(bp),bx
_ssig+5c:	mov	*-6(bp),si
_ssig+5f:	mov	bx,76
_ssig+63:	mov	ax,*28(bx)
_ssig+66:	mov	dx,*30(bx)
_ssig+69:	and	ax,*-8(bp)
_ssig+6c:	and	dx,*-6(bp)
_ssig+6f:	mov	*28(bx),ax
_ssig+72:	mov	*30(bx),dx
_ssig+75:	lea	sp,*-4(bp)
_ssig+78:	pop	di
_ssig+79:	pop	si
_ssig+7a:	pop	bp
_ssig+7b:	ret

_kill:
_kill:		push	bp
_kill+1:	mov	bp,sp
_kill+3:	push	si
_kill+4:	push	di
_kill+5:	mov	bx,128
_kill+9:	mov	si,*-12(bx)
_kill+c:	mov	bx,128
_kill+10:	cmp	(bx),*0
_kill+13:	jne	_kill+25
_kill+15:	push	si
_kill+16:	mov	bx,76
_kill+1a:	push	*26(bx)
_kill+1d:	call	0
_kill+20:	add	sp,*4
_kill+23:	j	_kill+62
_kill+25:	mov	bx,128
_kill+29:	cmp	(bx),*0
_kill+2c:	jnl	_kill+51
_kill+2e:	call	0
_kill+31:	or	ax,ax
_kill+33:	je	_kill+6a
_kill+35:	mov	di,#44
_kill+38:	cmp	di,0
_kill+3c:	jnb	_kill+62
_kill+3e:	cmpb	*2(di),*0
_kill+42:	je	_kill+4c
_kill+44:	push	si
_kill+45:	push	di
_kill+46:	call	0
_kill+49:	add	sp,*4
_kill+4c:	add	di,*22
_kill+4f:	j	_kill+38
_kill+51:	call	_killchk
_kill+54:	mov	di,ax
_kill+56:	or	ax,ax
_kill+58:	je	_kill+62
_kill+5a:	push	si
_kill+5b:	push	di
_kill+5c:	call	0
_kill+5f:	add	sp,*4
_kill+62:	mov	bx,128
_kill+66:	mov	(bx),#0
_kill+6a:	pop	di
_kill+6b:	pop	si
_kill+6c:	pop	bp
_kill+6d:	ret

_suspend:
_suspend:	push	bp
_suspend+1:	mov	bp,sp
_suspend+3:	push	si
_suspend+4:	push	di
_suspend+5:	call	_killchk
_suspend+8:	mov	di,ax
_suspend+a:	or	ax,ax
_suspend+c:	je	_suspend+2d
_suspend+e:	mov	bx,128
_suspend+12:	cmp	*-12(bx),*0
_suspend+16:	je	_suspend+24
_suspend+18:	cmpb	*2(di),*3
_suspend+1c:	jnbe	_suspend+2d
_suspend+1e:	orb	*2(di),*40
_suspend+22:	j	_suspend+2d
_suspend+24:	andb	*2(di),*bf
_suspend+28:	push	di
_suspend+29:	call	0
_suspend+2c:	pop	cx
_suspend+2d:	mov	bx,128
_suspend+31:	mov	(bx),#0
_suspend+35:	pop	di
_suspend+36:	pop	si
_suspend+37:	pop	bp
_suspend+38:	ret

_killchk:
_killchk:	push	bp
_killchk+1:	mov	bp,sp
_killchk+3:	push	si
_killchk+4:	push	di
_killchk+5:	mov	bx,128
_killchk+9:	mov	si,(bx)
_killchk+b:	mov	di,#0
_killchk+e:	cmp	di,0
_killchk+12:	jnb	_killchk+3a
_killchk+14:	cmp	*8(di),si
_killchk+17:	jne	_killchk+35
_killchk+19:	cmpb	72,*0
_killchk+1e:	je	_killchk+31
_killchk+20:	movb	al,72
_killchk+23:	and	ax,#ff
_killchk+26:	movb	dl,*4(di)
_killchk+29:	and	dx,#ff
_killchk+2d:	cmp	ax,dx
_killchk+2f:	jne	_killchk+35
_killchk+31:	mov	ax,di
_killchk+33:	j	_killchk+41
_killchk+35:	add	di,*22
_killchk+38:	j	_killchk+e
_killchk+3a:	movb	71,*3
_killchk+3f:	xor	ax,ax
_killchk+41:	pop	di
_killchk+42:	pop	si
_killchk+43:	pop	bp
_killchk+44:	ret

_times:
_times:		push	bp
_times+1:	mov	bp,sp
_times+3:	push	si
_times+4:	push	di
_times+5:	mov	ax,#10
_times+8:	push	ax
_times+9:	mov	bx,128
_times+d:	push	(bx)
_times+f:	mov	ax,#118
_times+12:	push	ax
_times+13:	call	0
_times+16:	add	sp,*6
_times+19:	or	ax,ax
_times+1b:	jnl	_times+22
_times+1d:	movb	71,*e
_times+22:	mov	bx,128
_times+26:	mov	(bx),#0
_times+2a:	pop	di
_times+2b:	pop	si
_times+2c:	pop	bp
_times+2d:	ret

_profil:
_profil:	push	bp
_profil+1:	mov	bp,sp
_profil+3:	push	si
_profil+4:	push	di
_profil+5:	mov	bx,128
_profil+9:	mov	ax,(bx)
_profil+b:	mov	12a,ax
_profil+e:	mov	bx,128
_profil+12:	mov	ax,*-12(bx)
_profil+15:	mov	12c,ax
_profil+18:	mov	bx,128
_profil+1c:	mov	ax,*-4(bx)
_profil+1f:	mov	12e,ax
_profil+22:	mov	bx,128
_profil+26:	mov	ax,*-20(bx)
_profil+29:	sar	ax
_profil+2b:	and	ax,#7fff
_profil+2e:	mov	130,ax
_profil+31:	mov	bx,128
_profil+35:	mov	(bx),#0
_profil+39:	pop	di
_profil+3a:	pop	si
_profil+3b:	pop	bp
_profil+3c:	ret

_syslock:
_syslock:	push	bp
_syslock+1:	mov	bp,sp
_syslock+3:	push	si
_syslock+4:	push	di
_syslock+5:	mov	bx,128
_syslock+9:	cmp	(bx),*0
_syslock+c:	je	_syslock+26
_syslock+e:	cmpb	73,*0
_syslock+13:	je	_syslock+1c
_syslock+15:	call	0
_syslock+18:	or	ax,ax
_syslock+1a:	je	_syslock+2e
_syslock+1c:	mov	bx,76
_syslock+20:	or	(bx),#40
_syslock+24:	j	_syslock+2e
_syslock+26:	mov	bx,76
_syslock+2a:	and	(bx),#ffbf
_syslock+2e:	mov	bx,128
_syslock+32:	mov	(bx),#0
_syslock+36:	pop	di
_syslock+37:	pop	si
_syslock+38:	pop	bp
_syslock+39:	ret

_sysphys:
_sysphys:	push	bp
_sysphys+1:	mov	bp,sp
_sysphys+3:	push	si
_sysphys+4:	push	di
_sysphys+5:	mov	bx,128
_sysphys+9:	mov	di,*-4(bx)
_sysphys+c:	cmpb	73,*0
_sysphys+11:	je	_sysphys+26
_sysphys+13:	cmpb	72,*0
_sysphys+18:	je	_sysphys+26
_sysphys+1a:	mov	ax,#b000
_sysphys+1d:	mov	cx,#5
_sysphys+20:	shr	ax,cl
_sysphys+22:	cmp	di,ax
_sysphys+24:	jb	_sysphys+35
_sysphys+26:	mov	bx,76
_sysphys+2a:	cmp	*22(bx),*0
_sysphys+2e:	jne	_sysphys+35
_sysphys+30:	cmp	di,*ff
_sysphys+33:	jne	_sysphys+3c
_sysphys+35:	movb	71,*1
_sysphys+3a:	j	_sysphys+51
_sysphys+3c:	mov	ax,di
_sysphys+3e:	mov	cx,#5
_sysphys+41:	shl	ax,cl
_sysphys+43:	mov	e,ax
_sysphys+46:	call	0
_sysphys+49:	mov	bx,128
_sysphys+4d:	mov	(bx),#0
_sysphys+51:	pop	di
_sysphys+52:	pop	si
_sysphys+53:	pop	bp
_sysphys+54:	ret

_sysdata:
_sysdata:	push	bp
_sysdata+1:	mov	bp,sp
_sysdata+3:	push	si
_sysdata+4:	push	di
_sysdata+5:	push	cx
_sysdata+6:	mov	bx,76
_sysdata+a:	mov	di,*22(bx)
_sysdata+d:	mov	bx,128
_sysdata+11:	mov	ax,(bx)
_sysdata+13:	jmp	6aa
_sysdata+16:	or	di,di
_sysdata+18:	jne	_sysdata+22
_sysdata+1a:	movb	71,*16
_sysdata+1f:	jmp	_sysdata+d9
_sysdata+22:	call	0
_sysdata+25:	mov	ax,#3
_sysdata+28:	push	ax
_sysdata+29:	push	di
_sysdata+2a:	call	0
_sysdata+2d:	add	sp,*4
_sysdata+30:	mov	bx,76
_sysdata+34:	mov	*22(bx),#0
_sysdata+39:	mov	e,#ffff
_sysdata+3f:	jmp	6a8
_sysdata+42:	or	di,di
_sysdata+44:	jne	_sysdata+1a
_sysdata+46:	push	0
_sysdata+4a:	call	0
_sysdata+4d:	pop	cx
_sysdata+4e:	mov	si,ax
_sysdata+50:	or	ax,ax
_sysdata+52:	je	_sysdata+75
_sysdata+54:	mov	bx,128
_sysdata+58:	mov	ax,*-4(bx)
_sysdata+5b:	mov	*-6(bp),ax
_sysdata+5e:	j	_sysdata+af
_sysdata+60:	or	di,di
_sysdata+62:	jne	_sysdata+1a
_sysdata+64:	xor	ax,ax
_sysdata+66:	push	ax
_sysdata+67:	mov	ax,#0
_sysdata+6a:	push	ax
_sysdata+6b:	call	0
_sysdata+6e:	add	sp,*4
_sysdata+71:	mov	si,ax
_sysdata+73:	or	ax,ax
_sysdata+75:	je	_sysdata+d9
_sysdata+77:
data address not found
_sysdata+79:	push	es
_sysdata+7a:	addb	*116(bx+si),ah
_sysdata+7d:	pop	es
_sysdata+7e:	movb	71,*15
_sysdata+83:	j	_sysdata+d4
_sysdata+85:	movb	al,*11(si)
_sysdata+88:	and	ax,#ff
_sysdata+8b:	mov	cx,#7
_sysdata+8e:	shl	ax,cl
_sysdata+90:	mov	dx,*12(si)
_sysdata+93:	mov	cx,#9
_sysdata+96:	shr	dx,cl
_sysdata+98:	add	ax,dx
_sysdata+9a:	inc	ax
_sysdata+9b:	mov	*-6(bp),ax
_sysdata+9e:	movb	70,*0
_sysdata+a3:	mov	7e,#0
_sysdata+a9:	mov	7c,#0
_sysdata+af:	push	*-6(bp)
_sysdata+b2:	mov	bx,128
_sysdata+b6:	cmp	(bx),*1
_sysdata+b9:	jne	_sysdata+c0
_sysdata+bb:	mov	ax,#2
_sysdata+be:	j	_sysdata+c3
_sysdata+c0:	mov	ax,#1
_sysdata+c3:	push	ax
_sysdata+c4:	push	si
_sysdata+c5:	call	0
_sysdata+c8:	add	sp,*6
_sysdata+cb:	or	ax,ax
_sysdata+cd:	jne	_sysdata+db
_sysdata+cf:	movb	71,*c
_sysdata+d4:	push	si
_sysdata+d5:	call	0
_sysdata+d8:	pop	cx
_sysdata+d9:	j	6c1
_sysdata+db:	push	si
_sysdata+dc:	call	0
_sysdata+df:	pop	cx
_sysdata+e0:	mov	bx,76
_sysdata+e4:	mov	di,*22(bx)
_sysdata+e7:	mov	bx,128
_sysdata+eb:	mov	*-4(bx),#0
_sysdata+f0:	or	di,di
_sysdata+f2:	jne	_sysdata+f7
_sysdata+f4:	jmp	_sysdata+1a
_sysdata+f7:	mov	bx,128
_sysdata+fb:	mov	ax,*8(di)
_sysdata+fe:	cmp	ax,*-4(bx)
691:		jnbe	696
693:		jmp	_sysdata+1a
696:		mov	bx,128
69a:		mov	ax,*-4(bx)
69d:		mov	cx,#5
6a0:		shl	ax,cl
6a2:		mov	e,ax
6a5:		call	0
6a8:		j	6b9
6aa:		cmp	ax,#3
6ad:		jbe	6b2
6af:		jmp	_sysdata+60
6b2:		shl	ax
6b4:		xchg	bx
6b5:		jmp	#770(bx)
6b9:		mov	bx,128
6bd:		mov	(bx),#0
6c1:		pop	cx
6c2:		pop	di
6c3:		pop	si
6c4:		pop	bp
6c5:		ret

_syssema:
_syssema:	push	bp
_syssema+1:	mov	bp,sp
_syssema+3:	push	si
_syssema+4:	push	di
_syssema+5:	push	cx
_syssema+6:	mov	bx,128
_syssema+a:	mov	di,*-12(bx)
_syssema+d:	or	di,di
_syssema+f:	jnl	_syssema+1d
_syssema+11:	mov	ax,#ffff
_syssema+14:	sub	ax,di
_syssema+16:	mov	di,ax
_syssema+18:	mov	si,#0
_syssema+1b:	j	_syssema+29
_syssema+1d:	mov	bx,76
_syssema+21:	mov	ax,*26(bx)
_syssema+24:	add	ax,#1c
_syssema+27:	mov	si,ax
_syssema+29:	mov	ax,#1
_syssema+2c:	mov	cx,di
_syssema+2e:	shl	ax,cl
_syssema+30:	mov	di,ax
_syssema+32:	mov	bx,128
_syssema+36:	mov	ax,(bx)
_syssema+38:	mov	*-6(bp),ax
_syssema+3b:	mov	bx,128
_syssema+3f:	mov	(bx),#0
_syssema+43:	mov	ax,*-6(bp)
_syssema+46:	j	_syssema+99
_syssema+48:	movb	71,*16
_syssema+4d:	j	_syssema+76
_syssema+4f:	mov	ax,(si)
_syssema+51:	test	di,ax
_syssema+53:	je	_syssema+97
_syssema+55:	mov	bx,128
_syssema+59:	inc	(bx)
_syssema+5b:	j	_syssema+97
_syssema+5d:	mov	ax,di
_syssema+5f:
data address not found
_syssema+61:	and	(si),ax
_syssema+63:	push	si
_syssema+64:	call	0
_syssema+67:	pop	cx
_syssema+68:	j	_syssema+97
_syssema+6a:	mov	ax,(si)
_syssema+6c:	test	di,ax
_syssema+6e:	je	_syssema+78
_syssema+70:	mov	bx,128
_syssema+74:	inc	(bx)
_syssema+76:	j	_syssema+a5
_syssema+78:	mov	ax,(si)
_syssema+7a:	test	di,ax
_syssema+7c:	je	_syssema+95
_syssema+7e:	mov	bx,128
_syssema+82:	mov	ax,*-4(bx)
_syssema+85:	and	ax,#f
_syssema+88:	add	ax,#15
_syssema+8b:	push	ax
_syssema+8c:	push	si
_syssema+8d:	call	0
_syssema+90:	add	sp,*4
_syssema+93:	j	_syssema+78
_syssema+95:	or	(si),di
_syssema+97:	j	_syssema+a5
_syssema+99:	cmp	ax,#3
_syssema+9c:	jnbe	_syssema+48
_syssema+9e:	shl	ax
_syssema+a0:	xchg	bx
_syssema+a1:	jmp	#778(bx)
_syssema+a5:	pop	cx
_syssema+a6:	pop	di
_syssema+a7:	pop	si
_syssema+a8:	pop	bp
_syssema+a9:	ret
